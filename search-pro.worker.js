const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":120,\"nextId\":120,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"2\",\"3\":\"3\",\"4\":\"4\",\"5\":\"5\",\"6\":\"6\",\"7\":\"7\",\"8\":\"8\",\"9\":\"8#1-概述\",\"10\":\"9\",\"11\":\"10\",\"12\":\"10#说明\",\"13\":\"10#前言\",\"14\":\"11\",\"15\":\"11#1-注解概述\",\"16\":\"11#11-注解入门\",\"17\":\"11#12-内置注解\",\"18\":\"11#13-元注解\",\"19\":\"11#14-自定义注解\",\"20\":\"11#2-反射概述\",\"21\":\"11#21-反射机制概述\",\"22\":\"11#22-理解-class-类并获取-class-实例\",\"23\":\"11#23-类的加载与-classloader\",\"24\":\"11#24-分析类的初始化\",\"25\":\"11#25-类加载器\",\"26\":\"11#26-获取类的运行时结构\",\"27\":\"11#27-动态创建对象执行方法\",\"28\":\"11#28-性能对比分析\",\"29\":\"11#29-获取泛型信息\",\"30\":\"11#210-获取注解信息\",\"31\":\"12\",\"32\":\"13\",\"33\":\"13#1-懒汉模式\",\"34\":\"13#2-饿汉模式\",\"35\":\"13#3-内部类实现\",\"36\":\"13#4-枚举实现\",\"37\":\"14\",\"38\":\"14#11-kotalin-简介\",\"39\":\"14#12-开发环境\",\"40\":\"14#13-hello-kotlin\",\"41\":\"14#14-命令行运行\",\"42\":\"14#15-脚本模式\",\"43\":\"15\",\"44\":\"15#21-基本语法\",\"45\":\"15#22-数据类型\",\"46\":\"15#23-函数语法\",\"47\":\"15#24-条件语句\",\"48\":\"15#25-循环语句\",\"49\":\"16\",\"50\":\"16#31-类\",\"51\":\"16#32-属性\",\"52\":\"16#33-继承\",\"53\":\"16#34-接口\",\"54\":\"16#35-扩展\",\"55\":\"17\",\"56\":\"17#1-mysql-配置\",\"57\":\"17#2-canal-配置\",\"58\":\"18\",\"59\":\"19\",\"60\":\"19#1-常见标签\",\"61\":\"19#2-示例\",\"62\":\"20\",\"63\":\"20#1-frp-简介\",\"64\":\"20#2-docker-部署\",\"65\":\"20#21-客户端配置\",\"66\":\"20#22-服务端配置\",\"67\":\"21\",\"68\":\"22\",\"69\":\"22#1-http-代理\",\"70\":\"22#2-tcp-代理\",\"71\":\"23\",\"72\":\"23#1-安装\",\"73\":\"23#2-运行示例\",\"74\":\"23#3-使用-docker-部署\",\"75\":\"24\",\"76\":\"25\",\"77\":\"25#基础概念\",\"78\":\"25#1-node\",\"79\":\"25#2-pod\",\"80\":\"25#3-service\",\"81\":\"25#4-ingress\",\"82\":\"25#5-configmap\",\"83\":\"25#6-secret\",\"84\":\"25#7-volume\",\"85\":\"25#8-deployment\",\"86\":\"25#9-statefulset\",\"87\":\"25#kubernetes-架构\",\"88\":\"25#1-master-节点\",\"89\":\"26\",\"90\":\"27\",\"91\":\"28\",\"92\":\"28#1-常见-mime-类型\",\"93\":\"28#2-nginx-配置-mime-类型\",\"94\":\"29\",\"95\":\"29#实例\",\"96\":\"30\",\"97\":\"30#11-命名风格\",\"98\":\"30#12-常量定义\",\"99\":\"30#13-代码格式\",\"100\":\"30#14-oop-规约\",\"101\":\"30#15-日期时间\",\"102\":\"30#16-集合处理\",\"103\":\"30#17-并发处理\",\"104\":\"30#18-控制语句\",\"105\":\"30#19-注释规约\",\"106\":\"30#110-前后端规约\",\"107\":\"31\",\"108\":\"31#11-历史\",\"109\":\"31#12-语言特性\",\"110\":\"31#13-发行版本\",\"111\":\"31#14-安装开发环境\",\"112\":\"31#15-编码习惯\",\"113\":\"32\",\"114\":\"32#21-java-标识符\",\"115\":\"32#22-数据类型\",\"116\":\"32#23-类型转换\",\"117\":\"32#附录易错类型讲解\",\"118\":\"33\",\"119\":\"34\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[2],\"3\":[1],\"4\":[2],\"5\":[1],\"6\":[2],\"7\":[2],\"8\":[2],\"9\":[2,100],\"10\":[2,2],\"11\":[3],\"12\":[1,21],\"13\":[1,102],\"14\":[2,6],\"15\":[2,8],\"16\":[2,61],\"17\":[3,51],\"18\":[3,51],\"19\":[3,62],\"20\":[2],\"21\":[3,139],\"22\":[4,162],\"23\":[3,108],\"24\":[3,74],\"25\":[3,140],\"26\":[3,74],\"27\":[3,78],\"28\":[3,52],\"29\":[3,76],\"30\":[3,92],\"31\":[2],\"32\":[1],\"33\":[2,27],\"34\":[2,22],\"35\":[2,54],\"36\":[2,40],\"37\":[3],\"38\":[3,44],\"39\":[3,25],\"40\":[4,33],\"41\":[3,43],\"42\":[3,32],\"43\":[3],\"44\":[3,71],\"45\":[2,172],\"46\":[3,37],\"47\":[3,69],\"48\":[3,95],\"49\":[3],\"50\":[3,46],\"51\":[3,28],\"52\":[2,23],\"53\":[3,29],\"54\":[3,14],\"55\":[3],\"56\":[3,23],\"57\":[3,53],\"58\":[1],\"59\":[4],\"60\":[2,27],\"61\":[2,29],\"62\":[2],\"63\":[3,32],\"64\":[3,26],\"65\":[3,78],\"66\":[2,75],\"67\":[2],\"68\":[3],\"69\":[3,15],\"70\":[3,105],\"71\":[2,4],\"72\":[2,12],\"73\":[2,98],\"74\":[4,50],\"75\":[1],\"76\":[3],\"77\":[1],\"78\":[2,6],\"79\":[2,12],\"80\":[2,9],\"81\":[2,6],\"82\":[2,6],\"83\":[2,6],\"84\":[2,5],\"85\":[2,7],\"86\":[2,6],\"87\":[2,40],\"88\":[3],\"89\":[1],\"90\":[1],\"91\":[2],\"92\":[4,64],\"93\":[1,53],\"94\":[3],\"95\":[1,30],\"96\":[2],\"97\":[2,158],\"98\":[3],\"99\":[3],\"100\":[4],\"101\":[3],\"102\":[3],\"103\":[3],\"104\":[3],\"105\":[3],\"106\":[3],\"107\":[3],\"108\":[2,86],\"109\":[3,11],\"110\":[3,97],\"111\":[3,24],\"112\":[3,24],\"113\":[3],\"114\":[4,21],\"115\":[2,34],\"116\":[3,2],\"117\":[2,39],\"118\":[1,3],\"119\":[1]},\"averageFieldLength\":[2.4416666666666678,43.56780554800632],\"storedFields\":{\"0\":{\"h\":\"后端笔记\"},\"1\":{\"h\":\"云服务\"},\"2\":{\"h\":\"Java 语言\"},\"3\":{\"h\":\"设计模式\"},\"4\":{\"h\":\"Kotlin 语言基础\"},\"5\":{\"h\":\"后端工具合集\"},\"6\":{\"h\":\"OSS 与云网关\"},\"7\":{\"h\":\"阿里云 OSS\"},\"8\":{\"h\":\"OSSFs 挂载\"},\"9\":{\"h\":\"1. 概述\",\"t\":[\"下面使用 Dockerfile 用于构建 ossfs 镜像，docker run 启动容器并挂载 OSS。\",\"FROM ubuntu:22.04 ENV OSSFS_URL=https://gosspublic.alicdn.com/ossfs/ossfs_1.91.1_ubuntu22.04_amd64.deb ENV OSS_ENDPOINT=oss-cn-hangzhou.aliyuncs.com ENV OSS_BUCKET=test-bucket ENV OSS_ACCESS_KEY_ID=AccessKeyId ENV OSS_ACCESS_KEY_SECRET=AccessKeySecret WORKDIR /oss RUN echo \\\"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse\\\" > /etc/apt/sources.list && \\\\ echo \\\"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse\\\" >> /etc/apt/sources.list && \\\\ echo \\\"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse\\\" >> /etc/apt/sources.list && \\\\ echo \\\"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse\\\" >> /etc/apt/sources.list && \\\\ apt update && \\\\ apt upgrade -y && \\\\ apt install curl gdebi-core mime-support -y && \\\\ curl -o ossfs.deb $OSSFS_URL && \\\\ gdebi -n ossfs.deb && \\\\ echo ${OSS_BUCKET}:${OSS_ACCESS_KEY_ID}:${OSS_ACCESS_KEY_SECRET} > /etc/passwd-ossfs && \\\\ chmod 640 /etc/passwd-ossfs && \\\\ mkdir -p /oss/${OSS_BUCKET} && \\\\ rm -rf ossfs.deb && \\\\ apt clean CMD [ \\\"python3\\\", \\\"-m\\\", \\\"http.server\\\" ] \",\"构建镜像：\",\"docker build -t ossfs \\\\ --build-arg OSS_ENDPOINT=oss-cn-shanghai.aliyuncs.com \\\\ --build-arg OSS_BUCKET=alexsun \\\\ --build-arg OSS_ACCESS_KEY_ID=xxx \\\\ --build-arg OSS_ACCESS_KEY_SECRET=xxx \\\\ . \",\"启动容器：\",\"docker run -it \\\\\\n  --name oss \\\\\\n  --privileged=true \\\\\\n  -p 8000:8000 \\\\\\n  ossfs\\n\"]},\"10\":{\"h\":\"OSS 工具\",\"t\":[\"参考链接。\"]},\"11\":{\"h\":\"阿里 Java 开发手册\"},\"12\":{\"h\":\"说明\",\"t\":[\"本系列全部摘录了《Java 开发手册（黄山版）》的内容，GitHub 上可查看最新的内容。\",\"版本号\",\"制定团队\",\"更新日期\",\"备注\",\"1.7.1\",\"全球 Java 社区开发者\",\"2022.02.03\",\"黄山版，新增 11 条新规约\"]},\"13\":{\"h\":\"前言\",\"t\":[\"《Java 开发手册》是 Java 社区爱好者的集体智慧结晶和经验总结，经历了多次大规模一线实战的检验及不断完善，整理成册后，众多社区开发者踊跃参与打磨完善，系统化地整理成册，当前的最新版本是黄山版。现代软件行业的高速发展对开发者的综合素质要求越来越高，因为不仅是编程知识点，其它维度的知识点也会影响到软件的最终交付质量。比如：五花八门的错误码会人为地增加排查问题的难度；数据库的表结构和索引设计缺陷带来的系统架构缺陷或性能风险；工程结构混乱导致后续项目维护艰难；没有鉴权的漏洞代码容易被黑客攻击等。所以本手册以 Java 开发者为中心视角，划分为编程规约、异常日志、单元测试、安全规约、MySQL 数据库、工程结构、设计规约七个维度，再根据内容特征，细分成若干二级子目录。此外，依据约束力强弱及故障敏感性，规约依次分为 【强制】、【推荐】、【参考】 三大类。在延伸的信息中，说明： 对规约做了适当扩展和解释；正例： 提倡什么样的编码和实现方式；反例： 说明需要提防的雷区，以及真实的错误案例。\",\"手册的愿景是码出高效，码出质量。现代软件架构的复杂性需要协同开发完成，如何高效地协同呢？无规矩不成方圆，无规范难以协同，比如，制定交通法规表面上是要限制行车权，实际上是保障公众的人身安全，试想如果没有限速，没有红绿灯，谁还敢上路行驶？对软件来说，适当的规范和标准绝不是消灭代码内容的创造性、优雅性，而是限制过度个性化，以一种普遍认可的统一方式一起做事，提升协作效率，降低沟通成本。代码的字里行间流淌的是软件系统的血液，代码质量的提升是尽可能少踩坑，杜绝踩重复的坑，切实提升系统稳定性，码出质量。\",\"2017 年杭州云栖大会上发布了配套的 Java 开发规约 IDE 插件，下载量已达到 275 万人次，阿里云效也集成了代码规约扫描引擎。2018年9月在云栖厅发布 36 万字的配套详解图书《码出高效》，秉持“图胜于表，表胜于言”的理念，深入浅出地将计算机基础、面向对象思想、数据结构与集合、JVM 探源与内存分析、并发与多线程、单元测试等知识丰富立体地呈现出来。本书紧扣学以致用、学以精进的目标，结合一线开发的实践经验和故障案例，与底层源码解析融会贯通，娓娓道来。《码出高效》和《Java 开发手册（第 2 版）》稿费所得收入均捐赠公益事情，希望用技术情怀帮助到更多的人。\"]},\"14\":{\"h\":\"Java 注解和反射\",\"t\":[\"本文是 狂神说 Java：注解和反射 的学习笔记。\"]},\"15\":{\"h\":\"1. 注解概述\",\"t\":[\"许多框架，例如 MyBatis，其底层就是一个个注解和反射。通过注解，程序可以在运行时绑定一些信息或在编译时进行检查。通过反射获得注解可以极大地提高程序的灵活性。\"]},\"16\":{\"h\":\"1.1 注解入门\",\"t\":[\"注解（Annotation）是 JDK 5.0 开始引入的新技术。\",\"Annotation 的作用：\",\"注解不是程序，但可以对程序做出解释，功能与注释类似\",\"可以被其他程序读取\",\"Annotation 的格式：\",\"注解的基本格式为 @annotation_name\",\"有的注解还可以添加参数，例如下面的代码\",\"class A { @SuppressWarnings(value=\\\"unchecked\\\") public static void test() { String[] arr = new String[10]; } } \",\"Annotation 在哪里使用？\",\"package\",\"class\",\"method\",\"field\",\"注解相当于给它们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问。\",\"下面举例真实的案例：\",\"public class Test { @Override public String toString() { return \\\"Test{}\\\"; } } \",\"我们还知道 Thread 类继承了 Runnable 接口：\",\"@FunctionalInterface public interface Runnable { /** * ... * @see java.lang.Thread#run() */ public abstract void run(); } \",\"还有一些不建议使用或者过时的方法：\",\"@Deprecated public void destroy() { throw new NoSuchMethodError(); } \"]},\"17\":{\"h\":\"1.2 内置注解\",\"t\":[\"内置注解有下面几个：\",\"@Override：定义在 java.lang.Override 中，此注解只适用于修饰方法，表示一个方法重写父类的另一个方法\",\"@Deprecated：定义在 java.lang.Deprecated 中，此注释用于修饰方法、属性、类，表示不鼓励程序员使用这样的元素，通常是因为危险或存在更好的选择\",\"@SuppressWarnings：定义在 java.lang.SuppressWarnings 中，用来抑制编译时的警告信息 \",\"@SuppressWarnings(\\\"all\\\") 抑制全部警告\",\"@SuppressWarnings(\\\"unchecked\\\") 未检查的\",\"@SuppressWarnings(value={\\\"unchecked\\\", \\\"deprecation\\\"}) 可以选择多个\",\"……\",\"如果我们想重写 toString() 方法，但是不小心将方法写成 tostring()，如果此时有 @Override 注解，这个时候程序会报错。也就是说，重写注解会帮助我们检查程序是否是真的重写了这个方法。\",\"我们可以看一下 @SuppressWarnings 的原型：\",\"@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOVAL_VARIABLE}) @Retention(RetentionPolicy.SOURCE) public @interface SuppressWarnings { String[] value(); } \"]},\"18\":{\"h\":\"1.3 元注解\",\"t\":[\"元注解负责解释其他注解，Java 定义了 4 个标准的 meta-annotation 类型，它们被用来提供对其他 annotation 类型作说明。\",\"这些类型和它们所支持的类在 java.lang.annotation 包中可以找到：\",\"@Target：用于表述注解的使用范围\",\"@Retention：表示需要在什么级别保存该注释信息，用于描述注解的生命周期，可选值： \",\"SOURCE\",\"CLASS\",\"RUNTIME\",\"@Documented：说明该注解将被包含在 javadoc 中\",\"@Inherited：说明子类可以继承父类中的该注解\",\"下面我们定义一个注解：\",\"import java.lang.annotation.ElementType; import java.lang.annotation.Target; @Target(ElementType.METHOD) public @interface MyAnnotation { } \",\"上面的类型仅适用于方法，下面我们在一个类中定义：\",\"import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; public class Test { @MyAnnotation public void test() { } } @Target({ElementType.METHOD, ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @interface MyAnnotation { } \",\"@Retention 表示我们的注解在哪些地方有效，规定作用范围是 Runtime > Class > Source。\"]},\"19\":{\"h\":\"1.4 自定义注解\",\"t\":[\"使用 @interface 自定义注解时，自动继承了 java.lang.annotation.Annotation 接口：\",\"@interface 用来声明一个注解，格式为 public @interface AnnotationName { ... }\",\"其中的每一个方法实际上是声明了一个配置参数，方法的名称就是参数的名称\",\"返回值类型就是参数的类型，而且只能是基本类型，例如 Class、String、enum\",\"可以通过 default 关键字来声明参数的默认值\",\"如果只有一个参数成员，一般将参数命名为 value，此时参数名可以省略\",\"注解元素必须有值，我们定义注解元素时，常常使用 \\\"\\\"、0 等作为默认值\",\"public class Test { @MyAnnotation(age = 18) public void test() { } } @Target({ElementType.METHOD, ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @interface MyAnnotation { String name() default \\\"\\\"; int age(); int id() default -1; String[] schools() default {\\\"A\\\", \\\"B\\\"}; } \",\"如果注解只有一个值，并且以 value 命名，那么它可以省略名称，也就是不需要命名参数。\",\"public class Test { @MyAnnotation(\\\"Alex\\\") public void test() { } } @Target({ElementType.METHOD, ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @interface MyAnnotation { String value(); } \"]},\"20\":{\"h\":\"2. 反射概述\"},\"21\":{\"h\":\"2.1 反射机制概述\",\"t\":[\"动态语言 可以在运行时改变其结构的语言，主要的动态语言：\",\"Objective-C\",\"C#\",\"JavaScript\",\"PHP\",\"Python\",\"静态语言 在运行时不能改变其结构：\",\"Java\",\"C/C++\",\"Java 不是动态语言，但 Java 可以被称为准动态语言，反射使 Java 这个静态语言获得了动态特性，Java 的动态性可以让编程的时候更加灵活。\",\"反射（Reflection）是 Java 被视为动态语言的关键，反射机制允许程序执行期借助 Reflection API 取得任何类的内部信息，并能直接操作任意对象的内部属性及方法：\",\"Class c = Class.forName(\\\"java.lang.String\\\"); \",\"加载完类之后，在堆内存的方法区中就产生了一个 Class 类型的对象（一个类只有一个 Class 对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构，这个对象就像一面镜子，透过镜子看到类的结构，所以我们形象地称之为 反射。\",\"正常的创建对象方式：\",\"引入需要的 包类 名称\",\"通过 new 实例化\",\"取得实例化对象\",\"反射方式：\",\"实例化对象\",\"getClass() 方法调用获得类对象\",\"得到完整的 包类 名称\",\"Java 反射的优点和缺点：\",\"优点：可以实现动态创建对象和编译，体现出很大的灵活性\",\"缺点：对性能有影响，反射基本上解释操作，这些操作总是慢于直接执行相同的操作\",\"反射相关的主要的 API：\",\"java.lang.Class：代表一个类\",\"java.lang.reflect.Method：代表类的方法\",\"java.lang.reflect.Field：代表类的成员变量\",\"java.lang.reflect.Constructor：代表类的构造器\",\"Java 的 Class 对象是一类特殊的对象，它保留了类的结构信息，并且一个类运行在内存中只会有一个 Class 对象。\",\"首先我们定义一个 JavaBean：\",\"public class Student { private int id; private String name; private int score; public Student() { } public Student(int id, String name, int score) { this.id = id; this.name = name; this.score = score; } public int getId() { return id; } public String getName() { return name; } public int getScore() { return score; } public void setId(int id) { this.id = id; } public void setName(String name) { this.name = name; } public void setScore(int score) { this.score = score; } @Override public String toString() { return \\\"Student(id=\\\" + id + \\\", name=\\\\\\\"\\\" + name + \\\"\\\\\\\", score=\\\" + score + \\\")\\\"; } @Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null || getClass() != obj.getClass()) return false; Student student = (Student) obj; return id == student.id && score == student.score && name.equals(student.name); } } \",\"我们通过反射获取这个类：\",\"public class Test { public static void main(String[] args) throws ClassNotFoundException { Class<?> c1 = Class.forName(\\\"top.alexsun.Student\\\"); System.out.println(c1); // \\\"top.alexsun.Student\\\" } } \",\"我们知道 Object 类内有一个方法 getClass()：\",\"class Object { @Contract(pure=true) public final native Class<?> getClass(); } \",\"因为 Object 类被每一个类继承，那么每个对象都有 getClass 方法。\"]},\"22\":{\"h\":\"2.2 理解 类并获取 实例\",\"t\":[\"对象反射可以得到的信息：\",\"某个类的属性\",\"某个类的方法\",\"某个类实现了哪些接口\",\"对于每个类而言，JRE 都为其保留了一个不变的 Class 类型的对象，一个 Class 对象包含了特定某个结构（类、接口、数组类或 void）的有关的信息:\",\"Class 本身也是一个类\",\"Class 对象只能由系统建立对象\",\"一个加载的类在 JVM 中只有一个 Class 实例\",\"一个 Class 对象对应的是一个加载到 JVM 中的一个 .class 文件\",\"每个类的实例都会保存自己由哪一个 Class 实例所生成\",\"通过 Class 可以完整地得到一个类中的所有被加载的结构\",\"Class 类是 Reflection 的根源，针对任何你想动态加载的类必须首先获得相应的 Class 对象\",\"那么 Class 对象有哪些方法？\",\"方法名\",\"功能说明\",\"static Class.forName(String name)\",\"返回指定类名 name 的 Class 对象\",\"Object newInstance()\",\"调用缺省构造函数，返回 Class 对象的一个实例\",\"String getName()\",\"返回此 Class 对象所表示的实体（类、接口、数组类或 void）的名称\",\"Class getSuperclass()\",\"获取当前 Class 对象的父类 Class 对象\",\"Class[] getInterfaces()\",\"获取当前 Class 对象的接口\",\"ClassLoader getClassLoader()\",\"返回该类的类加载器\",\"Constructor[] getConstructors()\",\"返回 Constructor 数组\",\"Method getMethod(String name, Class... T)\",\"返回一个 Method 对象，该对象的形参为 paramType\",\"Field[] getDeclaredFields()\",\"返回 Field 对象的一个数组\",\"获取 Class 类的实例有几种方法：\",\"若已知具体的类，可以直接通过 .class 属性获取，这种方法最可靠且最快\",\"Class cls = Person.class; \",\"若已知某个类的实例，可以使用 .getClass() 属性获取\",\"Class cls = person.getClass(); \",\"已知一个类的全名，且该类在类路径下，可以通过 Class.forName() 获取，可能抛出 ClassNotFoundException\",\"Class cls = Class.forName(\\\"top.alexsun.Person\\\"); \",\"内置的基本数据类型可以使用 .Type 属性\",\"可以使用 ClassLoader 获取\",\"这是我们的几个类：\",\"class Person { public String name; public Person(){ } public Person(String name){ this.name = name; } @Override public String toString() { return \\\"Person{name='\\\" + name + \\\"'}\\\"; } } class Student extends Person { public Student() { this.name = \\\"学生\\\"; } } class Teacher extends Person { public Teacher() { this.name = \\\"老师\\\"; } } \",\"下面我们分别通过这几种方法获得 Class 对象：\",\"class Test { public static void main(String[] args) throws ClassNotFoundException { Person person = new Student(); System.out.println(\\\"这个人是：\\\" + person.name); // 通过类获得 Class c1 = Person.class; // 通过对象获得 Class c2 = person.getClass(); // 通过 Class.forName() 获得 Class c3 = Class.forName(\\\"top.alexsun.Student\\\"); // 通过 Type 属性获得 Class c4 = Integer.Type; // 获得父类 Class c5 = c1.getSuperclass(); } } \",\"有哪些类型可以获得 Class 对象？\",\"class：外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类\",\"interface：接口\",\"[]：数组\",\"enum：枚举\",\"annotation：注解类型 @interface\",\"primitive type：基本数据类型\",\"void：空\",\"class Test { public static void main(String[] args) { // 类具有 class 对象 Class c1 = Object.class; // 接口具有 class 对象 Class c2 = Comparable.class; // 数组具有 class 对象 Class c3 = String[].class; // 二维数组具有 class 对象 Class c4 = int[][].class; // 注解具有 class 对象 Class c5 = Override.class; // 枚举类型具有 class 对象 Class c6 = ElementType.class; // 具有 class 对象 Class c7 = Integer.class; // 具有 class 对象 Class c8 = void.class; // 具有 class 对象 Class c9 = Class.class; } } \"]},\"23\":{\"h\":\"2.3 类的加载与\",\"t\":[\"下面是 Java 的内存分析。\",\"Java 内存 \",\"堆 \",\"存放 new 的对象和数组\",\"可以被所有的线程共享，不会存放别的对象的引用\",\"栈 \",\"存放基本变量类型（会包含这个基本类型的具体数值）\",\"引用对象的变量（会存放这个引用在堆里面的具体地址）\",\"方法区 \",\"可以被所有的线程共享\",\"包含了所有的 class 和 static 变量\",\"类的加载过程：当程序主动使用某个类时，如果该类还没有加载到内存中，则系统会通过如下三个步骤来对该类进行初始化：\",\"类的 加载（Load）：将 .class 文件读入内存，并创建 java.lang.Class 对象，此过程由类加载器完成\",\"类的 链接（Link）：将类的二进制数据合并到 JRE 中\",\"类的 初始化（Initialize）：JVM 负责对类进行初始化\",\"类的加载与 ClassLoader 的理解：\",\"加载：将 .class 字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的 java.lang.Class 对象\",\"链接：将 Java 类的二进制代码合并到 JVM 的运行状态之中 \",\"验证：确保加载的类信息符合 JVM 规范，没有安全方面的问题\",\"准备：正式成为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区进行分配\",\"解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程\",\"初始化： \",\"执行类构造器 <clinit>() 方法的过程。类构造器 <clinit>() 方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的（类构造器是构造类的信息的，不是构造该类对象的构造器）\",\"当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先出发其父类的初始化\",\"虚拟机会保证一个类的 <clinit>>() 方法在多线程环境中被正确加锁和同步\",\"下面给出示例代码：\",\"public class Test { public static void main(String[] args) { A a = new A(); System.out.println(A.m); // 100 } } class A { static { System.out.println(\\\"A 类的静态代码块初始化\\\"); m = 300; } static int m = 100; public A() { System.out.println(\\\"A 类的无参构造初始化\\\"); } } \",\"结果是：\",\"A 类的静态代码块初始化 A 类的无参构造初始化 100 \",\"过程：\",\"加载到内存，产生一个类对应的 Class 对象\",\"链接，结束后 m = 0\",\"初始化方法\",\"<clinit>() { System.out.println(\\\"A类的静态代码块初始化\\\"); m = 300; m = 100; } \"]},\"24\":{\"h\":\"2.4 分析类的初始化\",\"t\":[\"什么时候会发生类的初始化？\",\"类的主动引用时，一定会发生类的初始化 \",\"当虚拟机启动，先初始化 main() 方法所在的类\",\"new 一个类的对象\",\"调用类的静态成员（除了 final 常量）和静态方法\",\"使用 java.lang.reflect 包方法对类进行反射调用\",\"当初始化一个类，如果父类没有被初始化，则会先初始化它的父类\",\"类的被动引用，不会 发生类的初始化 \",\"当访问一个静态域时，只有真正声明这个域的类才会被初始化，例如：当通过子类引用父类的静态变量，不会导致子类初始化\",\"通过数组定义类的引用，不会出发此类的初始化\",\"引用常量不会触发此类的初始化，因为常量在链接阶段就存入调用库的常量池中了\",\"下面是示例代码：\",\"public class Test { static { System.out.println(\\\"Test类被加载\\\"); } public static void main(String[] args) throws ClassNotFoundException { Son son = new Son(); Class.forName(\\\"top.alexsun.Son\\\"); } } class Father { static int b = 2; static { System.out.println(\\\"父类内加载\\\"); } } class Son extends Father { static { System.out.println(\\\"子类被加载\\\"); m = 300; } static int m = 100; static final int M = 1; } \",\"几个现象可以通过上面的原理解释：\",\"调用 Son.b 不会加载 Son 类\",\"Son[] array = new Son[5]; 不会加载任何类\",\"调用 Son.M 不会加载任何类\"]},\"25\":{\"h\":\"2.5 类加载器\",\"t\":[\"类加载器的作用：\",\"类加载的作用：将 .class 字节码文件的内容加载的内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的 java.lang.Class 对象，作为方法区中的类数据的访问入口\",\"类缓存：标准的 JavaSE 类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间，JVM 垃圾回收机制可以回收这些 Class 对象\",\"执行过程：\",\"源程序 .java 文件通过 Java 编译器生成 .class 字节码文件\",\"类装载器装载字节码文件\",\"字节码校验器验证字节码\",\"解释器解释字节码内容到操作系统上\",\"类加载器的作用是把类装载进内存，JVM 规范定义了如下类型的加载器：\",\"引导类加载器：用 C++ 编写的，是 JVM 自带的类加载器，负责 Java 平台核心库，用来装载核心类库，该加载器无法直接获取\",\"扩展类加载器：负责 jre/lib/ext 目录下的 .jar 包或者 -D java.ext.dirs 指定目录下的 .jar 包装入工作库\",\"系统类加载器：负责 java -classpath 或 -D java.class.path 所指定的目录下的类与 .jar 包装入工作，是最常用的类加载器\",\"它们的顺序是：\",\"引导类加载器（Bootstrap ClassLoader）\",\"扩展类加载器（Extension ClassLoader）\",\"系统类加载器（System ClassLoader）\",\"自定义类加载器\",\"行为：\",\"自底向上检查类是否已经被装载\",\"自顶向下尝试加载类\",\"public class Test { public static void main(String[] args) { // 获取系统类的加载器 ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader(); System.out.println(systemClassLoader); // 获取系统加载器的父类加载器：扩展加载器 ClassLoader parent = systemClassLoader.getParent(); System.out.println(parent); // 获取扩展加载器的父类加载器：引导加载器（根加载器） ClassLoader root = parent.getParent(); System.out.println(root); } } \",\"输出结果：\",\"sun.misc.Launcher$AppClassLoader@18b4aac2 sun.misc.Launcher$ExtClassLoader@4554617c null \",\"我们可以看到，系统加载器是无法获取的。我们也可以测试一个类是由哪个加载器加载的：\",\"public class Test { public static void main(String[] args) throws ClassNotFoundException { ClassLoader classLoader = Class.forName(\\\"top.alexsun.Test\\\").getClassLoader(); System.out.println(classLoader); // 获取系统可以加载的类的路径 System.out.println(System.getProperty(\\\"java.class.path\\\")); } } \",\"什么是双亲委派机制\",\"Java 的双亲委派机制：当某个类加载器需要加载某个 .class 文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类。\",\"java.lang.ClassLoader.loadClass() 方法：\",\"Class<?> c = findLoadedClass(name);，首先判断该类是否已经被加载\",\"如果没有，判断父类是否为空 \",\"非空则调用 parent.loadClass(name, false);\",\"为空则调用 c = findBootstrapClassOrNull(name);\",\"如果父类或启动类加载器不能加载，即判断：c == null 为空时调用 c = findClass(name); 由当前类加载器进行加载，加载失败则抛出异常\"]},\"26\":{\"h\":\"2.6 获取类的运行时结构\",\"t\":[\"获得类的名字和类的属性：\",\"public class Test { public static void main(String[] args) throws ClassNotFoundException { Class c1 = Class.forName(\\\"top.alexsun.User\\\"); // 获得包名 + 类名 System.out.println(c1.getName()); // 获得类名 System.out.println(c1.getSimpleName()); // 获得类的 public 属性 Field[] fields = c1.getFields(); // 获得类的全部属性 fields = getDeclaredFields(); for (Field field : fields) { System.out.println(field); } } } \",\"也可以给定名称获得属性或者方法：\",\"public class Test { public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException { Class c1 = Class.forName(\\\"top.alexsun.User\\\"); // 获取给定名称的属性 Field name = c1.getDeclaredField(\\\"name\\\"); System.out.println(name); // 获取方法 Method[] methods = c1.getDeclaredMethods(); for (Method method : methods) { System.out.println(method); } } } \",\"同理，c1.getMethod() 方法也可以获得指定名称的类，不过需要给定重载参数类型（如果没有参数需要传入 null）。\",\"下面是获得构造器的方法，结构基本一致：\",\"Constructor[] constructors = c1.getDeclaredConstructors(); for (Constructor constructor : constructors) { System.out.println(constructor); } Constructor constructor = c1.getDeclaredConstructor(String.class, int.class, int.class); \",\"总结：\",\"在实际操作中，获得类的信息的操作代码，并不会经常开发\",\"一定要熟悉 java.lang.reflect 包的作用，反射机制\",\"如何取得属性、方法、构造器名称、修饰符等\"]},\"27\":{\"h\":\"2.7 动态创建对象执行方法\",\"t\":[\"通过反射创建对象，可以使用 c.newInstance() 方法，但必须满足：\",\"类必须有一个无参构造器\",\"类的构造器的访问权限需要足够\",\"如果类没有无参构造器，那么可以通过下面的方法获得构造器：\",\"通过 Class 类的 getDeclaredConstructor(Class... parameterTypes) 取得本类的指定形参类型的构造器\",\"向构造器的形参中传递一个对象数组进去，里面包含了构造器所需的各个参数\",\"通过 Constructor 实例化对象\",\"Class c1 = Class.forName(\\\"top.alexsun.User\\\"); User user = (User)c1.newInstance(); Constructor constructor = c1.getDeclaredConstructor(String.class, int.class, int.class); User user2 = (User)constructor.newInstance(\\\"Alex\\\", 1, 19); \",\"通过反射也可以调用一个普通方法：\",\"Class c1 = Class.forName(\\\"top.alexsun.User\\\"); User user = (User)c1.newInstance(); Method setName = c1.getDeclaredMethod(\\\"setName\\\", String.class); setName.invoke(user, \\\"Bob\\\"); System.out.println(user.getName()); \",\"通过反射直接操作属性：\",\"Class c1 = Class.forName(\\\"top.alexsun.User\\\"); User user = (User)c1.newInstance(); Field name = c1.getDeclaredField(\\\"name\\\"); name.setAccessible(true); name.set(user, \\\"Tom\\\"); System.out.println(user.getName()); \",\"其中 name.setAccessible(true); 用于关闭权限检查。\",\"总结：调用指定方法：\",\"方法原型：\",\"Object method.invoke(Object obj, Object... args); \",\"Object 对应原方法的返回值，若没有返回值返回 null\",\"若原方法为静态方法，obj 可以传 null\",\"若原方法没有参数，可以传 null\",\"若原方法为 private，在调用 invoke() 方法之前需要关闭权限检查\",\"setAccessible() 方法：\",\"Method、Field、Constructor 对象都有 setAccessible() 方法\",\"setAccessible() 方法的作用是启用和禁用访问安全检查\",\"setAccessible(true) 为关闭安全检查\",\"关闭安全检查的作用 \",\"使得原本私有的属性和方法也可以被访问\",\"提供反射的执行效率\"]},\"28\":{\"h\":\"2.8 性能对比分析\",\"t\":[\"我们下面对比几种方法的执行效率。\",\"public class Test { // 普通方式调用 public static void test01() { User user = new User(); long startTime = System.currentTimeMillis(); for (int i = 0; i < 1000000000; i++) { user.getName(); } long endTime = System.currentTimeMillis(); System.out.println(\\\"花费时间: \\\" + (endTime - startTime) + \\\"ms\\\"); } // 反射方式调用 public static void test02() { User user = new User(); Class c = user.getClass(); Method getName = c1.getDeclaredMethod(\\\"getName\\\", null); long startTime = System.currentTimeMillis(); for (int i = 0; i < 1000000000; i++) { getName.invoke(user, null); } long endTime = System.currentTimeMillis(); System.out.println(\\\"花费时间: \\\" + (endTime - startTime) + \\\"ms\\\"); } // 反射方式调用：关闭检测 public static void test03() { User user = new User(); Class c = user.getClass(); Method getName = c1.getDeclaredMethod(\\\"getName\\\", null); long startTime = System.currentTimeMillis(); getName.setAccessible(true); for (int i = 0; i < 1000000000; i++) { getName.invoke(user, null); } long endTime = System.currentTimeMillis(); System.out.println(\\\"花费时间: \\\" + (endTime - startTime) + \\\"ms\\\"); } public static void main(String[] args) { test01(); test02(); test03(); } } \",\"输出：\",\"花费时间: 9ms 花费时间: 5699ms 花费时间: 1959ms \"]},\"29\":{\"h\":\"2.9 获取泛型信息\",\"t\":[\"反射操作泛型：\",\"Java 采用泛型擦除机制来引入泛型，Java 中的泛型仅仅是给编译器 javac 使用的，确保数据的安全性和免去强制类型转换问题，但是一旦编译完成，所有和泛型有关的类型全部擦除\",\"为了通过反射操作这些类型，Java 新增了 ParameterizedType、GenericArrayType、TypeVariable 和 WildcardType 几种类型来代表不能被归一到 Class 类中的类型但是又和原始类型齐名的类型 \",\"ParameterizedType：表示一种参数化类型，比如 Collection<String>\",\"GenericArrayType：表示一种元素类型是参数化类型或者类型变量的数组类型\",\"TypeVariable：是各种类型变量的公共父接口\",\"WildcardType：代表一种通配符类型表达式\",\"public class Test { public void test01(Map<String, User> map, List<User> list) { System.out.println(\\\"test01\\\"); } public Map<String, User> test02() { System.out.println(\\\"test02\\\"); return null; } public static void main(String[] args) throws NoSuchMethodException { Method method = Test.class.getMethod(\\\"test01\\\", Map.class, List.class); Type[] genericParameterTypes = method.getGenericParameterTypes(); for (Type genericParameterType: genericParameterTypes) { System.out.println(\\\"# \\\" + genericParameterType); if (genericParameterType instanceof ParameterizedType) { Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments(); for (Type actualTypeArgument : actualTypeArguments) { System.out.println(actualTypeArgument); } } } System.out.println('----------------------------'); method = Test.class.getMethod(\\\"test02\\\", null); Type genericReturnType = method.getGenericReturnType(); if (genericReturnType instanceof ParameterizedType) { Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments(); for (Type actualTypeArgument : actualTypeArguments) { System.out.println(actualTypeArgument); } } } } \",\"输出结果：\",\"## java.util.Map<java.lang.String, top.alexsun.User> class java.lang.String class top.alexsun.User ## java.util.List<top.alexsun.User> class top.alexsun.User ---------------------------- class java.lang.String class top.alexsun.User \"]},\"30\":{\"h\":\"2.10 获取注解信息\",\"t\":[\"本章将通过一个练习：实现 ORM，来讲解如何获取注解信息。\",\"ORM 即 对象映射关系（Object Relationship Mapping，ORM），例如：\",\"class Student { int id; String name; int age; } \",\"上面的代码和下面的表结构相对应：\",\"id\",\"name\",\"age\",\"001\",\"Alex\",\"13\",\"002\",\"鸭梨\",\"19\",\"类和表结构对应\",\"属性和字段对应\",\"对象和记录对应\",\"下面利用注解和反射完成类和表结构的映射关系。\",\"下面是我们被注解的类：\",\"public class Test { public static void main(String[] args) throws ClassNotFoundException { Class c1 = Class.forName(\\\"top.alexsun.Student\\\"); Annotation[] annotations = c1.getAnnotations(); for (Annotation annotation: annotations) { System.out.println(annotation); } // '@top.alexsun.MyTable(value = \\\"db_student\\\")' MyTable table = (MyTable)c1.getAnnotation(MyTable.class); String value = table.value(); System.out.println(value); // \\\"db_student\\\" Field field = c1.getDeclaredField(\\\"name\\\"); MyField annotation = field.getAnnotation(MyField.class); System.out.println(annotation.columnName()); // \\\"db_name\\\" System.out.println(annotation.type()); // \\\"varchar\\\" System.out.println(annotation.length()); // 3 } } @MyTable(\\\"db_student\\\") public class Student { @MyField(columnName = \\\"db_id\\\", type = \\\"int\\\", length = 10) private int id; @MyField(columnName = \\\"db_age\\\", type = \\\"int\\\", length = 10) private int age; @MyField(columnName = \\\"db_name\\\", type = \\\"varchar\\\", length = 3) private String name; public Student() { } public Student(int id, String name, int score) { this.id = id; this.name = name; this.score = score; } public int getId() { return id; } public int getAge() { return age; } public String getName() { return name; } public void setId(int id) { this.id = id; } public void setAge(int age) { this.age = age; } public void setName(String name) { this.name = name; } @Override public String toString() { return \\\"Student(id=\\\" + id + \\\", age=\\\" + age + \\\", name='\\\" + name + \\\"')\\\"; } } @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @interface MyTable { String value(); } @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) @interface MyField { String columnName(); String type(); int length(); } \"]},\"31\":{\"h\":\"Java 教程\"},\"32\":{\"h\":\"单例模式\"},\"33\":{\"h\":\"1. 懒汉模式\",\"t\":[\"public class LazySingletonTest { public static void main(String[] args) { new Thread(() -> { LazySingleton instance = LazySingleton.getInstance(); System.out.println(instance); }).start(); new Thread(() -> { LazySingleton instance = LazySingleton.getInstance(); System.out.println(instance); }).start(); } } class LazySingleton { private volatile static LazySingleton instance; private LazySingleton() { } public static LazySingleton getInstance() { if (instance == null) { synchronized(LazySingleton.class) { if (instance == null) { instance = new LazySingleton(); } } } return instance; } } \"]},\"34\":{\"h\":\"2. 饿汉模式\",\"t\":[\"public class HungrySingletonTest { public static void main(String[] args) { HungrySingleton instence1 = HungrySingleton.getInstance(); HungrySingleton instence2 = HungrySingleton.getInstance(); System.out.println(instence1 == instence2); } } class HungrySingleton { private static HungrySingleton instence = new HungrySingleton(); private HungrySingleton() { } public static HungrySingleton getInstance() { return instence; } } \"]},\"35\":{\"h\":\"3. 内部类实现\",\"t\":[\"import java.lang.reflect.Constructor; import java.lang.reflect.InvocationTargetException; public class InnerClassSingletonTest { public static void main(String[] args) { InnerClassSingleton instance1 = InnerClassSingleton.getInstance(); InnerClassSingleton instance2 = InnerClassSingleton.getInstance(); System.out.println(instance1 == instance2); try { Constructor<InnerClassSingleton> declaredConstructor = InnerClassSingleton.class.getDeclaredConstructor(); declaredConstructor.setAccessible(true); InnerClassSingleton instance3 = declaredConstructor.newInstance(); System.out.println(instance1 == instance3); System.out.println(instance2 == instance3); } catch (InvocationTargetException e) { System.out.println(e); Throwable t = e.getTargetException(); t.printStackTrace(); } catch (Exception err) { System.out.println(err); } } } class InnerClassSingleton { private static class InnerClassHolder { private static InnerClassSingleton instance = new InnerClassSingleton(); } private InnerClassSingleton() { if (InnerClassHolder.instance != null) { throw new RuntimeException(\\\"Singleton can't new too much instances.\\\"); } } public static InnerClassSingleton getInstance() { return InnerClassHolder.instance; } } \"]},\"36\":{\"h\":\"4. 枚举实现\",\"t\":[\"import java.lang.reflect.Constructor; import java.lang.reflect.InvocationTargetException; class EnumSingletonTest { public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException { EnumSingleton instance1 = EnumSingleton.INSTANCE; EnumSingleton instance2 = EnumSingleton.INSTANCE; System.out.println(instance1 == instance2); Constructor<EnumSingleton> declaredConstructor = EnumSingleton.class.getDeclaredConstructor(); declaredConstructor.setAccessible(true); declaredConstructor.newInstance(\\\"INSTENCE\\\", 0); } } enum EnumSingleton { INSTANCE; public void print() { System.out.println(this.hashCode()); } } \"]},\"37\":{\"h\":\"1. Kotlin 教程\"},\"38\":{\"h\":\"1.1 Kotalin 简介\",\"t\":[\"Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，被称之为 Android 世界的 Swift，由 JetBrains 设计开发并开源。\",\"Kotlin 可以编译成 Java 字节码，也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。\",\"在 Google I/O 2017 中，Google 宣布 Kotlin 成为 Android 官方开发语言。\",\"为什么选择 Kotlin？\",\"简洁: 大大减少样板代码的数量\",\"安全: 避免空指针异常等整个类的错误\",\"互操作性: 充分利用 JVM、Android 和浏览器的现有库。\",\"工具友好: 可用任何 Java IDE 或者使用命令行构建\",\"提示\",\"Kotlin 语言官网\",\"Kotlin 文档\",\"Kotlin 中文文档\",\"Kotlin 在线运行工具\"]},\"39\":{\"h\":\"1.2 开发环境\",\"t\":[\"推荐使用 IntelliJ IDEA 开发 Kotlin 程序，如果您在开发安卓也可以直接使用 Android Studio。\",\"创建项目流程：\",\"创建项目，选择 Java 项目，模板选择 Kotlin (Java) 即可\",\"任意名称保存创建即可，主意要选择正确的 JDK 版本\",\"等待 Sync 结束即可运行 Hello World\"]},\"40\":{\"h\":\"1.3 Hello Kotlin\",\"t\":[\"和 Java 不同的是，Kotlin 允许顶级的函数，因此 main() 函数可以这样写：\",\"package hello // 可选的包头 fun main(args: Array<String>) { // 包级可见的函数，接受一个字符串数组作为参数 println(\\\"Hello World!\\\") // 分号可以省略 } \",\"如果您习惯面向对象，可以这样：\",\"class Greeter(val name: String) { fun greet() { println(\\\"Hello, $name\\\") } } fun main(args: Array<String>) { Greeter(\\\"World!\\\").greet() // 创建一个对象不用 new 关键字 } \"]},\"41\":{\"h\":\"1.4 命令行运行\",\"t\":[\"在 Linux 上，可以用下面的命令安装 Kotlin 工具：\",\"curl -s https://get.sdkman.io | bash sdk install kotlin \",\"编译应用：\",\"kotlinc hello.kt -include-runtime -d hello.jar \",\"参数说明：\",\"-d：用来设置编译输出的名称，可以是 .class 或 .jar 文件，也可以是目录\",\"-include-runtime：让 .jar 文件包含 Kotlin 运行库，从而可以直接运行\",\"如果不包含 Kotlin 运行库，需要运行时在你的 classpath 上。\",\"或者也可以使用 Kotlin 工具执行：\",\"kotlin -classpath hello.jar HelloKt \"]},\"42\":{\"h\":\"1.5 脚本模式\",\"t\":[\"可以使用交互式解释器来执行：\",\"bin/kotlinc-jvm \",\"也可以作为脚本执行：\",\"import java.io.File val folders = File(args[0]).listFiles { file -> file.isDirectory() } folders?.forEach { folder -> println(folder) } \",\"注意脚本文件后缀为 .kts，需要使用 -script 参数，执行命令：\",\"kotlinc -script list_folders.kts $PATH_TO_FOLDER\\n\"]},\"43\":{\"h\":\"2. Kotlin 语法概述\"},\"44\":{\"h\":\"2.1 基本语法\",\"t\":[\"Kotlin 文件以 .kt 为后缀。\",\"和 Java 一样，package 用于包声明，不过是可选的，默认为 default。\",\"下面的包都会默认导入：\",\"kotlin.*\",\"kotlin.annotation.*\",\"kotlin.collections.*\",\"kotlin.comparisons.*\",\"kotlin.io.*\",\"kotlin.ranges.*\",\"kotlin.sequences.*\",\"kotlin.text.*\",\"使用 var 定义变量，使用 val 定义常量，Kotlin 支持声明时自动推导类型：\",\"val a: Int = 1 val b = 1 // 系统自动推断变量类型为 Int val c: Int // 如果不在声明时初始化则必须提供变量类型 c = 1 // 明确赋值 var x = 5 // 系统自动推断变量类型为Int x += 1 // 变量可修改 \",\"和类 C 语言一样，注释可以有单行注释（// ...）和多行的注释（/* ... */）。\",\"类似于 C#，Kotlin 支持可空类型：\",\"var age: String? = \\\"23\\\" \",\"和 JavaScript 一样，如果需要对象为空时保留空，则加上 ?，例如：\",\"val ages2 = age?.toInt() \",\"如果需要断言为非空则使用 !!，这样为空时将抛出空指针异常。\",\"类似于 Python，Kotlin 使用 is 判断对象是对象的实例，相当于 Java 的关键字 instanceof，但是不是对象的实例也可以表示为 !is。\",\"Kotlin 支持 Any 类型，表示任何类型。\"]},\"45\":{\"h\":\"2.2 数据类型\",\"t\":[\"下面是基本类型：\",\"类型\",\"位宽度\",\"Double\",\"64\",\"Float\",\"32\",\"Long\",\"64\",\"Int\",\"32\",\"Short\",\"16\",\"Byte\",\"8\",\"Float 类型使用 f 或者 F 作为后缀：123.5f\",\"不支持八进制字面值，0x 和 0b 可以表示十六进制和二进制\",\"大写 L 结尾为长整型\",\"类型转换：较小类型并不是较大类型的子类型，较小的类型不能隐式转换为较大的类型。这意味着在不进行显式转换的情况下我们不能把 Byte 型值赋给一个 Int 变量。\",\"可以使用 byte.toInt() 来转换。每种基本类型都可以转换：\",\"toByte(): Byte toShort(): Short toInt(): Int toLong(): Long toFloat(): Float toDouble(): Double toChar(): Char \",\"Kotlin 会自动根据上下文推断类型，默认情况下不损失精度。\",\"类似于 JavaScript，在 Kotlin 中，三个等号 === 表示比较对象地址是否相等，两个 == 表示比较对象的值是否相等。\",\"Kotlin 的位运算符也和 Java 不同：\",\"运算符\",\"说明\",\"对应 Java 的运算符\",\"shl\",\"左移\",\"<<\",\"shr\",\"右移\",\">>\",\"ushr\",\"无符号右移\",\">>>\",\"and\",\"与\",\"&\",\"or\",\"或\",\"|\",\"xor\",\"异或\",\"^\",\"inv\",\"翻转\",\"~\",\"支持布尔运算符 &&、|| 和 !。\",\"和 Java 不一样，Kotlin 中的 Char 不能直接和数字操作，Char 必需是单引号 ' 包含起来的。比如普通字符 '0'，'a'。\",\"数组用类 Array 实现，并且还有一个 size 属性及 get 和 set 方法，由于使用 [] 重载了 get 和 set 方法，所以我们可以通过下标很方便的获取或者设置数组对应位置的值。\",\"数组的创建两种方式：一种是使用函数 arrayOf()，另外一种是使用工厂函数：\",\"fun main(args: Array<String>) { // [1, 2, 3] val a = arrayOf(1, 2, 3) // [0, 2, 4] val b = Array(3, { i -> (i * 2) }) // 读取数组内容 println(a[0]) // 输出结果: 1 println(b[1]) // 输出结果: 2 } \",\"Array 工厂函数支持直接加上 Lambda 函数，这也是推荐的写法：\",\"val b = Array(3) { i -> (i * 2) } \",\"类似于 Python，字符串可以使用 [] 获取指定位置的字符，另外字符串是可迭代的：\",\"for (c in str) { println(c) } \",\"和 Python 一样，字符串支持使用三个双引号来表示多行字符串 \\\"\\\"\\\"。\",\"字符串有 .trimMargin() 方法用于删除两边空白，类似于 Java 的 .trim() 方法。但是 .trimMargin() 默认以 | 作为边界前缀：\",\"fun main(args: Array<String>) { val text = \\\"\\\"\\\" |多行字符串 |我是多行字符串 |多行字符串 |Alex \\\"\\\"\\\".trimMargin() println(text) // 前置空格删除了 } \",\"这也可以指定。比如 trimMargin(\\\">\\\")。\",\"类似于 JavaScript，字符串天生支持模板，例如：\",\"fun main(args: Array<String>) { val s = \\\"Alex\\\" val str = \\\"$s.length is ${s.length}\\\" // 输出 \\\"Alex.length is 4\\\" println(str) } \",\"多数特殊字符支持 \\\\ 转义，但是 $，不支持，如果需要表示 $ 则需要这样 \\\"${'$'}\\\"。\"]},\"46\":{\"h\":\"2.3 函数语法\",\"t\":[\"fun sum(a: Int, b: Int): Int { // Int 参数，返回值 Int return a + b } \",\"表达式作为函数体：\",\"public fun sum(a: Int, b: Int): Int = a + b \",\"类型推断支持不写返回值类型，但是 public 修饰的函数必须写。\",\"空类型为 Unit，如果返回值为空可以省略。\",\"函数的参数可以是可变长的：\",\"fun vars(vararg v: Int) { for (vt in v) { print(vt) } } fun main(args: Array<String>) { vars(1, 2, 3, 4, 5) // 输出 12345 } \"]},\"47\":{\"h\":\"2.4 条件语句\",\"t\":[\"If 语句：\",\"var max = a if (a < b) max = b // 使用 else var max: Int if (a > b) { max = a } else { max = b } \",\"可以把 If 语句返回的值赋值给变量：\",\"val max = if (a > b) { print(\\\"Choose a\\\") a } else { print(\\\"Choose b\\\") b } \",\"Kotlin 支持区间表达式 a..b，类似于 Python / Go 的 range：\",\"fun main(args: Array<String>) { val x = 5 val y = 9 if (x in 1..8) { println(\\\"x 在区间内\\\") } } \",\"Kotlin 的 When 表达式类似于类 C 语言的 switch，使用 else 表示其他情况：\",\"when (x) { 1 -> print(\\\"x == 1\\\") 2 -> print(\\\"x == 2\\\") else -> { print(\\\"x 不是 1 ，也不是 2\\\") } } \",\"更复杂的示例：\",\"fun main(args: Array<String>) { var x = 0 when (x) { 0, 1 -> println(\\\"x == 0 or x == 1\\\") else -> println(\\\"otherwise\\\") } when (x) { 1 -> println(\\\"x == 1\\\") 2 -> println(\\\"x == 2\\\") else -> { println(\\\"x 不是 1 ，也不是 2\\\") } } when (x) { in 0..10 -> println(\\\"x 在该区间范围内\\\") else -> println(\\\"x 不在该区间范围内\\\") } } \",\"When 甚至可以这样写，用来代替大量的 if...else...：\",\"fun main(args: Array<String>) { val items = setOf(\\\"apple\\\", \\\"banana\\\", \\\"kiwi\\\") when { \\\"orange\\\" in items -> println(\\\"juicy\\\") \\\"apple\\\" in items -> println(\\\"apple is fine too\\\") } } \"]},\"48\":{\"h\":\"2.5 循环语句\",\"t\":[\"类似于 Python / Go，For 语句可以遍历任何迭代器和其他可迭代类型：\",\"for (item: Int in int_array) { // ... } \",\"如果你想要通过索引遍历一个数组或者一个 list，你可以这么做：\",\"for (i in array.indices) { print(array[i]) } \",\"类似于 Python 的 enumerate，Kotlin 的 For 也具有类似功能：\",\"for ((index, value) in array.withIndex()) { println(\\\"the element at $index is $value\\\") } \",\"例子：\",\"fun main(args: Array<String>) { val items = listOf(\\\"apple\\\", \\\"banana\\\", \\\"kiwi\\\") for (item in items) { println(item) } for (index in items.indices) { println(\\\"item at $index is ${items[index]}\\\") } } \",\"或者增加步长，反向循环：\",\"fun main(args: Array<String>) { for (i in 1..4 step 2) print(i) // 打印结果为: \\\"13\\\" println() for (i in 4 downTo 1 step 2) print(i) // 打印结果为: \\\"42\\\" } \",\"如果不包含最后一个可以：\",\"fun main(args: Array<String>) { for (i in 1 until 10) { // i in [1, 10), 不包含 10 print(i) } } \",\"Kotlin 支持 while() { } 和 do { } while()。也支持 break 和 continue 控制循环。\",\"如果在 Lambda 函数中使用 return 则会返回上层函数，如果只返回 Lambda 函数可以返回到标签：\",\"fun main(args: Array<String>) { foo() } fun foo() { val ints = arrayListOf(1, 2, 3, 0, 7, 8) ints.forEach lit@ { if (it == 0) return@lit print(it) } println() println(\\\"still running\\\") } \",\"或者使用带 fun 的匿名函数：\",\"fun foo() { ints.forEach(fun(value: Int) { if (value == 0) return print(value) }) } \",\"如果有多个 return，当要返一个回值的时候，解析器优先选用标签限制的 return，即\",\"return@a 1\\n\"]},\"49\":{\"h\":\"3. Kotlin 面向对象\"},\"50\":{\"h\":\"3.1 类\",\"t\":[\"Kotlin 类可以包含：构造函数和初始化代码块、函数、属性、内部类、对象声明。\",\"class Apple { // ... } \",\"也可以定义空类：\",\"class Empty \",\"类的属性可以用关键字 var 声明为可变的，否则使用只读关键字 val 声明为不可变。\",\"class Runoob { var name: String = \\\"alex\\\" var url: String = \\\"https://example.com/\\\" var city: String = \\\"Jiangsu\\\" } \",\"创建类的实例不需要 new 关键字：\",\"val site = Apple() \",\"Kotlin 中的类可以有一个 主构造器，以及一个或多个 次构造器，主构造器是类头部的一部分，位于类名称之后:\",\"class Person constructor(firstName: String) {} \",\"如果主构造器没有任何注解，也没有任何可见度修饰符，那么 constructor 关键字可以省略：\",\"class Person(firstName: String) { } \"]},\"51\":{\"h\":\"3.2 属性\",\"t\":[\"属性支持 getter/setter：\",\"var <propertyName>[: <PropertyType>] [= <property_initializer>] [<getter>] [<setter>] \",\"getter 和 setter 都是可选的：\",\"var allByDefault: Int? // 错误：需要一个初始化语句，默认实现了 getter 和 setter 方法 var initialized = 1 // 类型为 Int，默认实现了 getter 和 setter val simple: Int? // 类型为 Int，默认实现 getter，但必须在构造函数中初始化 val inferredType = 1 // 类型为 Int，默认实现 getter \"]},\"52\":{\"h\":\"3.3 继承\",\"t\":[\"Kotlin 中所有类都继承该 Any 类，它是所有类的超类，对于没有超类型声明的类是默认超类：\",\"class Example // 从 Any 隐式继承 \",\"Any 默认提供了三个方法：\",\"equals()\",\"hashCode()\",\"toString()\",\"如果一个类要被继承，可以使用 open 关键字进行修饰：\",\"open class Base(p: Int) class Derived(p: Int) : Base(p) \"]},\"53\":{\"h\":\"3.4 接口\",\"t\":[\"Kotlin 接口与 Java 类似，使用 interface 关键字定义接口，允许方法有默认实现：\",\"interface MyInterface { fun bar() fun foo() { println(\\\"foo\\\") } } \",\"接口中的属性只能是抽象的，不允许初始化值，接口不会保存属性值，实现接口时，必须重写属性：\",\"interface MyInterface { var name: String // 抽象属性 name } class MyImpl: MyInterface { override var name: String = \\\"alex\\\" // 重写属性 } \"]},\"54\":{\"h\":\"3.5 扩展\",\"t\":[\"Kotlin 可以对一个类的属性和方法进行扩展，且不需要继承或使用 Decorator 模式。扩展是一种静态行为，对被扩展的类代码本身不会造成任何影响。\",\"扩展函数语法：\",\"fun receiverType.functionName(params) {\\n    body\\n}\\n\"]},\"55\":{\"h\":\"Docker 中使用 Canal\"},\"56\":{\"h\":\"1. MySQL 配置\",\"t\":[\"检查是否开启了 binlog：\",\"SHOW VARIABLES LIKE 'log_bin'; \",\"添加如下配置到 my.cnf 文件中：\",\"[mysqld] server_id=1 log_bin = mysql-bin binlog_format = ROW \",\"重启 MySQL，此时 MySQL 已经开启了 binlog。\"]},\"57\":{\"h\":\"2. Canal 配置\",\"t\":[\"启动 Canal Server：\",\"docker run -d \\\\ -p 11111:11111 \\\\ --name canal-server \\\\ -e canal.auto.scan = true \\\\ -e canal.destinations = example \\\\ -e canal.instance.master.address = \\\\ -e canal.instance.dbUsername = root \\\\ -e canal.instance.dbPassword = 123456 \\\\ -e canal.instance.connectionCharset = UTF-8 \\\\ -e canal.instance.tsdb.enable = true \\\\ -e canal.instance.gtidon = false \\\\ -e canal.instance.auto.scan = true \\\\ -e canal.instance.auto.scan.interval = 5 \\\\ -e canal.instance.filter.regex = .*\\\\\\\\..* \\\\ -e canal.instance.filter.black.regex = (mysql\\\\\\\\.slave_.*|.*\\\\\\\\_bak) \\\\ -e canal.instance.tsdb.url = jdbc:mysql:// \\\\ -e canal.instance.tsdb.dbUsername = canal canal/canal-server:v1.1.7 \",\"容器内的 /home/admin/canal-server/conf/example/instance.properties 文件即为示例文件。\"]},\"58\":{\"h\":\"Docker\"},\"59\":{\"h\":\"使用 Docker 部署 Nginx\"},\"60\":{\"h\":\"1. 常见标签\",\"t\":[\"标签\",\"容器环境\",\"latest\",\"最新版本\",\"mainline*\",\"主线版本\",\"stable*\",\"稳定版本\",\"*alpine*\",\"Alpine\",\"*bullseye*\",\"Debian 11\",\"*bullseye-perl\",\"Debian 11 + Perl\",\"*alpine*-perl\",\"Alpine + Perl\",\"*alpine*-slim\",\"Alpine 最小版本\",\"如果不需要任何插件或扩展，而只使用配置文件部署 Nginx，可以直接使用 nginx:stable-alpine-slim 系列镜像，这些是体积最小的镜像，通常不含有其他依赖。\"]},\"61\":{\"h\":\"2. 示例\",\"t\":[\"拉取镜像：\",\"docker pull nginx:1.25.3-alpine3.18-slim \",\"示例 Dockerfile 文件：\",\"FROM nginx:1.25.3-alpine3.18-slim\\n\\nWORKDIR /usr/share/nginx/html/docs/\\n\\nCOPY $PWD/dist/ ./\\n\\nEXPOSE 80\\n\\nCMD [\\\"nginx\\\", \\\"-g\\\", \\\"daemon off;\\\"]\\n\"]},\"62\":{\"h\":\"FRP 使用指南\"},\"63\":{\"h\":\"1. FRP 简介\",\"t\":[\"FRP 是一个由 Go 编写的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等协议。它可以轻松地进行内网穿透，对外网提供服务。其 GitHub 仓库为 fatedier/frp。\",\"FRP 分为客户端和服务端分别称为 frpc 和 frps，客户端用于连接内网的应用程序，服务端用于提供代理服务。\",\"FRP 还提供管理界面，可以通过浏览器访问管理界面，查看代理服务的状态，可以查看每日的流量情况。\",\"大多数情况下我们只需要 TCP 代理即可，HTTP/HTTPS 代理可以支持更多功能，但是需要配置更多参数。\"]},\"64\":{\"h\":\"2. Docker 部署\",\"t\":[\"比较流行的 FRP 镜像是由 @snowdreamtech 提供的，包括 frpc 和 frps 两个镜像。\",\"拉取镜像：\",\"docker pull snowdreamtech/frpc docker pull snowdreamtech/frps \",\"配置文件内可以使用类似 {{ .Envs.NAME }} 的格式可以读取环境变量。\",\"下面的示例是将本地的 http://127.0.0.1:4090 映射到公网服务器的 http://xxx.xxx.xxx.xxx:4090。\"]},\"65\":{\"h\":\"2.1 客户端配置\",\"t\":[\"客户端 frpc 配置文件 frpc.toml：\",\"serverAddr = {{ .Envs.FRP_SERVER_ADDR }} serverPort = {{ .Envs.FRP_SERVER_PORT }} token = {{ .Envs.FRP_SERVER_TOKEN }} [app] type = \\\"tcp\\\" remotePort = 4090 localIp = {{ .Envs.APP_HOST }} localPort = 4090 \",\"Docker Compose 配置文件 docker-compose.yml：\",\"version: \\\"3\\\" services: frpc: container_name: frpc restart: always image: snowdreamtech/frpc:0.57.0 volumes: - /etc/localtime:/etc/localtime:ro - /etc/timezone:/etc/timezone:ro - ./frpc.toml:/etc/frp/frpc.toml:ro network_mode: host environment: FRP_SERVER_ADDR: xxx.xxx.xxx.xxx # 公网服务器地址 FRP_SERVER_PORT: 9870 # 服务隧道端口 FRP_SERVER_TOKEN: xxxxxx # 服务隧道密码 APP_HOST: 127.0.0.1 # 本地程序地址 logging: driver: \\\"json-file\\\" options: max-size: \\\"1m\\\" networks: host: name: host external: true \",\"此处直接使用 host 网络用于读取宿主机的应用程序，也可以使用自定义网络来通信。\",\"启动客户端：\",\"docker-compose up -d \",\"关闭客户端：\",\"docker-compose down \"]},\"66\":{\"h\":\"2.2 服务端配置\",\"t\":[\"服务端 frps 配置文件 frps.toml：\",\"bindPort = {{ .Envs.FRP_SERVER_PORT }} token = {{ .Envs.FRP_SERVER_TOKEN }} dashboardAddr = \\\"0.0.0.0\\\" dashboardPort = {{ .Envs.FRP_ADMIN_PORT }} dashboardUser = {{ .Envs.FRP_ADMIN_USER }} dashboardPwd = {{ .Envs.FRP_ADMIN_PASS }} \",\"注意下面开放的三个端口：\",\"9870：服务隧道端口，用于提供代理服务\",\"7890：管理界面\",\"4090：用于客户端连接的端口\",\"将下面的 docker-compose.yml 文件保存在不同位置。\",\"version: \\\"3\\\" services: frps: restart: always container_name: frps image: snowdreamtech/frps:0.57.0 volumes: - /etc/localtime:/etc/localtime:ro - /etc/timezone:/etc/timezone:ro - ./frps.toml:/etc/frp/frps.toml ports: - 9870:9870 - 7890:7890 - 4090:4090 environment: FRP_SERVER_PORT: 9870 # 服务隧道端口 FRP_SERVER_TOKEN: xxxxxx # 服务隧道密码 FRP_ADMIN_PORT: 7890 # 管理界面端口 FRP_ADMIN_USER: username # 管理界面用户名 FRP_ADMIN_PASS: password # 管理界面密码 networks: - frps logging: driver: \\\"json-file\\\" options: max-size: \\\"1m\\\" networks: frps: external: true \",\"启动服务端：\",\"docker network create frps\\ndocker-compose up -d\\n\"]},\"67\":{\"h\":\"FRP 反向代理\"},\"68\":{\"h\":\"FRP 获取真实 IP\"},\"69\":{\"h\":\"1. HTTP 代理\",\"t\":[\"使用 HTTP 代理时，可以通过 X-Forwarded-For 头部获取真实 IP。但是由于 HTTP 代理不够灵活，我们一般直接使用 TCP 代理。\"]},\"70\":{\"h\":\"2. TCP 代理\",\"t\":[\"FRP 支持通过 Proxy Protocol 协议来传递经过 FRP 代理的请求的真实 IP，此功能支持所有以 TCP 为底层协议的类型，不支持 UDP。[1]\",\"通过指定 proxyProtocolVersion 可以开启 Proxy Protocol，下面是配置示例：\",\"serverAddr = {{ .Envs.FRP_SERVER_ADDR }} serverPort = {{ .Envs.FRP_SERVER_PORT }} token = {{ .Envs.FRP_SERVER_TOKEN }} [app] type = \\\"tcp\\\" remotePort = 4090 localIp = {{ .Envs.APP_HOST }} localPort = 4090 proxyProtocolVersion = \\\"v2\\\" \",\"Nginx 支持 Proxy Protocol，可以通过 proxy_protocol 指令来开启。\",\"在 listen 指令中添加 proxy_protocol 参数，然后在 location 指令中添加 proxy_set_header 指令来设置 X-Real-IP 和 X-Forwarded-For 头部。\",\"http { # ... server { listen 4090 proxy_protocol; server_name www.demo.com; client_max_body_size 128m; location / { root /usr/share/nginx/html; try_files $uri $uri/ @router; index index.html index.htm; } location @router { rewrite ^.*$ /index.html last; } location ^~ /api/ { proxy_pass http://127.0.0.1:8080/; proxy_set_header Host $host; proxy_set_header X-Real-IP $proxy_protocol_addr; proxy_set_header X-Forwarded-For $proxy_protocol_addr; } } } \",\"获取用户真实 IP，FRP 文档，https://gofrp.org/zh-cn/docs/features/common/realip/↩︎\"]},\"71\":{\"h\":\"GraalVM 入门\",\"t\":[\"本文参考了 GraalVM 官方文档。\"]},\"72\":{\"h\":\"1. 安装\",\"t\":[\"首选我们需要下载并安装 GraalVM，这里选择 GraalVM 21.0.2。\",\"或者使用命令安装：\",\"sdk install java 21.0.2-graal \"]},\"73\":{\"h\":\"2. 运行示例\",\"t\":[\"克隆示例项目：\",\"git clone https://github.com/graalvm/graalvm-demos cd graalvm-demos/spring-native-image \",\"Windows 下的构建脚本：\",\"call \\\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Auxiliary\\\\Build\\\\vcvars64.bat\\\" set JAVA_HOME=D:\\\\Program\\\\graalvm-jdk-21.0.2+13.1 set PATH=%PATH%;D:\\\\Program\\\\graalvm-jdk-21.0.2+13.1\\\\bin ./mvnw native:compile -Pnative \",\"Windows 构建错误\",\"Error: On Windows, GraalVM Native Image for JDK 21 requires Visual Studio 2022 version 17.1.0 or later (C/C++ Optimizing Compiler Version 19.31 or later).\",\"需要安装 Visual Studio 2022\",\"仿照上面的命令，执行 vcvars64.bat，然后再执行构建命令\",\"Native-image building on Windows currently only supports target architecture: AMD64 (?? unsupported)\",\"将 Windows 的字符集修改为 UTF-8，然后重启系统（在 时间和语言 -> 语言和区域 -> 管理语言设置 -> 更改系统区域设置 下启用 UTF-8 即可）\",\"Linux 下的构建脚本：\",\"./mvnw native:compile -Pnative \",\"构建成功后执行：\",\"./target/benchmark-jibber \",\"测试：\",\"curl http://localhost:8080/jibber \"]},\"74\":{\"h\":\"3. 使用 Docker 部署\",\"t\":[\"使用多阶段构建，将下面的内容保存为 Dockerfile：\",\"FROM container-registry.oracle.com/graalvm/native-image:21-ol8 AS builder WORKDIR /build COPY . /build RUN ./mvnw --no-transfer-progress native:compile -Pnative FROM container-registry.oracle.com/os/oraclelinux:8-slim EXPOSE 8080 COPY --from=builder /build/target/benchmark-jibber app CMD [\\\"/app\\\"] \",\"构建镜像：\",\"docker build -t benchmark-jibber . \",\"运行容器：\",\"docker run -it --rm -p 8080:8080 benchmark-jibber \",\"再次执行测试：\",\"curl http://localhost:8080/jibber\\n\"]},\"75\":{\"h\":\"GraalVM\"},\"76\":{\"h\":\"1. Kubernetes 入门\"},\"77\":{\"h\":\"基础概念\"},\"78\":{\"h\":\"1. Node\",\"t\":[\"一个节点（Node）就是一个物理机或者虚拟机，在一个节点上我们可以运行一个或多个 Pod。\"]},\"79\":{\"h\":\"2. Pod\",\"t\":[\"Pod 是 Kubernetes 调度的最小单位。一个 Pod 是一个或多个应用容器的组合，这意味着一个 Pod 能运行多个容器。\",\"最佳实践是，一个 Pod 只运行一个容器，这样可以实现应用程序的解耦和扩展。\"]},\"80\":{\"h\":\"3. Service\",\"t\":[\"Service 可以将 Pod 组合成一个服务，这个服务可以通过 Service 的 IP 和端口访问到。\"]},\"81\":{\"h\":\"4. Ingress\",\"t\":[\"Ingress 是对外暴露服务的一种方式，它可以将外部的请求转发到集群内部的 Service 上。\"]},\"82\":{\"h\":\"5. ConfigMap\",\"t\":[\"ConfigMap 可以将配置信息以键值对的形式保存起来，然后在 Pod 中使用。\"]},\"83\":{\"h\":\"6. Secret\",\"t\":[\"Secret 可以将敏感信息以键值对的形式保存起来，然后在 Pod 中使用。\"]},\"84\":{\"h\":\"7. Volume\",\"t\":[\"Volume 可以将 Pod 中的数据持久化到磁盘上。\"]},\"85\":{\"h\":\"8. Deployment\",\"t\":[\"Deployment 可以将 Pod 进行编排，它可以实现 Pod 的滚动升级和回滚。\"]},\"86\":{\"h\":\"9. StatefulSet\",\"t\":[\"StatefulSet 可以将 Pod 进行编排，它可以实现部署有状态的 Pod。\"]},\"87\":{\"h\":\"Kubernetes 架构\",\"t\":[\"Kubernetes 有一个 Master 节点和多个 Node 节点组成。\",\"为了使 Node 能够正常对外提供服务，Node 通常还需要三个组件：kubelet、kube-proxy 和容器运行时（container runtime）。\",\"常见的容器运行时如下：\",\"Docker Engine\",\"containerd\",\"CRI-O\",\"Mirantis Container Runtime\",\"kubelet 是 Kubernetes 的一个核心组件，它运行在每个 Node 上，负责管理 Pod 和容器。它也会定期汇报 Node 的状态，并从 apiserver 中获取 Pod 的调度更新信息。\",\"k-proxy 是 Kubernetes 的一个核心组件，负责提供负载均衡和代理服务。\"]},\"88\":{\"h\":\"1. Master 节点\"},\"89\":{\"h\":\"Kubernetes\"},\"90\":{\"h\":\"Nginx\"},\"91\":{\"h\":\"MIME 类型\"},\"92\":{\"h\":\"1. 常见 MIME 类型\",\"t\":[\"可通过 MDN 查看 常见的 MIME 类型[1]。\",\"文件扩展名\",\"MIME 类型\",\"描述\",\".html / .htm\",\"text/html\",\"HTML 文档\",\".css\",\"text/css\",\"CSS 文档\",\".js\",\"text/javascript\",\"JavaScript 文档\",\".gif\",\"image/gif\",\"GIF 图片\",\".jpg / .jpeg\",\"image/jpeg\",\"JPEG 图片\",\".webp\",\"image/webp\",\"WebP 图片\",\".png\",\"image/png\",\"PNG 图片\",\".svg\",\"image/svg+xml\",\"SVG 图片\",\".tiff\",\"image/tiff\",\"TIFF 图片\",\".ico\",\"image/x-icon\",\"ICO 图标\",\".txt\",\"text/plain\",\"纯文本文档\",\".json\",\"application/json\",\"JSON 文档\",\".xml\",\"application/xml / text/xml\",\"XML 文档\",\".pdf\",\"application/pdf\",\"PDF 文档\",\".bin\",\"application/octet-stream\",\"二进制文件\",\".woff\",\"font/font-woff\",\"WOFF 字体\",\".woff2\",\"font/font-woff2\",\"WOFF2 字体\",\".ttf\",\"font/ttf\",\"TTF 字体\",\".otf\",\"font/otf\",\"OTF 字体\"]},\"93\":{\"h\":\"\",\"t\":[\"如果你的网站使用了 Nginx 默认不识别的文件类型，那么你需要在配置文件中添加对应的 MIME 类型。\",\"如果配置不正确，浏览器会可能无法正确识别文件类型：Failed to load module script: Expected a JavaScript module script but the server responded with a MIME type。\",\"大部分常用的 MIME 类型已经被默认支持，如果需要，记得引入 mime.types 文件：\",\"http { include /etc/nginx/mime.types; # ... } \",\"在 Debian/Ubuntu/Alpine 等系统中，mime.types 文件的路径为 /etc/nginx/mime.types。\",\"MDN，Common MIME types，https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types↩︎\"]},\"94\":{\"h\":\"try_files 指令\"},\"95\":{\"h\":\"实例\",\"t\":[\"尝试返回文件/文件夹，如果不存在就重定向到二级目录下的 index.html 文件，如果不存在则重定向到根目录下的 index.html 文件。\",\"server { listen 80; server_name example.com; root /path/to/your/website; location / { try_files $uri $uri/ $uri/index.html @secondary; } location @secondary { rewrite ^/([^/]+)/.*$ /$1/index.html last; try_files $uri /index.html; } } \"]},\"96\":{\"h\":\"1. 编程规约\"},\"97\":{\"h\":\"1.1 命名风格\",\"t\":[\"【强制】 所有编程相关的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。 \",\"反例：_name / __name / $Object / name_ / name$ / Object$\",\"【强制】 所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 \",\"说明： 正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。\",\"正例：ali / alibaba / taobao / kaikeba / aliyun / youku / hangzhou 等国际通用的名称，可视同英文。\",\"反例：DaZhePromotion【打折】/ getPingfenByName()【评分】 / String fw【福娃】/ int 变量名 = 3\",\"【强制】 代码和注释中都要避免使用任何人类语言中的种族歧视性或侮辱性词语。 \",\"正例：blockList / allowList / secondary\",\"反例：blackList / whiteList / slave / SB / WTF\",\"【强制】 类名使用 UpperCamelCase 风格，以下情形例外：DO / PO / DTO / BO / VO / UID 等。 \",\"正例：ForceCode / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion\",\"反例：forcecode / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion\",\"【强制】 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格。 \",\"正例：localValue / getHttpMessage() / inputUserId\",\"【强制】 常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。 \",\"正例：MAX_STOCK_COUNT / CACHE_EXPIRED_TIME\",\"反例：MAX_COUNT / EXPIRED_TIME\",\"【强制】 抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾，测试类命名以它要测试的类的名称开始，以 Test 结尾。\",\"【强制】 类型与中括号紧挨相连来定义数组。 \",\"正例： 定义整形数组 int[] arrayDemo。\",\"反例： 在 main 参数中，使用 String args[] 来定义。\",\"【强制】 POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。 \",\"说明： 本文 MySQL 规约中的建表约定第 1 条，表达是与否的变量采用 is_xxx 的命名方式，所以需要在 <resultMap> 设置从 is_xxx 到 xxx 的映射关系。\",\"反例： 定义为布尔类型 Boolean isDeleted 的字段，它的 getter 方法也是 isDeleted()，部分框架在反向解析时，“误以为” 对应的字段名称是 deleted，导致字段获取不到，得到意料之外的结果或抛出异常。\",\"【强制】 包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。 \",\"正例： 应用工具类包名为 com.alibaba.ei.kunlun.aap.util；类名为 MessageUtils（此规则参考 Spring 的框架结构）。\",\"【强制】 避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可理解性降低。\"]},\"98\":{\"h\":\"1.2 常量定义\"},\"99\":{\"h\":\"1.3 代码格式\"},\"100\":{\"h\":\"1.4 OOP 规约\"},\"101\":{\"h\":\"1.5 日期时间\"},\"102\":{\"h\":\"1.6 集合处理\"},\"103\":{\"h\":\"1.7 并发处理\"},\"104\":{\"h\":\"1.8 控制语句\"},\"105\":{\"h\":\"1.9 注释规约\"},\"106\":{\"h\":\"1.10 前后端规约\"},\"107\":{\"h\":\"1. Java 语言概述\"},\"108\":{\"h\":\"1.1 历史\",\"t\":[\"在 1972 年，C 语言就诞生了，但直到 1995 年 Java 才问世，我们先说说 C 语言的一些特点：\",\"贴近硬件，运行极快，效率极高\",\"应用于操作系统、编译器、数据库和网络系统等\",\"使用指针和手动内存管理\",\"1982 年 C++ 诞生：\",\"面向对象\",\"兼容 C 语言\",\"通用编程语言\",\"多应用于图形领域、游戏等\",\"由于 C++ 的一些特征晦涩难懂，严重依赖平台和编译器实现，因此我们迫切需要一门语言：\",\"语法像 C\",\"没有指针\",\"自动内存管理\",\"真正编写一次，到处运行\",\"面向对象\",\"类型安全\",\"拥有高质量的类库\",\"1995 年的网页简单而粗糙，Java 的 Applet 带来了生机。于是 Java 成为了那个时代最好的语言，并持续流行了 30 年：\",\"Java 2 SE：桌面\",\"Java 2 ME：移动端\",\"Java 2 EE：服务器\",\"许多基于 Java 的平台和中间件、工具：\",\"构建工具：Ant、Maven、Jekins\",\"服务器：Tomcat、Jetty、Jboss、Websphere、weblogic\",\"Web 开发：Structs、Spring、Hibernate、MyBatis\",\"开发工具：Eclipse、NetBeans、Intellij Idea、Jbuilder\",\"有一些应用服务器展示了网络开发的标准：\",\"高性能\",\"高可用\",\"高并发\",\"跨时代的作品：\",\"Hadoop，2006\",\"Android，2008\"]},\"109\":{\"h\":\"1.2 语言特性\",\"t\":[\"Java 的特性和优势：\",\"简单性\",\"面向对象\",\"可移植性\",\"高性能\",\"分布式\",\"动态性\",\"多线程\",\"安全性\",\"健壮性\"]},\"110\":{\"h\":\"1.3 发行版本\",\"t\":[\"几个概念：\",\"JDK：Java Development Kit\",\"JRE：Java Runtime Environment\",\"JVM：Java Virtual Machine\",\"Java 语言：\",\"Java 语言\",\"工具和 APIs \",\"java\",\"javac\",\"javadoc\",\"apt\",\"jar\",\"javap\",\"JPDA\",\"JConsole\",\"Java VisualVM\",\"Security\",\"Int'I\",\"RMI\",\"IDL\",\"Deploy\",\"Monitoring\",\"Troubleshoot\",\"Scripting\",\"JVM TI\",\"RIAs \",\"Java Web Start\",\"Applet / Java Plug-in\",\"用户界面工具包 \",\"AWT \",\"Accessibility\",\"Drag n Drop\",\"Swing \",\"Input Methods\",\"Image I/O\",\"Java 2D \",\"Print Service\",\"Sound\",\"集成库 \",\"IDL\",\"JDBC\",\"JNDI\",\"RMI\",\"RMI-IIOP\",\"Scripting\",\"其他基准库 \",\"Beans\",\"Intl Support\",\"I/O\",\"JMX\",\"JNI\",\"Math\",\"Networking\",\"Override Mechanism\",\"Security\",\"Serialization\",\"Extension Mechanism\",\"XML JAXP\",\"语言和工具标准库 \",\"lang & util\",\"Collections\",\"Concurrency Utilities\",\"Jar\",\"Logging\",\"Management\",\"Preferences API\",\"Ref Objects\",\"Reflection\",\"Regular Expression\",\"Versioning\",\"Zip\",\"Instrumentation\",\"JVM \",\"Java Hotspot Client ans Server VM\",\" 插入图片\"]},\"111\":{\"h\":\"1.4 安装开发环境\",\"t\":[\"这里使用的环境为：\",\"Java 1.8+\",\"IntelliJ IDEA\",\"我们可以测试 Hello.java 是否能正常运行：\",\"public class Hello { public static void main(String[] args) { System.out.println(\\\"Hello World!\\\"); } } \",\"在命令行编译并运行：\",\"javac Hello.java java Hello \"]},\"112\":{\"h\":\"1.5 编码习惯\",\"t\":[\"变量方法、类名可遵循驼峰命名。\",\"好的程序需要善于使用各种注释，Java 注释有下面几种：\",\"单行注释（// ...）\",\"多行注释（/* ... */）\",\"文档注释（/** ... @xxx ... */）\",\"JDK 7 的数字支持下划线分割：\",\"int money = 10_000_000; \",\"常见的文档注释内容：\",\"表示\",\"含义\",\"@Description\",\"描述\",\"@Author\",\"作者\"]},\"113\":{\"h\":\"2. Java 基础语法\"},\"114\":{\"h\":\"2.1 Java 标识符\",\"t\":[\"Java 有哪些关键字？\",\"Java 标识符的要求：\",\"所有的标识符都应该以字母（A-Z 或者 a-z），美元符（$）、或者下划线（_）开始\",\"首字符之后可以是字母（A-Z 或者 a-z），美元符（$）、下划线（_）或数字（0-9）的任何字符组合\",\"关键字不能用作标识符\",\"标识符是大小写敏感的\"]},\"115\":{\"h\":\"2.2 数据类型\",\"t\":[\"Java 是强类型语言：要求变量的使用要严格符合规定，所有的变量必须先定义才能使用。\",\"Java 的数据分为两大类：\",\"基本类型（Primitive Type） \",\"数值类型 \",\"整数类型 \",\"byte，1 个字节\",\"short，2 个字节\",\"int，4 个字节\",\"long，8 个字节\",\"浮点类型 \",\"float，4 个字节\",\"double，8 个字节\",\"字符类型 \",\"char，2 个字节\",\"布尔类型 \",\"boolean 类型，占 1 位\",\"引用类型（Reference Type） \",\"类\",\"接口\",\"数组\"]},\"116\":{\"h\":\"2.3 类型转换\",\"t\":[\" 详细讲解。\"]},\"117\":{\"h\":\"附录：易错类型讲解\",\"t\":[\"注意看下面的代码：\",\"public class Hello { public static void main(String[] args) { float f = 0.1f; double d = 1.0 / 10; System.out.println(f == d); float f1 = 1241234124134123f; float f2 = f1 + 1; System.out.println(f1 == f2); } } \",\"最后输出结果为：\",\"false true \",\"我们再看下面的 String 类型示例：\",\"public class Hello { public static void main(String[] args) { String s1 = new String(\\\"hello\\\"); String s2 = new String(\\\"hello\\\"); System.out.println(s1 == s2); // false String s3 = \\\"hello\\\"; String s4 = \\\"hello\\\"; System.out.println(s3 == s4); // true } } \",\"这是引用类型和值类型的比较问题。\"]},\"118\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"119\":{\"h\":\"Canal\"}},\"dirtCount\":0,\"index\":[[\"易错类型讲解\",{\"0\":{\"117\":1}}],[\"附录\",{\"0\":{\"117\":1}}],[\"详细讲解\",{\"1\":{\"116\":1}}],[\"占\",{\"1\":{\"115\":1}}],[\"布尔类型\",{\"1\":{\"115\":1}}],[\"浮点类型\",{\"1\":{\"115\":1}}],[\"个字节\",{\"1\":{\"115\":7}}],[\"个标准的\",{\"1\":{\"18\":1}}],[\"整数类型\",{\"1\":{\"115\":1}}],[\"整理成册后\",{\"1\":{\"13\":1}}],[\"要求变量的使用要严格符合规定\",{\"1\":{\"115\":1}}],[\"美元符\",{\"1\":{\"114\":2}}],[\"作者\",{\"1\":{\"112\":1}}],[\"作为边界前缀\",{\"1\":{\"45\":1}}],[\"作为后缀\",{\"1\":{\"45\":1}}],[\"作为方法区中的类数据的访问入口\",{\"1\":{\"25\":1}}],[\"含义\",{\"1\":{\"112\":1}}],[\"好的程序需要善于使用各种注释\",{\"1\":{\"112\":1}}],[\"插入图片\",{\"1\":{\"110\":1}}],[\"插件\",{\"1\":{\"13\":1}}],[\"z\",{\"1\":{\"114\":4}}],[\"zip\",{\"1\":{\"110\":1}}],[\"zh\",{\"1\":{\"70\":1}}],[\"集成库\",{\"1\":{\"110\":1}}],[\"集合处理\",{\"0\":{\"102\":1}}],[\"发行版本\",{\"0\":{\"110\":1}}],[\"发生类的初始化\",{\"1\":{\"24\":1}}],[\"健壮性\",{\"1\":{\"109\":1}}],[\"跨时代的作品\",{\"1\":{\"108\":1}}],[\"高并发\",{\"1\":{\"108\":1}}],[\"高可用\",{\"1\":{\"108\":1}}],[\"高性能\",{\"1\":{\"108\":1,\"109\":1}}],[\"许多基于\",{\"1\":{\"108\":1}}],[\"许多框架\",{\"1\":{\"15\":1}}],[\"移动端\",{\"1\":{\"108\":1}}],[\"桌面\",{\"1\":{\"108\":1}}],[\"于是\",{\"1\":{\"108\":1}}],[\"带来了生机\",{\"1\":{\"108\":1}}],[\"拥有高质量的类库\",{\"1\":{\"108\":1}}],[\"真正编写一次\",{\"1\":{\"108\":1}}],[\"严重依赖平台和编译器实现\",{\"1\":{\"108\":1}}],[\"游戏等\",{\"1\":{\"108\":1}}],[\"多行注释\",{\"1\":{\"112\":1}}],[\"多线程\",{\"1\":{\"109\":1}}],[\"多应用于图形领域\",{\"1\":{\"108\":1}}],[\"多数特殊字符支持\",{\"1\":{\"45\":1}}],[\"兼容\",{\"1\":{\"108\":1}}],[\"诞生\",{\"1\":{\"108\":1}}],[\"应用于操作系统\",{\"1\":{\"108\":1}}],[\"应用工具类包名为\",{\"1\":{\"97\":1}}],[\"效率极高\",{\"1\":{\"108\":1}}],[\"贴近硬件\",{\"1\":{\"108\":1}}],[\"才问世\",{\"1\":{\"108\":1}}],[\"年的网页简单而粗糙\",{\"1\":{\"108\":1}}],[\"年\",{\"1\":{\"108\":4}}],[\"年杭州云栖大会上发布了配套的\",{\"1\":{\"13\":1}}],[\"历史\",{\"0\":{\"108\":1}}],[\"控制语句\",{\"0\":{\"104\":1}}],[\"控制循环\",{\"1\":{\"48\":1}}],[\"日期时间\",{\"0\":{\"101\":1}}],[\"点分隔符之间有且仅有一个自然语义的英语单词\",{\"1\":{\"97\":1}}],[\"得到意料之外的结果或抛出异常\",{\"1\":{\"97\":1}}],[\"得到完整的\",{\"1\":{\"21\":1}}],[\"导致字段获取不到\",{\"1\":{\"97\":1}}],[\"误以为\",{\"1\":{\"97\":1}}],[\"部分框架在反向解析时\",{\"1\":{\"97\":1}}],[\"部署\",{\"0\":{\"59\":1,\"64\":1,\"74\":1}}],[\"到处运行\",{\"1\":{\"108\":1}}],[\"到\",{\"1\":{\"97\":1}}],[\"设置从\",{\"1\":{\"97\":1}}],[\"设计开发并开源\",{\"1\":{\"38\":1}}],[\"设计规约七个维度\",{\"1\":{\"13\":1}}],[\"设计模式\",{\"0\":{\"3\":1}}],[\"否则部分框架解析会引起序列化错误\",{\"1\":{\"97\":1}}],[\"否则使用只读关键字\",{\"1\":{\"50\":1}}],[\"抽象类命名使用\",{\"1\":{\"97\":1}}],[\"抽象属性\",{\"1\":{\"53\":1}}],[\"力求语义表达完整清楚\",{\"1\":{\"97\":1}}],[\"局部变量都统一使用\",{\"1\":{\"97\":1}}],[\"局部内部类\",{\"1\":{\"22\":1}}],[\"风格\",{\"1\":{\"97\":2}}],[\"福娃\",{\"1\":{\"97\":1}}],[\"评分\",{\"1\":{\"97\":1}}],[\"打折\",{\"1\":{\"97\":1}}],[\"打印结果为\",{\"1\":{\"48\":2}}],[\"避免在子父类的成员变量之间\",{\"1\":{\"97\":1}}],[\"避免歧义\",{\"1\":{\"97\":1}}],[\"避免空指针异常等整个类的错误\",{\"1\":{\"38\":1}}],[\"尝试返回文件\",{\"1\":{\"95\":1}}],[\"记得引入\",{\"1\":{\"93\":1}}],[\"浏览器会可能无法正确识别文件类型\",{\"1\":{\"93\":1}}],[\"二进制文件\",{\"1\":{\"92\":1}}],[\"二维数组具有\",{\"1\":{\"22\":1}}],[\"纯文本文档\",{\"1\":{\"92\":1}}],[\"图标\",{\"1\":{\"92\":1}}],[\"图片\",{\"1\":{\"92\":6}}],[\"图胜于表\",{\"1\":{\"13\":1}}],[\"描述\",{\"1\":{\"92\":1,\"112\":1}}],[\"查看\",{\"1\":{\"92\":1}}],[\"查看代理服务的状态\",{\"1\":{\"63\":1}}],[\"能够正常对外提供服务\",{\"1\":{\"87\":1}}],[\"能运行多个容器\",{\"1\":{\"79\":1}}],[\"节点\",{\"0\":{\"88\":1}}],[\"节点组成\",{\"1\":{\"87\":1}}],[\"节点和多个\",{\"1\":{\"87\":1}}],[\"架构\",{\"0\":{\"87\":1}}],[\"进行编排\",{\"1\":{\"85\":1,\"86\":1}}],[\"组合成一个服务\",{\"1\":{\"80\":1}}],[\"只运行一个容器\",{\"1\":{\"79\":1}}],[\"只有真正声明这个域的类才会被初始化\",{\"1\":{\"24\":1}}],[\"调度的最小单位\",{\"1\":{\"79\":1}}],[\"调用指定方法\",{\"1\":{\"27\":1}}],[\"调用\",{\"1\":{\"24\":2}}],[\"调用类的静态成员\",{\"1\":{\"24\":1}}],[\"调用缺省构造函数\",{\"1\":{\"22\":1}}],[\"就是一个物理机或者虚拟机\",{\"1\":{\"78\":1}}],[\"基础语法\",{\"0\":{\"113\":1}}],[\"基础概念\",{\"0\":{\"77\":1}}],[\"基本类型\",{\"1\":{\"115\":1}}],[\"基本语法\",{\"0\":{\"44\":1}}],[\"基本数据类型\",{\"1\":{\"22\":1}}],[\"再次执行测试\",{\"1\":{\"74\":1}}],[\"再根据内容特征\",{\"1\":{\"13\":1}}],[\"测试类命名以它要测试的类的名称开始\",{\"1\":{\"97\":1}}],[\"测试\",{\"1\":{\"73\":1}}],[\"管理语言设置\",{\"1\":{\"73\":1}}],[\"管理界面密码\",{\"1\":{\"66\":1}}],[\"管理界面用户名\",{\"1\":{\"66\":1}}],[\"管理界面端口\",{\"1\":{\"66\":1}}],[\"管理界面\",{\"1\":{\"66\":1}}],[\"时间和语言\",{\"1\":{\"73\":1}}],[\"仿照上面的命令\",{\"1\":{\"73\":1}}],[\"克隆示例项目\",{\"1\":{\"73\":1}}],[\"首字符之后可以是字母\",{\"1\":{\"114\":1}}],[\"首选我们需要下载并安装\",{\"1\":{\"72\":1}}],[\"首先判断该类是否已经被加载\",{\"1\":{\"25\":1}}],[\"首先我们定义一个\",{\"1\":{\"21\":1}}],[\"安装开发环境\",{\"0\":{\"111\":1}}],[\"安装\",{\"0\":{\"72\":1}}],[\"安全性\",{\"1\":{\"109\":1}}],[\"安全\",{\"1\":{\"38\":1}}],[\"安全规约\",{\"1\":{\"13\":1}}],[\"官方文档\",{\"1\":{\"71\":1}}],[\"官方开发语言\",{\"1\":{\"38\":1}}],[\"入门\",{\"0\":{\"71\":1,\"76\":1}}],[\"↩︎\",{\"1\":{\"70\":1}}],[\"头部\",{\"1\":{\"70\":1}}],[\"头部获取真实\",{\"1\":{\"69\":1}}],[\"指令\",{\"0\":{\"94\":1}}],[\"指令来设置\",{\"1\":{\"70\":1}}],[\"指令来开启\",{\"1\":{\"70\":1}}],[\"指令中添加\",{\"1\":{\"70\":2}}],[\"指定目录下的\",{\"1\":{\"25\":1}}],[\"协议来传递经过\",{\"1\":{\"70\":1}}],[\"网络用于读取宿主机的应用程序\",{\"1\":{\"65\":1}}],[\"服务器\",{\"1\":{\"108\":2}}],[\"服务端\",{\"1\":{\"66\":1}}],[\"服务端配置\",{\"0\":{\"66\":1}}],[\"服务端用于提供代理服务\",{\"1\":{\"63\":1}}],[\"服务隧道密码\",{\"1\":{\"65\":1,\"66\":1}}],[\"服务隧道端口\",{\"1\":{\"65\":1,\"66\":2}}],[\"公网服务器地址\",{\"1\":{\"65\":1}}],[\"客户端\",{\"1\":{\"65\":1}}],[\"客户端配置\",{\"0\":{\"65\":1}}],[\"客户端用于连接内网的应用程序\",{\"1\":{\"63\":1}}],[\"映射到公网服务器的\",{\"1\":{\"64\":1}}],[\"比较流行的\",{\"1\":{\"64\":1}}],[\"比如普通字符\",{\"1\":{\"45\":1}}],[\"比如\",{\"1\":{\"13\":2,\"29\":1,\"45\":1}}],[\"还提供管理界面\",{\"1\":{\"63\":1}}],[\"还有一些不建议使用或者过时的方法\",{\"1\":{\"16\":1}}],[\"仓库为\",{\"1\":{\"63\":1}}],[\"拉取镜像\",{\"1\":{\"61\":1,\"64\":1}}],[\"示例\",{\"0\":{\"61\":1},\"1\":{\"61\":1}}],[\"系列镜像\",{\"1\":{\"60\":1}}],[\"系统自动推断变量类型为int\",{\"1\":{\"44\":1}}],[\"系统自动推断变量类型为\",{\"1\":{\"44\":1}}],[\"系统加载器是无法获取的\",{\"1\":{\"25\":1}}],[\"系统类加载器\",{\"1\":{\"25\":2}}],[\"系统化地整理成册\",{\"1\":{\"13\":1}}],[\"最后输出结果为\",{\"1\":{\"117\":1}}],[\"最佳实践是\",{\"1\":{\"79\":1}}],[\"最小版本\",{\"1\":{\"60\":1}}],[\"最新版本\",{\"1\":{\"60\":1}}],[\"稳定版本\",{\"1\":{\"60\":1}}],[\"容器环境\",{\"1\":{\"60\":1}}],[\"容器内的\",{\"1\":{\"57\":1}}],[\"标识符是大小写敏感的\",{\"1\":{\"114\":1}}],[\"标识符的要求\",{\"1\":{\"114\":1}}],[\"标识符\",{\"0\":{\"114\":1}}],[\"标签\",{\"1\":{\"60\":1}}],[\"标准的\",{\"1\":{\"25\":1}}],[\"启动服务端\",{\"1\":{\"66\":1}}],[\"启动客户端\",{\"1\":{\"65\":1}}],[\"启动\",{\"1\":{\"57\":1}}],[\"启动容器\",{\"1\":{\"9\":1}}],[\"启动容器并挂载\",{\"1\":{\"9\":1}}],[\"已经开启了\",{\"1\":{\"56\":1}}],[\"已知一个类的全名\",{\"1\":{\"22\":1}}],[\"添加如下配置到\",{\"1\":{\"56\":1}}],[\"检查是否开启了\",{\"1\":{\"56\":1}}],[\"配置文件\",{\"1\":{\"65\":2,\"66\":1}}],[\"配置文件内可以使用类似\",{\"1\":{\"64\":1}}],[\"配置\",{\"0\":{\"56\":1,\"57\":1}}],[\"模式\",{\"1\":{\"54\":1}}],[\"模板选择\",{\"1\":{\"39\":1}}],[\"且不需要继承或使用\",{\"1\":{\"54\":1}}],[\"且该类在类路径下\",{\"1\":{\"22\":1}}],[\"必须重写属性\",{\"1\":{\"53\":1}}],[\"必需是单引号\",{\"1\":{\"45\":1}}],[\"允许方法有默认实现\",{\"1\":{\"53\":1}}],[\"允许顶级的函数\",{\"1\":{\"40\":1}}],[\"隐式继承\",{\"1\":{\"52\":1}}],[\"从\",{\"1\":{\"52\":1}}],[\"从而可以直接运行\",{\"1\":{\"41\":1}}],[\"继承\",{\"0\":{\"52\":1}}],[\"错误\",{\"1\":{\"51\":1}}],[\"都不要加\",{\"1\":{\"97\":1}}],[\"都是可选的\",{\"1\":{\"51\":1}}],[\"都为其保留了一个不变的\",{\"1\":{\"22\":1}}],[\"位\",{\"1\":{\"115\":1}}],[\"位于类名称之后\",{\"1\":{\"50\":1}}],[\"位宽度\",{\"1\":{\"45\":1}}],[\"次构造器\",{\"1\":{\"50\":1}}],[\"声明为不可变\",{\"1\":{\"50\":1}}],[\"声明为可变的\",{\"1\":{\"50\":1}}],[\"面向对象\",{\"0\":{\"49\":1},\"1\":{\"108\":2,\"109\":1}}],[\"面向对象思想\",{\"1\":{\"13\":1}}],[\"例子\",{\"1\":{\"48\":1}}],[\"例如下面的代码\",{\"1\":{\"16\":1}}],[\"例如\",{\"1\":{\"15\":1,\"19\":1,\"24\":1,\"30\":1,\"44\":1,\"45\":1}}],[\"你可以这么做\",{\"1\":{\"48\":1}}],[\"循环语句\",{\"0\":{\"48\":1}}],[\"甚至可以这样写\",{\"1\":{\"47\":1}}],[\"更不允许直接使用中文的方式\",{\"1\":{\"97\":1}}],[\"更改系统区域设置\",{\"1\":{\"73\":1}}],[\"更复杂的示例\",{\"1\":{\"47\":1}}],[\"更新日期\",{\"1\":{\"12\":1}}],[\"条\",{\"1\":{\"97\":1}}],[\"条件语句\",{\"0\":{\"47\":1}}],[\"条新规约\",{\"1\":{\"12\":1}}],[\"修饰的函数必须写\",{\"1\":{\"46\":1}}],[\"修饰符等\",{\"1\":{\"26\":1}}],[\"转义\",{\"1\":{\"45\":1}}],[\"前后端规约\",{\"0\":{\"106\":1}}],[\"前缀\",{\"1\":{\"97\":1}}],[\"前置空格删除了\",{\"1\":{\"45\":1}}],[\"前言\",{\"0\":{\"13\":1}}],[\"另外字符串是可迭代的\",{\"1\":{\"45\":1}}],[\"另外一种是使用工厂函数\",{\"1\":{\"45\":1}}],[\"字符类型\",{\"1\":{\"115\":1}}],[\"字符串天生支持模板\",{\"1\":{\"45\":1}}],[\"字符串有\",{\"1\":{\"45\":1}}],[\"字符串支持使用三个双引号来表示多行字符串\",{\"1\":{\"45\":1}}],[\"字符串可以使用\",{\"1\":{\"45\":1}}],[\"字体\",{\"1\":{\"92\":4}}],[\"字节码\",{\"1\":{\"38\":1}}],[\"字节码校验器验证字节码\",{\"1\":{\"25\":1}}],[\"字节码文件\",{\"1\":{\"25\":1}}],[\"字节码文件的内容加载的内存中\",{\"1\":{\"25\":1}}],[\"字节码内容加载到内存中\",{\"1\":{\"23\":1}}],[\"函数可以返回到标签\",{\"1\":{\"48\":1}}],[\"函数可以这样写\",{\"1\":{\"40\":1}}],[\"函数中使用\",{\"1\":{\"48\":1}}],[\"函数的参数可以是可变长的\",{\"1\":{\"46\":1}}],[\"函数语法\",{\"0\":{\"46\":1}}],[\"函数\",{\"1\":{\"45\":1,\"50\":1}}],[\"读取数组内容\",{\"1\":{\"45\":1}}],[\"重启\",{\"1\":{\"56\":1}}],[\"重写属性\",{\"1\":{\"53\":1}}],[\"重写注解会帮助我们检查程序是否是真的重写了这个方法\",{\"1\":{\"17\":1}}],[\"重载了\",{\"1\":{\"45\":1}}],[\"~\",{\"1\":{\"45\":1}}],[\"翻转\",{\"1\":{\"45\":1}}],[\"^~\",{\"1\":{\"70\":1}}],[\"^\",{\"1\":{\"45\":1,\"70\":1,\"95\":2}}],[\"异常类命名使用\",{\"1\":{\"97\":1}}],[\"异常日志\",{\"1\":{\"13\":1}}],[\"异或\",{\"1\":{\"45\":1}}],[\"无符号右移\",{\"1\":{\"45\":1}}],[\"无规范难以协同\",{\"1\":{\"13\":1}}],[\"无规矩不成方圆\",{\"1\":{\"13\":1}}],[\"右移\",{\"1\":{\"45\":1}}],[\"左移\",{\"1\":{\"45\":1}}],[\"运行极快\",{\"1\":{\"108\":1}}],[\"运行容器\",{\"1\":{\"74\":1}}],[\"运行示例\",{\"0\":{\"73\":1}}],[\"运行库\",{\"1\":{\"41\":2}}],[\"运算符\",{\"1\":{\"45\":1}}],[\"两个镜像\",{\"1\":{\"64\":1}}],[\"两个\",{\"1\":{\"45\":1}}],[\"三个等号\",{\"1\":{\"45\":1}}],[\"三大类\",{\"1\":{\"13\":1}}],[\"默认不识别的文件类型\",{\"1\":{\"93\":1}}],[\"默认提供了三个方法\",{\"1\":{\"52\":1}}],[\"默认实现\",{\"1\":{\"51\":2}}],[\"默认实现了\",{\"1\":{\"51\":2}}],[\"默认以\",{\"1\":{\"45\":1}}],[\"默认情况下不损失精度\",{\"1\":{\"45\":1}}],[\"默认为\",{\"1\":{\"44\":1}}],[\"每种基本类型都可以转换\",{\"1\":{\"45\":1}}],[\"每个类的实例都会保存自己由哪一个\",{\"1\":{\"22\":1}}],[\"来定义\",{\"1\":{\"97\":1}}],[\"来转换\",{\"1\":{\"45\":1}}],[\"来讲解如何获取注解信息\",{\"1\":{\"30\":1}}],[\"型值赋给一个\",{\"1\":{\"45\":1}}],[\"较小的类型不能隐式转换为较大的类型\",{\"1\":{\"45\":1}}],[\"较小类型并不是较大类型的子类型\",{\"1\":{\"45\":1}}],[\"大部分常用的\",{\"1\":{\"93\":1}}],[\"大多数情况下我们只需要\",{\"1\":{\"63\":1}}],[\"大写\",{\"1\":{\"45\":1}}],[\"大大减少样板代码的数量\",{\"1\":{\"38\":1}}],[\"相当于\",{\"1\":{\"44\":1}}],[\"判断对象是对象的实例\",{\"1\":{\"44\":1}}],[\"判断父类是否为空\",{\"1\":{\"25\":1}}],[\"支持通过\",{\"1\":{\"70\":1}}],[\"支持区间表达式\",{\"1\":{\"47\":1}}],[\"支持布尔运算符\",{\"1\":{\"45\":1}}],[\"支持\",{\"1\":{\"44\":1,\"48\":1,\"63\":1,\"70\":1}}],[\"支持可空类型\",{\"1\":{\"44\":1}}],[\"支持声明时自动推导类型\",{\"1\":{\"44\":1}}],[\"xmlservice\",{\"1\":{\"97\":2}}],[\"xml\",{\"1\":{\"92\":4,\"110\":1}}],[\"xxxxxx\",{\"1\":{\"65\":1,\"66\":1}}],[\"xxx\",{\"1\":{\"64\":4,\"65\":4,\"97\":3,\"112\":1}}],[\"xor\",{\"1\":{\"45\":1}}],[\"x\",{\"1\":{\"44\":2,\"47\":18,\"69\":1,\"70\":4,\"92\":1}}],[\"明确赋值\",{\"1\":{\"44\":1}}],[\"语法像\",{\"1\":{\"108\":1}}],[\"语法概述\",{\"0\":{\"43\":1}}],[\"语句可以遍历任何迭代器和其他可迭代类型\",{\"1\":{\"48\":1}}],[\"语句返回的值赋值给变量\",{\"1\":{\"47\":1}}],[\"语句\",{\"1\":{\"47\":1}}],[\"语言和工具标准库\",{\"1\":{\"110\":1}}],[\"语言和区域\",{\"1\":{\"73\":1}}],[\"语言特性\",{\"0\":{\"109\":1}}],[\"语言就诞生了\",{\"1\":{\"108\":1}}],[\"语言概述\",{\"0\":{\"107\":1}}],[\"语言的一些特点\",{\"1\":{\"108\":1}}],[\"语言的\",{\"1\":{\"47\":1}}],[\"语言一样\",{\"1\":{\"44\":1}}],[\"语言官网\",{\"1\":{\"38\":1}}],[\"语言基础\",{\"0\":{\"4\":1}}],[\"语言\",{\"0\":{\"2\":1},\"1\":{\"108\":1,\"110\":2}}],[\"需要安装\",{\"1\":{\"73\":1}}],[\"需要一个初始化语句\",{\"1\":{\"51\":1}}],[\"需要使用\",{\"1\":{\"42\":1}}],[\"需要运行时在你的\",{\"1\":{\"41\":1}}],[\"注释有下面几种\",{\"1\":{\"112\":1}}],[\"注释规约\",{\"0\":{\"105\":1}}],[\"注释可以有单行注释\",{\"1\":{\"44\":1}}],[\"注意看下面的代码\",{\"1\":{\"117\":1}}],[\"注意\",{\"1\":{\"97\":1}}],[\"注意下面开放的三个端口\",{\"1\":{\"66\":1}}],[\"注意脚本文件后缀为\",{\"1\":{\"42\":1}}],[\"注解具有\",{\"1\":{\"22\":1}}],[\"注解类型\",{\"1\":{\"22\":1}}],[\"注解元素必须有值\",{\"1\":{\"19\":1}}],[\"注解相当于给它们添加了额外的辅助信息\",{\"1\":{\"16\":1}}],[\"注解的基本格式为\",{\"1\":{\"16\":1}}],[\"注解不是程序\",{\"1\":{\"16\":1}}],[\"注解\",{\"1\":{\"16\":1,\"17\":1}}],[\"注解入门\",{\"0\":{\"16\":1}}],[\"注解概述\",{\"0\":{\"15\":1}}],[\"注解和反射\",{\"0\":{\"14\":1},\"1\":{\"14\":1}}],[\"脚本模式\",{\"0\":{\"42\":1}}],[\"让\",{\"1\":{\"41\":1}}],[\"参数中\",{\"1\":{\"97\":1}}],[\"参数名\",{\"1\":{\"97\":1}}],[\"参数\",{\"1\":{\"42\":1,\"46\":1,\"70\":1}}],[\"参数说明\",{\"1\":{\"41\":1}}],[\"参考\",{\"1\":{\"13\":1}}],[\"参考链接\",{\"1\":{\"10\":1}}],[\"|alex\",{\"1\":{\"45\":1}}],[\"|我是多行字符串\",{\"1\":{\"45\":1}}],[\"|多行字符串\",{\"1\":{\"45\":2}}],[\"|\",{\"1\":{\"41\":1,\"45\":2,\"57\":1}}],[\"||\",{\"1\":{\"21\":1,\"45\":1}}],[\"命令行运行\",{\"0\":{\"41\":1}}],[\"命名风格\",{\"0\":{\"97\":1}}],[\"命名\",{\"1\":{\"19\":1}}],[\"创建类的实例不需要\",{\"1\":{\"50\":1}}],[\"创建一个对象不用\",{\"1\":{\"40\":1}}],[\"创建项目\",{\"1\":{\"39\":1}}],[\"创建项目流程\",{\"1\":{\"39\":1}}],[\"接受一个字符串数组作为参数\",{\"1\":{\"40\":1}}],[\"接口不会保存属性值\",{\"1\":{\"53\":1}}],[\"接口中的属性只能是抽象的\",{\"1\":{\"53\":1}}],[\"接口与\",{\"1\":{\"53\":1}}],[\"接口具有\",{\"1\":{\"22\":1}}],[\"接口\",{\"0\":{\"53\":1},\"1\":{\"16\":1,\"19\":1,\"22\":3,\"115\":1}}],[\"因此我们迫切需要一门语言\",{\"1\":{\"108\":1}}],[\"因此\",{\"1\":{\"40\":1}}],[\"因为常量在链接阶段就存入调用库的常量池中了\",{\"1\":{\"24\":1}}],[\"因为\",{\"1\":{\"21\":1}}],[\"因为不仅是编程知识点\",{\"1\":{\"13\":1}}],[\"等\",{\"1\":{\"97\":1}}],[\"等国际通用的名称\",{\"1\":{\"97\":1}}],[\"等系统中\",{\"1\":{\"93\":1}}],[\"等协议\",{\"1\":{\"63\":1}}],[\"等待\",{\"1\":{\"39\":1}}],[\"等作为默认值\",{\"1\":{\"19\":1}}],[\"主线版本\",{\"1\":{\"60\":1}}],[\"主构造器是类头部的一部分\",{\"1\":{\"50\":1}}],[\"主构造器\",{\"1\":{\"50\":1}}],[\"主意要选择正确的\",{\"1\":{\"39\":1}}],[\"主要的动态语言\",{\"1\":{\"21\":1}}],[\"任意名称保存创建即可\",{\"1\":{\"39\":1}}],[\"项目\",{\"1\":{\"39\":1}}],[\"选择\",{\"1\":{\"39\":1}}],[\"程序\",{\"1\":{\"39\":1}}],[\"程序可以在运行时绑定一些信息或在编译时进行检查\",{\"1\":{\"15\":1}}],[\"文档注释\",{\"1\":{\"112\":1}}],[\"文档\",{\"1\":{\"38\":1,\"70\":1,\"92\":6}}],[\"文件夹\",{\"1\":{\"95\":1}}],[\"文件的路径为\",{\"1\":{\"93\":1}}],[\"文件扩展名\",{\"1\":{\"92\":1}}],[\"文件保存在不同位置\",{\"1\":{\"66\":1}}],[\"文件即为示例文件\",{\"1\":{\"57\":1}}],[\"文件中\",{\"1\":{\"56\":1}}],[\"文件以\",{\"1\":{\"44\":1}}],[\"文件包含\",{\"1\":{\"41\":1}}],[\"文件时\",{\"1\":{\"25\":1}}],[\"文件通过\",{\"1\":{\"25\":1}}],[\"文件读入内存\",{\"1\":{\"23\":1}}],[\"文件\",{\"1\":{\"22\":1,\"41\":1,\"61\":1,\"93\":1,\"95\":2}}],[\"充分利用\",{\"1\":{\"38\":1}}],[\"互操作性\",{\"1\":{\"38\":1}}],[\"简单性\",{\"1\":{\"109\":1}}],[\"简洁\",{\"1\":{\"38\":1}}],[\"简介\",{\"0\":{\"38\":1,\"63\":1}}],[\"成为了那个时代最好的语言\",{\"1\":{\"108\":1}}],[\"成为\",{\"1\":{\"38\":1}}],[\"成员变量\",{\"1\":{\"97\":1}}],[\"成员内部类\",{\"1\":{\"22\":1}}],[\"成员\",{\"1\":{\"22\":1}}],[\"宣布\",{\"1\":{\"38\":1}}],[\"方便在没有\",{\"1\":{\"38\":1}}],[\"方法也是\",{\"1\":{\"97\":1}}],[\"方法也可以获得指定名称的类\",{\"1\":{\"26\":1}}],[\"方法用于删除两边空白\",{\"1\":{\"45\":1}}],[\"方法之前需要关闭权限检查\",{\"1\":{\"27\":1}}],[\"方法原型\",{\"1\":{\"27\":1}}],[\"方法所在的类\",{\"1\":{\"24\":1}}],[\"方法在多线程环境中被正确加锁和同步\",{\"1\":{\"23\":1}}],[\"方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的\",{\"1\":{\"23\":1}}],[\"方法的作用是启用和禁用访问安全检查\",{\"1\":{\"27\":1}}],[\"方法的过程\",{\"1\":{\"23\":1}}],[\"方法的名称就是参数的名称\",{\"1\":{\"19\":1}}],[\"方法区\",{\"1\":{\"23\":1}}],[\"方法名\",{\"1\":{\"22\":1,\"97\":1}}],[\"方法调用获得类对象\",{\"1\":{\"21\":1}}],[\"方法\",{\"1\":{\"17\":1,\"21\":1,\"25\":1,\"26\":1,\"27\":3,\"45\":3,\"51\":1}}],[\"由于\",{\"1\":{\"108\":1}}],[\"由于使用\",{\"1\":{\"45\":1}}],[\"由\",{\"1\":{\"38\":1}}],[\"由当前类加载器进行加载\",{\"1\":{\"25\":1}}],[\"世界的\",{\"1\":{\"38\":1}}],[\"被称之为\",{\"1\":{\"38\":1}}],[\"被视为动态语言的关键\",{\"1\":{\"21\":1}}],[\"饿汉模式\",{\"0\":{\"34\":1}}],[\"懒汉模式\",{\"0\":{\"33\":1}}],[\"单行注释\",{\"1\":{\"112\":1}}],[\"单词间用下划线隔开\",{\"1\":{\"97\":1}}],[\"单例模式\",{\"0\":{\"32\":1}}],[\"单元测试等知识丰富立体地呈现出来\",{\"1\":{\"13\":1}}],[\"单元测试\",{\"1\":{\"13\":1}}],[\"教程\",{\"0\":{\"31\":1,\"37\":1}}],[\"鸭梨\",{\"1\":{\"30\":1}}],[\"即使纯拼音命名方式也要避免采用\",{\"1\":{\"97\":1}}],[\"即可\",{\"1\":{\"39\":1,\"73\":1}}],[\"即\",{\"1\":{\"30\":1,\"48\":1}}],[\"即判断\",{\"1\":{\"25\":1}}],[\"几个概念\",{\"1\":{\"110\":1}}],[\"几个现象可以通过上面的原理解释\",{\"1\":{\"24\":1}}],[\"几种类型来代表不能被归一到\",{\"1\":{\"29\":1}}],[\"wtf\",{\"1\":{\"97\":1}}],[\"weblogic\",{\"1\":{\"108\":1}}],[\"websphere\",{\"1\":{\"108\":1}}],[\"website\",{\"1\":{\"95\":1}}],[\"web\",{\"1\":{\"93\":1,\"108\":1,\"110\":1}}],[\"webp\",{\"1\":{\"92\":3}}],[\"woff2\",{\"1\":{\"92\":3}}],[\"woff\",{\"1\":{\"92\":3}}],[\"world\",{\"1\":{\"39\":1,\"40\":2,\"111\":1}}],[\"workdir\",{\"1\":{\"9\":1,\"61\":1,\"74\":1}}],[\"www\",{\"1\":{\"70\":1}}],[\"whitelist\",{\"1\":{\"97\":1}}],[\"while\",{\"1\":{\"48\":2}}],[\"when\",{\"1\":{\"47\":7}}],[\"with\",{\"1\":{\"93\":1}}],[\"withindex\",{\"1\":{\"48\":1}}],[\"windows\",{\"1\":{\"73\":5}}],[\"wildcardtype\",{\"1\":{\"29\":2}}],[\"确保数据的安全性和免去强制类型转换问题\",{\"1\":{\"29\":1}}],[\"确保加载的类信息符合\",{\"1\":{\"23\":1}}],[\"采用泛型擦除机制来引入泛型\",{\"1\":{\"29\":1}}],[\"9870\",{\"1\":{\"65\":1,\"66\":4}}],[\"9\",{\"0\":{\"29\":1,\"86\":1,\"105\":1},\"1\":{\"47\":1,\"114\":1}}],[\"9ms\",{\"1\":{\"28\":1}}],[\"91\",{\"1\":{\"9\":1}}],[\"输出\",{\"1\":{\"28\":1,\"45\":1,\"46\":1}}],[\"输出结果\",{\"1\":{\"25\":1,\"29\":1,\"45\":2}}],[\"花费时间\",{\"1\":{\"28\":6}}],[\"<resultmap>\",{\"1\":{\"97\":1}}],[\"<setter>\",{\"1\":{\"51\":1}}],[\"<getter>\",{\"1\":{\"51\":1}}],[\"<property\",{\"1\":{\"51\":1}}],[\"<propertytype>\",{\"1\":{\"51\":1}}],[\"<propertyname>\",{\"1\":{\"51\":1}}],[\"<<\",{\"1\":{\"45\":1}}],[\"<\",{\"1\":{\"28\":3,\"47\":1}}],[\"<clinit>>\",{\"1\":{\"23\":1}}],[\"<clinit>\",{\"1\":{\"23\":3}}],[\"普通方式调用\",{\"1\":{\"28\":1}}],[\"性能对比分析\",{\"0\":{\"28\":1}}],[\"8+\",{\"1\":{\"111\":1}}],[\"8080\",{\"1\":{\"70\":1,\"73\":1,\"74\":4}}],[\"80\",{\"1\":{\"61\":1,\"95\":1}}],[\"8000\",{\"1\":{\"9\":2}}],[\"8\",{\"0\":{\"28\":1,\"85\":1,\"104\":1},\"1\":{\"45\":1,\"47\":1,\"48\":1,\"57\":1,\"73\":2,\"74\":1,\"115\":2}}],[\"使可理解性降低\",{\"1\":{\"97\":1}}],[\"使得原本私有的属性和方法也可以被访问\",{\"1\":{\"27\":1}}],[\"使用指针和手动内存管理\",{\"1\":{\"108\":1}}],[\"使用指南\",{\"0\":{\"62\":1}}],[\"使用多阶段构建\",{\"1\":{\"74\":1}}],[\"使用的\",{\"1\":{\"29\":1}}],[\"使用\",{\"0\":{\"59\":1,\"74\":1},\"1\":{\"19\":1,\"24\":1,\"44\":3,\"47\":2,\"53\":1,\"69\":1,\"97\":1}}],[\"关键字不能用作标识符\",{\"1\":{\"114\":1}}],[\"关键字定义接口\",{\"1\":{\"53\":1}}],[\"关键字进行修饰\",{\"1\":{\"52\":1}}],[\"关键字可以省略\",{\"1\":{\"50\":1}}],[\"关键字\",{\"1\":{\"40\":1,\"50\":1}}],[\"关键字来声明参数的默认值\",{\"1\":{\"19\":1}}],[\"关闭客户端\",{\"1\":{\"65\":1}}],[\"关闭检测\",{\"1\":{\"28\":1}}],[\"关闭安全检查的作用\",{\"1\":{\"27\":1}}],[\"为了使\",{\"1\":{\"87\":1}}],[\"为了通过反射操作这些类型\",{\"1\":{\"29\":1}}],[\"为底层协议的类型\",{\"1\":{\"70\":1}}],[\"为后缀\",{\"1\":{\"44\":1}}],[\"为什么选择\",{\"1\":{\"38\":1}}],[\"为关闭安全检查\",{\"1\":{\"27\":1}}],[\"为空时调用\",{\"1\":{\"25\":1}}],[\"为空则调用\",{\"1\":{\"25\":1}}],[\"若原方法为\",{\"1\":{\"27\":1}}],[\"若原方法为静态方法\",{\"1\":{\"27\":1}}],[\"若原方法没有参数\",{\"1\":{\"27\":1}}],[\"若没有返回值返回\",{\"1\":{\"27\":1}}],[\"若已知某个类的实例\",{\"1\":{\"22\":1}}],[\"若已知具体的类\",{\"1\":{\"22\":1}}],[\"里面包含了构造器所需的各个参数\",{\"1\":{\"27\":1}}],[\"向构造器的形参中传递一个对象数组进去\",{\"1\":{\"27\":1}}],[\"动态性\",{\"1\":{\"109\":1}}],[\"动态创建对象执行方法\",{\"0\":{\"27\":1}}],[\"动态语言\",{\"1\":{\"21\":1}}],[\"构建工具\",{\"1\":{\"108\":1}}],[\"构建成功后执行\",{\"1\":{\"73\":1}}],[\"构建错误\",{\"1\":{\"73\":1}}],[\"构建镜像\",{\"1\":{\"9\":1,\"74\":1}}],[\"构造函数和初始化代码块\",{\"1\":{\"50\":1}}],[\"构造器名称\",{\"1\":{\"26\":1}}],[\"总结\",{\"1\":{\"26\":1,\"27\":1}}],[\"同理\",{\"1\":{\"26\":1}}],[\"也不能以下划线或美元符号结束\",{\"1\":{\"97\":1}}],[\"也不是\",{\"1\":{\"47\":2}}],[\"也没有任何可见度修饰符\",{\"1\":{\"50\":1}}],[\"也支持\",{\"1\":{\"48\":1}}],[\"也具有类似功能\",{\"1\":{\"48\":1}}],[\"也可以使用自定义网络来通信\",{\"1\":{\"65\":1}}],[\"也可以定义空类\",{\"1\":{\"50\":1}}],[\"也可以作为脚本执行\",{\"1\":{\"42\":1}}],[\"也可以是目录\",{\"1\":{\"41\":1}}],[\"也可以编译成\",{\"1\":{\"38\":1}}],[\"也可以给定名称获得属性或者方法\",{\"1\":{\"26\":1}}],[\"也就是不需要命名参数\",{\"1\":{\"19\":1}}],[\"也就是说\",{\"1\":{\"17\":1}}],[\"64\",{\"1\":{\"45\":2}}],[\"640\",{\"1\":{\"9\":1}}],[\"6\",{\"0\":{\"26\":1,\"83\":1,\"102\":1}}],[\"非空则调用\",{\"1\":{\"25\":1}}],[\"递归这个操作\",{\"1\":{\"25\":1}}],[\"什么是双亲委派机制\",{\"1\":{\"25\":1}}],[\"什么时候会发生类的初始化\",{\"1\":{\"24\":1}}],[\"根加载器\",{\"1\":{\"25\":1}}],[\"扩展函数语法\",{\"1\":{\"54\":1}}],[\"扩展是一种静态行为\",{\"1\":{\"54\":1}}],[\"扩展\",{\"0\":{\"54\":1}}],[\"扩展加载器\",{\"1\":{\"25\":1}}],[\"扩展类加载器\",{\"1\":{\"25\":2}}],[\"行为\",{\"1\":{\"25\":1}}],[\"所有的变量必须先定义才能使用\",{\"1\":{\"115\":1}}],[\"所有的标识符都应该以字母\",{\"1\":{\"114\":1}}],[\"所有编程相关的命名严禁使用拼音与英文混合的方式\",{\"1\":{\"97\":1}}],[\"所有编程相关的命名均不能以下划线或美元符号开始\",{\"1\":{\"97\":1}}],[\"所有和泛型有关的类型全部擦除\",{\"1\":{\"29\":1}}],[\"所指定的目录下的类与\",{\"1\":{\"25\":1}}],[\"所以需要在\",{\"1\":{\"97\":1}}],[\"所以我们可以通过下标很方便的获取或者设置数组对应位置的值\",{\"1\":{\"45\":1}}],[\"所以我们形象地称之为\",{\"1\":{\"21\":1}}],[\"所以本手册以\",{\"1\":{\"13\":1}}],[\"或数字\",{\"1\":{\"114\":1}}],[\"或者下划线\",{\"1\":{\"114\":1}}],[\"或者不同代码块的局部变量之间采用完全相同的命名\",{\"1\":{\"97\":1}}],[\"或者使用命令安装\",{\"1\":{\"72\":1}}],[\"或者使用命令行构建\",{\"1\":{\"38\":1}}],[\"或者使用带\",{\"1\":{\"48\":1}}],[\"或者增加步长\",{\"1\":{\"48\":1}}],[\"或者\",{\"1\":{\"45\":1,\"114\":2}}],[\"或者也可以使用\",{\"1\":{\"41\":1}}],[\"或\",{\"1\":{\"25\":1,\"41\":1,\"45\":1,\"97\":1}}],[\"目录下的\",{\"1\":{\"25\":1}}],[\"该加载器无法直接获取\",{\"1\":{\"25\":1}}],[\"该对象的形参为\",{\"1\":{\"22\":1}}],[\"平台核心库\",{\"1\":{\"25\":1}}],[\"负责提供负载均衡和代理服务\",{\"1\":{\"87\":1}}],[\"负责管理\",{\"1\":{\"87\":1}}],[\"负责\",{\"1\":{\"25\":3}}],[\"负责对类进行初始化\",{\"1\":{\"23\":1}}],[\"编码习惯\",{\"0\":{\"112\":1}}],[\"编程规约\",{\"0\":{\"96\":1}}],[\"编译器\",{\"1\":{\"108\":1}}],[\"编译器生成\",{\"1\":{\"25\":1}}],[\"编译应用\",{\"1\":{\"41\":1}}],[\"编写的高性能的反向代理应用\",{\"1\":{\"63\":1}}],[\"编写的\",{\"1\":{\"25\":1}}],[\"解释器解释字节码内容到操作系统上\",{\"1\":{\"25\":1}}],[\"解析器优先选用标签限制的\",{\"1\":{\"48\":1}}],[\"解析\",{\"1\":{\"23\":1}}],[\"源程序\",{\"1\":{\"25\":1}}],[\"执行\",{\"1\":{\"73\":1}}],[\"执行命令\",{\"1\":{\"42\":1}}],[\"执行过程\",{\"1\":{\"25\":1}}],[\"执行类构造器\",{\"1\":{\"23\":1}}],[\"垃圾回收机制可以回收这些\",{\"1\":{\"25\":1}}],[\"缓存\",{\"1\":{\"25\":1}}],[\"然后重启系统\",{\"1\":{\"73\":1}}],[\"然后再执行构建命令\",{\"1\":{\"73\":1}}],[\"然后在\",{\"1\":{\"70\":1,\"82\":1,\"83\":1}}],[\"然后在堆中生成一个代表这个类的\",{\"1\":{\"25\":1}}],[\"然后生成一个代表这个类的\",{\"1\":{\"23\":1}}],[\"子类被加载\",{\"1\":{\"24\":1}}],[\"父类内加载\",{\"1\":{\"24\":1}}],[\"除了\",{\"1\":{\"24\":1}}],[\"先初始化\",{\"1\":{\"24\":1}}],[\"分布式\",{\"1\":{\"109\":1}}],[\"分为客户端和服务端分别称为\",{\"1\":{\"63\":1}}],[\"分号可以省略\",{\"1\":{\"40\":1}}],[\"分析类的初始化\",{\"0\":{\"24\":1}}],[\"分配内存并设置类变量默认初始值的阶段\",{\"1\":{\"23\":1}}],[\"产生一个类对应的\",{\"1\":{\"23\":1}}],[\"过程\",{\"1\":{\"23\":1}}],[\"结尾\",{\"1\":{\"97\":2}}],[\"结尾为长整型\",{\"1\":{\"45\":1}}],[\"结束即可运行\",{\"1\":{\"39\":1}}],[\"结束后\",{\"1\":{\"23\":1}}],[\"结构基本一致\",{\"1\":{\"26\":1}}],[\"结果是\",{\"1\":{\"23\":1}}],[\"结合一线开发的实践经验和故障案例\",{\"1\":{\"13\":1}}],[\"虚拟机上运行的静态类型编程语言\",{\"1\":{\"38\":1}}],[\"虚拟机会保证一个类的\",{\"1\":{\"23\":1}}],[\"虚拟机常量池内的符号引用\",{\"1\":{\"23\":1}}],[\"则会返回上层函数\",{\"1\":{\"48\":1}}],[\"则会先初始化它的父类\",{\"1\":{\"24\":1}}],[\"则需要这样\",{\"1\":{\"45\":1}}],[\"则需要先出发其父类的初始化\",{\"1\":{\"23\":1}}],[\"则加上\",{\"1\":{\"44\":1}}],[\"则系统会通过如下三个步骤来对该类进行初始化\",{\"1\":{\"23\":1}}],[\"地址\",{\"1\":{\"23\":1}}],[\"替换为直接引用\",{\"1\":{\"23\":1}}],[\"常见的文档注释内容\",{\"1\":{\"112\":1}}],[\"常见的\",{\"1\":{\"92\":1}}],[\"常见的容器运行时如下\",{\"1\":{\"87\":1}}],[\"常见\",{\"0\":{\"92\":1}}],[\"常见标签\",{\"0\":{\"60\":1}}],[\"常量定义\",{\"0\":{\"98\":1}}],[\"常量命名应该全部大写\",{\"1\":{\"97\":1}}],[\"常量\",{\"1\":{\"24\":1}}],[\"常量名\",{\"1\":{\"23\":1}}],[\"常常使用\",{\"1\":{\"19\":1}}],[\"准备\",{\"1\":{\"23\":1}}],[\"验证\",{\"1\":{\"23\":1}}],[\"初始化方法\",{\"1\":{\"23\":1}}],[\"初始化\",{\"1\":{\"23\":2}}],[\"链接\",{\"1\":{\"23\":3}}],[\"将下面的内容保存为\",{\"1\":{\"74\":1}}],[\"将下面的\",{\"1\":{\"66\":1}}],[\"将类的二进制数据合并到\",{\"1\":{\"23\":1}}],[\"将\",{\"1\":{\"23\":3,\"25\":1,\"73\":1}}],[\"加载失败则抛出异常\",{\"1\":{\"25\":1}}],[\"加载到内存\",{\"1\":{\"23\":1}}],[\"加载\",{\"1\":{\"23\":2}}],[\"加载完类之后\",{\"1\":{\"21\":1}}],[\"当要返一个回值的时候\",{\"1\":{\"48\":1}}],[\"当某个类加载器需要加载某个\",{\"1\":{\"25\":1}}],[\"当通过子类引用父类的静态变量\",{\"1\":{\"24\":1}}],[\"当访问一个静态域时\",{\"1\":{\"24\":1}}],[\"当初始化一个类\",{\"1\":{\"24\":1}}],[\"当初始化一个类的时候\",{\"1\":{\"23\":1}}],[\"当虚拟机启动\",{\"1\":{\"24\":1}}],[\"当程序主动使用某个类时\",{\"1\":{\"23\":1}}],[\"当前的最新版本是黄山版\",{\"1\":{\"13\":1}}],[\"变量方法\",{\"1\":{\"112\":1}}],[\"变量名\",{\"1\":{\"97\":1}}],[\"变量可修改\",{\"1\":{\"44\":1}}],[\"变量\",{\"1\":{\"23\":1,\"45\":1}}],[\"会自动根据上下文推断类型\",{\"1\":{\"45\":1}}],[\"会存放这个引用在堆里面的具体地址\",{\"1\":{\"23\":1}}],[\"会包含这个基本类型的具体数值\",{\"1\":{\"23\":1}}],[\"引导加载器\",{\"1\":{\"25\":1}}],[\"引导类加载器\",{\"1\":{\"25\":2}}],[\"引用类型\",{\"1\":{\"115\":1}}],[\"引用常量不会触发此类的初始化\",{\"1\":{\"24\":1}}],[\"引用对象的变量\",{\"1\":{\"23\":1}}],[\"引入需要的\",{\"1\":{\"21\":1}}],[\"栈\",{\"1\":{\"23\":1}}],[\"不要嫌名字长\",{\"1\":{\"97\":1}}],[\"不允许初始化值\",{\"1\":{\"53\":1}}],[\"不包含\",{\"1\":{\"48\":1}}],[\"不在该区间范围内\",{\"1\":{\"47\":1}}],[\"不支持\",{\"1\":{\"45\":1,\"70\":1}}],[\"不支持八进制字面值\",{\"1\":{\"45\":1}}],[\"不能直接和数字操作\",{\"1\":{\"45\":1}}],[\"不一样\",{\"1\":{\"45\":1}}],[\"不同\",{\"1\":{\"45\":1}}],[\"不同的是\",{\"1\":{\"40\":1}}],[\"不过是可选的\",{\"1\":{\"44\":1}}],[\"不过需要给定重载参数类型\",{\"1\":{\"26\":1}}],[\"不会加载任何类\",{\"1\":{\"24\":2}}],[\"不会加载\",{\"1\":{\"24\":1}}],[\"不会出发此类的初始化\",{\"1\":{\"24\":1}}],[\"不会导致子类初始化\",{\"1\":{\"24\":1}}],[\"不会\",{\"1\":{\"24\":1}}],[\"不会存放别的对象的引用\",{\"1\":{\"23\":1}}],[\"不是\",{\"1\":{\"47\":2}}],[\"不是构造该类对象的构造器\",{\"1\":{\"23\":1}}],[\"不是动态语言\",{\"1\":{\"21\":1}}],[\"存放基本变量类型\",{\"1\":{\"23\":1}}],[\"存放\",{\"1\":{\"23\":1}}],[\"堆\",{\"1\":{\"23\":1}}],[\"内部类\",{\"1\":{\"50\":1}}],[\"内部类实现\",{\"0\":{\"35\":1}}],[\"内存\",{\"1\":{\"23\":1}}],[\"内置的基本数据类型可以使用\",{\"1\":{\"22\":1}}],[\"内置注解有下面几个\",{\"1\":{\"17\":1}}],[\"内置注解\",{\"0\":{\"17\":1}}],[\"具有\",{\"1\":{\"22\":3}}],[\"空类型为\",{\"1\":{\"46\":1}}],[\"空\",{\"1\":{\"22\":1}}],[\"枚举实现\",{\"0\":{\"36\":1}}],[\"枚举类型具有\",{\"1\":{\"22\":1}}],[\"枚举\",{\"1\":{\"22\":1}}],[\"匿名内部类\",{\"1\":{\"22\":1}}],[\"静态内部类\",{\"1\":{\"22\":1}}],[\"静态语言\",{\"1\":{\"21\":1}}],[\"外部类\",{\"1\":{\"22\":1}}],[\"有哪些关键字\",{\"1\":{\"114\":1}}],[\"有哪些类型可以获得\",{\"1\":{\"22\":1}}],[\"有一些应用服务器展示了网络开发的标准\",{\"1\":{\"108\":1}}],[\"有一个\",{\"1\":{\"87\":1}}],[\"有的注解还可以添加参数\",{\"1\":{\"16\":1}}],[\"获得类的信息的操作代码\",{\"1\":{\"26\":1}}],[\"获得类的全部属性\",{\"1\":{\"26\":1}}],[\"获得类的\",{\"1\":{\"26\":1}}],[\"获得类的名字和类的属性\",{\"1\":{\"26\":1}}],[\"获得类名\",{\"1\":{\"26\":1}}],[\"获得包名\",{\"1\":{\"26\":1}}],[\"获得父类\",{\"1\":{\"22\":1}}],[\"获得\",{\"1\":{\"22\":1}}],[\"获取用户真实\",{\"1\":{\"70\":1}}],[\"获取真实\",{\"0\":{\"68\":1}}],[\"获取指定位置的字符\",{\"1\":{\"45\":1}}],[\"获取注解信息\",{\"0\":{\"30\":1}}],[\"获取泛型信息\",{\"0\":{\"29\":1}}],[\"获取方法\",{\"1\":{\"26\":1}}],[\"获取给定名称的属性\",{\"1\":{\"26\":1}}],[\"获取类的运行时结构\",{\"0\":{\"26\":1}}],[\"获取扩展加载器的父类加载器\",{\"1\":{\"25\":1}}],[\"获取系统可以加载的类的路径\",{\"1\":{\"25\":1}}],[\"获取系统加载器的父类加载器\",{\"1\":{\"25\":1}}],[\"获取系统类的加载器\",{\"1\":{\"25\":1}}],[\"获取\",{\"1\":{\"22\":3}}],[\"获取当前\",{\"1\":{\"22\":2}}],[\"老师\",{\"1\":{\"22\":1}}],[\"学生\",{\"1\":{\"22\":1}}],[\"学以精进的目标\",{\"1\":{\"13\":1}}],[\"返回值\",{\"1\":{\"46\":1}}],[\"返回值类型就是参数的类型\",{\"1\":{\"19\":1}}],[\"返回一个\",{\"1\":{\"22\":1}}],[\"返回该类的类加载器\",{\"1\":{\"22\":1}}],[\"返回此\",{\"1\":{\"22\":1}}],[\"返回\",{\"1\":{\"22\":3}}],[\"返回指定类名\",{\"1\":{\"22\":1}}],[\"功能说明\",{\"1\":{\"22\":1}}],[\"功能与注释类似\",{\"1\":{\"16\":1}}],[\"针对任何你想动态加载的类必须首先获得相应的\",{\"1\":{\"22\":1}}],[\"数值类型\",{\"1\":{\"115\":1}}],[\"数组的创建两种方式\",{\"1\":{\"45\":1}}],[\"数组用类\",{\"1\":{\"45\":1}}],[\"数组具有\",{\"1\":{\"22\":1}}],[\"数组\",{\"1\":{\"22\":2,\"115\":1}}],[\"数组类或\",{\"1\":{\"22\":2}}],[\"数据类型\",{\"0\":{\"45\":1,\"115\":1}}],[\"数据结构与集合\",{\"1\":{\"13\":1}}],[\"数据库和网络系统等\",{\"1\":{\"108\":1}}],[\"数据库\",{\"1\":{\"13\":1}}],[\"数据库的表结构和索引设计缺陷带来的系统架构缺陷或性能风险\",{\"1\":{\"13\":1}}],[\"某个类实现了哪些接口\",{\"1\":{\"22\":1}}],[\"某个类的方法\",{\"1\":{\"22\":1}}],[\"某个类的属性\",{\"1\":{\"22\":1}}],[\"理解\",{\"0\":{\"22\":1}}],[\"那么你需要在配置文件中添加对应的\",{\"1\":{\"93\":1}}],[\"那么可以通过下面的方法获得构造器\",{\"1\":{\"27\":1}}],[\"那么\",{\"1\":{\"22\":1,\"50\":1}}],[\"那么每个对象都有\",{\"1\":{\"21\":1}}],[\"那么它可以省略名称\",{\"1\":{\"19\":1}}],[\"+=\",{\"1\":{\"44\":1}}],[\"+\",{\"1\":{\"21\":6,\"22\":3,\"26\":1,\"28\":6,\"29\":1,\"30\":6,\"46\":2,\"60\":2,\"95\":1,\"117\":1}}],[\"它的\",{\"1\":{\"97\":1}}],[\"它也会定期汇报\",{\"1\":{\"87\":1}}],[\"它运行在每个\",{\"1\":{\"87\":1}}],[\"它可以实现部署有状态的\",{\"1\":{\"86\":1}}],[\"它可以实现\",{\"1\":{\"85\":1}}],[\"它可以将外部的请求转发到集群内部的\",{\"1\":{\"81\":1}}],[\"它可以轻松地进行内网穿透\",{\"1\":{\"63\":1}}],[\"它是所有类的超类\",{\"1\":{\"52\":1}}],[\"它首先把这个任务委托给他的上级类加载器\",{\"1\":{\"25\":1}}],[\"它们的顺序是\",{\"1\":{\"25\":1}}],[\"它们被用来提供对其他\",{\"1\":{\"18\":1}}],[\"它将维持加载\",{\"1\":{\"25\":1}}],[\"它保留了类的结构信息\",{\"1\":{\"21\":1}}],[\"代理的请求的真实\",{\"1\":{\"70\":1}}],[\"代理不够灵活\",{\"1\":{\"69\":1}}],[\"代理时\",{\"1\":{\"69\":1}}],[\"代理\",{\"0\":{\"69\":1,\"70\":1},\"1\":{\"69\":1}}],[\"代理可以支持更多功能\",{\"1\":{\"63\":1}}],[\"代理即可\",{\"1\":{\"63\":1}}],[\"代表一种通配符类型表达式\",{\"1\":{\"29\":1}}],[\"代表一个类\",{\"1\":{\"21\":1}}],[\"代表类的构造器\",{\"1\":{\"21\":1}}],[\"代表类的成员变量\",{\"1\":{\"21\":1}}],[\"代表类的方法\",{\"1\":{\"21\":1}}],[\"代码格式\",{\"0\":{\"99\":1}}],[\"代码和注释中都要避免使用任何人类语言中的种族歧视性或侮辱性词语\",{\"1\":{\"97\":1}}],[\"代码质量的提升是尽可能少踩坑\",{\"1\":{\"13\":1}}],[\"代码的字里行间流淌的是软件系统的血液\",{\"1\":{\"13\":1}}],[\"缺点\",{\"1\":{\"21\":1}}],[\"体现出很大的灵活性\",{\"1\":{\"21\":1}}],[\"优点\",{\"1\":{\"21\":1}}],[\"优雅性\",{\"1\":{\"13\":1}}],[\"取得本类的指定形参类型的构造器\",{\"1\":{\"27\":1}}],[\"取得实例化对象\",{\"1\":{\"21\":1}}],[\"取得任何类的内部信息\",{\"1\":{\"21\":1}}],[\"实现接口时\",{\"1\":{\"53\":1}}],[\"实现\",{\"1\":{\"30\":1,\"45\":1}}],[\"实例所生成\",{\"1\":{\"22\":1}}],[\"实例\",{\"0\":{\"22\":1,\"95\":1},\"1\":{\"22\":1}}],[\"实例化对象\",{\"1\":{\"21\":1,\"27\":1}}],[\"实例化\",{\"1\":{\"21\":1}}],[\"实际上是保障公众的人身安全\",{\"1\":{\"13\":1}}],[\"名称\",{\"1\":{\"21\":2}}],[\"包名统一使用单数形式\",{\"1\":{\"97\":1}}],[\"包名统一使用小写\",{\"1\":{\"97\":1}}],[\"包括\",{\"1\":{\"64\":1}}],[\"包含起来的\",{\"1\":{\"45\":1}}],[\"包含了所有的\",{\"1\":{\"23\":1}}],[\"包级可见的函数\",{\"1\":{\"40\":1}}],[\"包的作用\",{\"1\":{\"26\":1}}],[\"包装入工作\",{\"1\":{\"25\":1}}],[\"包装入工作库\",{\"1\":{\"25\":1}}],[\"包或者\",{\"1\":{\"25\":1}}],[\"包方法对类进行反射调用\",{\"1\":{\"24\":1}}],[\"包类\",{\"1\":{\"21\":2}}],[\"包中可以找到\",{\"1\":{\"18\":1}}],[\"正确的英文拼写和语法可以让阅读者易于理解\",{\"1\":{\"97\":1}}],[\"正式成为类变量\",{\"1\":{\"23\":1}}],[\"正常的创建对象方式\",{\"1\":{\"21\":1}}],[\"正例\",{\"1\":{\"13\":1,\"97\":7}}],[\"透过镜子看到类的结构\",{\"1\":{\"21\":1}}],[\"一种是使用函数\",{\"1\":{\"45\":1}}],[\"一样\",{\"1\":{\"44\":2,\"45\":1}}],[\"一定要熟悉\",{\"1\":{\"26\":1}}],[\"一定会发生类的初始化\",{\"1\":{\"24\":1}}],[\"一段时间\",{\"1\":{\"25\":1}}],[\"一个节点\",{\"1\":{\"78\":1}}],[\"一个类的对象\",{\"1\":{\"24\":1}}],[\"一个类只有一个\",{\"1\":{\"21\":1}}],[\"一个加载的类在\",{\"1\":{\"22\":1}}],[\"一个\",{\"1\":{\"22\":2,\"79\":2}}],[\"一般将参数命名为\",{\"1\":{\"19\":1}}],[\"反向代理\",{\"0\":{\"67\":1}}],[\"反向循环\",{\"1\":{\"48\":1}}],[\"反射操作泛型\",{\"1\":{\"29\":1}}],[\"反射相关的主要的\",{\"1\":{\"21\":1}}],[\"反射基本上解释操作\",{\"1\":{\"21\":1}}],[\"反射的优点和缺点\",{\"1\":{\"21\":1}}],[\"反射方式调用\",{\"1\":{\"28\":2}}],[\"反射方式\",{\"1\":{\"21\":1}}],[\"反射机制\",{\"1\":{\"26\":1}}],[\"反射机制允许程序执行期借助\",{\"1\":{\"21\":1}}],[\"反射机制概述\",{\"0\":{\"21\":1}}],[\"反射\",{\"1\":{\"21\":2}}],[\"反射使\",{\"1\":{\"21\":1}}],[\"反射概述\",{\"0\":{\"20\":1}}],[\"反例\",{\"1\":{\"13\":1,\"97\":7}}],[\"并持续流行了\",{\"1\":{\"108\":1}}],[\"并发处理\",{\"0\":{\"103\":1}}],[\"并发与多线程\",{\"1\":{\"13\":1}}],[\"并从\",{\"1\":{\"87\":1}}],[\"并不会经常开发\",{\"1\":{\"26\":1}}],[\"并将这些静态数据转换成方法区的运行时数据结构\",{\"1\":{\"23\":1,\"25\":1}}],[\"并创建\",{\"1\":{\"23\":1}}],[\"并且还有一个\",{\"1\":{\"45\":1}}],[\"并且一个类运行在内存中只会有一个\",{\"1\":{\"21\":1}}],[\"并且以\",{\"1\":{\"19\":1}}],[\"并能直接操作任意对象的内部属性及方法\",{\"1\":{\"21\":1}}],[\"而只使用配置文件部署\",{\"1\":{\"60\":1}}],[\"而且只能是基本类型\",{\"1\":{\"19\":1}}],[\"而是限制过度个性化\",{\"1\":{\"13\":1}}],[\"格式为\",{\"1\":{\"19\":1}}],[\"自动内存管理\",{\"1\":{\"108\":1}}],[\"自动继承了\",{\"1\":{\"19\":1}}],[\"自己才会去加载这个类\",{\"1\":{\"25\":1}}],[\"自顶向下尝试加载类\",{\"1\":{\"25\":1}}],[\"自底向上检查类是否已经被装载\",{\"1\":{\"25\":1}}],[\"自定义类加载器\",{\"1\":{\"25\":1}}],[\"自定义注解时\",{\"1\":{\"19\":1}}],[\"自定义注解\",{\"0\":{\"19\":1}}],[\"自带的类加载器\",{\"1\":{\"25\":1}}],[\"规约\",{\"0\":{\"100\":1}}],[\"规约中的建表约定第\",{\"1\":{\"97\":1}}],[\"规约依次分为\",{\"1\":{\"13\":1}}],[\"规范定义了如下类型的加载器\",{\"1\":{\"25\":1}}],[\"规范\",{\"1\":{\"23\":1}}],[\"规定作用范围是\",{\"1\":{\"18\":1}}],[\"上\",{\"1\":{\"41\":2,\"81\":1,\"87\":1}}],[\"上面的代码和下面的表结构相对应\",{\"1\":{\"30\":1}}],[\"上面的类型仅适用于方法\",{\"1\":{\"18\":1}}],[\"上可查看最新的内容\",{\"1\":{\"12\":1}}],[\"可移植性\",{\"1\":{\"109\":1}}],[\"可视同英文\",{\"1\":{\"97\":1}}],[\"可通过\",{\"1\":{\"92\":1}}],[\"可选的包头\",{\"1\":{\"40\":1}}],[\"可选值\",{\"1\":{\"18\":1}}],[\"可用任何\",{\"1\":{\"38\":1}}],[\"可能抛出\",{\"1\":{\"22\":1}}],[\"可以将敏感信息以键值对的形式保存起来\",{\"1\":{\"83\":1}}],[\"可以将配置信息以键值对的形式保存起来\",{\"1\":{\"82\":1}}],[\"可以将\",{\"1\":{\"80\":1,\"84\":1,\"85\":1,\"86\":1}}],[\"可以开启\",{\"1\":{\"70\":1}}],[\"可以查看每日的流量情况\",{\"1\":{\"63\":1}}],[\"可以直接使用\",{\"1\":{\"60\":1}}],[\"可以直接通过\",{\"1\":{\"22\":1}}],[\"可以对一个类的属性和方法进行扩展\",{\"1\":{\"54\":1}}],[\"可以把\",{\"1\":{\"47\":1}}],[\"可以表示十六进制和二进制\",{\"1\":{\"45\":1}}],[\"可以是\",{\"1\":{\"41\":1}}],[\"可以用下面的命令安装\",{\"1\":{\"41\":1}}],[\"可以这样\",{\"1\":{\"40\":1}}],[\"可以编译成\",{\"1\":{\"38\":1}}],[\"可以传\",{\"1\":{\"27\":2}}],[\"可以使用交互式解释器来执行\",{\"1\":{\"42\":1}}],[\"可以使用\",{\"1\":{\"22\":2,\"27\":1,\"45\":1,\"52\":1}}],[\"可以完整地得到一个类中的所有被加载的结构\",{\"1\":{\"22\":1}}],[\"可以实现动态创建对象和编译\",{\"1\":{\"21\":1}}],[\"可以被所有的线程共享\",{\"1\":{\"23\":2}}],[\"可以被称为准动态语言\",{\"1\":{\"21\":1}}],[\"可以被其他程序读取\",{\"1\":{\"16\":1}}],[\"可以在运行时改变其结构的语言\",{\"1\":{\"21\":1}}],[\"可以通过浏览器访问管理界面\",{\"1\":{\"63\":1}}],[\"可以通过\",{\"1\":{\"19\":1,\"22\":1,\"69\":1,\"70\":1}}],[\"可以选择多个\",{\"1\":{\"17\":1}}],[\"这是引用类型和值类型的比较问题\",{\"1\":{\"117\":1}}],[\"这是我们的几个类\",{\"1\":{\"22\":1}}],[\"这里使用的环境为\",{\"1\":{\"111\":1}}],[\"这里选择\",{\"1\":{\"72\":1}}],[\"这样可以实现应用程序的解耦和扩展\",{\"1\":{\"79\":1}}],[\"这样为空时将抛出空指针异常\",{\"1\":{\"44\":1}}],[\"这意味着一个\",{\"1\":{\"79\":1}}],[\"这意味着在不进行显式转换的情况下我们不能把\",{\"1\":{\"45\":1}}],[\"这也可以指定\",{\"1\":{\"45\":1}}],[\"这也是推荐的写法\",{\"1\":{\"45\":1}}],[\"这种方法最可靠且最快\",{\"1\":{\"22\":1}}],[\"这些是体积最小的镜像\",{\"1\":{\"60\":1}}],[\"这些内存都将在方法区进行分配\",{\"1\":{\"23\":1}}],[\"这些操作总是慢于直接执行相同的操作\",{\"1\":{\"21\":1}}],[\"这些类型和它们所支持的类在\",{\"1\":{\"18\":1}}],[\"这个服务可以通过\",{\"1\":{\"80\":1}}],[\"这个人是\",{\"1\":{\"22\":1}}],[\"这个对象就像一面镜子\",{\"1\":{\"21\":1}}],[\"这个对象就包含了完整的类的结构信息\",{\"1\":{\"21\":1}}],[\"这个静态语言获得了动态特性\",{\"1\":{\"21\":1}}],[\"这个时候程序会报错\",{\"1\":{\"17\":1}}],[\"404\",{\"1\":{\"118\":1}}],[\"4090\",{\"1\":{\"64\":2,\"65\":2,\"66\":3,\"70\":3}}],[\"42\",{\"1\":{\"48\":1}}],[\"4554617c\",{\"1\":{\"25\":1}}],[\"4\",{\"0\":{\"19\":1,\"24\":1,\"36\":1,\"41\":1,\"47\":1,\"53\":1,\"81\":1,\"100\":1,\"111\":1},\"1\":{\"18\":1,\"45\":2,\"46\":1,\"48\":2,\"115\":2}}],[\"定义为布尔类型\",{\"1\":{\"97\":1}}],[\"定义整形数组\",{\"1\":{\"97\":1}}],[\"定义常量\",{\"1\":{\"44\":1}}],[\"定义变量\",{\"1\":{\"44\":1}}],[\"定义了\",{\"1\":{\"18\":1}}],[\"定义在\",{\"1\":{\"17\":3}}],[\"元注解负责解释其他注解\",{\"1\":{\"18\":1}}],[\"元注解\",{\"0\":{\"18\":1}}],[\"30\",{\"1\":{\"108\":1}}],[\"300\",{\"1\":{\"23\":2,\"24\":1}}],[\"31\",{\"1\":{\"73\":1}}],[\"32\",{\"1\":{\"45\":2}}],[\"3\",{\"0\":{\"18\":1,\"23\":1,\"35\":1,\"40\":1,\"46\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":2,\"53\":1,\"54\":1,\"74\":1,\"80\":1,\"99\":1,\"110\":1,\"116\":1},\"1\":{\"30\":2,\"45\":4,\"46\":1,\"48\":1,\"61\":2,\"65\":1,\"66\":1,\"97\":1}}],[\"36\",{\"1\":{\"13\":1}}],[\"但直到\",{\"1\":{\"108\":1}}],[\"但必须在构造函数中初始化\",{\"1\":{\"51\":1}}],[\"但必须满足\",{\"1\":{\"27\":1}}],[\"但是类名如果有复数含义\",{\"1\":{\"97\":1}}],[\"但是由于\",{\"1\":{\"69\":1}}],[\"但是需要配置更多参数\",{\"1\":{\"63\":1}}],[\"但是\",{\"1\":{\"45\":2,\"46\":1}}],[\"但是不是对象的实例也可以表示为\",{\"1\":{\"44\":1}}],[\"但是不小心将方法写成\",{\"1\":{\"17\":1}}],[\"但是一旦编译完成\",{\"1\":{\"29\":1}}],[\"但一旦某个类被加载到类加载器中\",{\"1\":{\"25\":1}}],[\"但\",{\"1\":{\"21\":1}}],[\"但可以对程序做出解释\",{\"1\":{\"16\":1}}],[\"如何取得属性\",{\"1\":{\"26\":1}}],[\"如何高效地协同呢\",{\"1\":{\"13\":1}}],[\"如果配置不正确\",{\"1\":{\"93\":1}}],[\"如果你的网站使用了\",{\"1\":{\"93\":1}}],[\"如果你想要通过索引遍历一个数组或者一个\",{\"1\":{\"48\":1}}],[\"如果一个类要被继承\",{\"1\":{\"52\":1}}],[\"如果主构造器没有任何注解\",{\"1\":{\"50\":1}}],[\"如果有多个\",{\"1\":{\"48\":1}}],[\"如果只返回\",{\"1\":{\"48\":1}}],[\"如果只有一个参数成员\",{\"1\":{\"19\":1}}],[\"如果在\",{\"1\":{\"48\":1}}],[\"如果返回值为空可以省略\",{\"1\":{\"46\":1}}],[\"如果需要\",{\"1\":{\"93\":1}}],[\"如果需要表示\",{\"1\":{\"45\":1}}],[\"如果需要断言为非空则使用\",{\"1\":{\"44\":1}}],[\"如果需要对象为空时保留空\",{\"1\":{\"44\":1}}],[\"如果不存在则重定向到根目录下的\",{\"1\":{\"95\":1}}],[\"如果不存在就重定向到二级目录下的\",{\"1\":{\"95\":1}}],[\"如果不需要任何插件或扩展\",{\"1\":{\"60\":1}}],[\"如果不在声明时初始化则必须提供变量类型\",{\"1\":{\"44\":1}}],[\"如果不包含最后一个可以\",{\"1\":{\"48\":1}}],[\"如果不包含\",{\"1\":{\"41\":1}}],[\"如果您习惯面向对象\",{\"1\":{\"40\":1}}],[\"如果您在开发安卓也可以直接使用\",{\"1\":{\"39\":1}}],[\"如果类没有无参构造器\",{\"1\":{\"27\":1}}],[\"如果父类或启动类加载器不能加载\",{\"1\":{\"25\":1}}],[\"如果父类没有被初始化\",{\"1\":{\"24\":1}}],[\"如果没有参数需要传入\",{\"1\":{\"26\":1}}],[\"如果没有\",{\"1\":{\"25\":1}}],[\"如果上级的类加载器没有加载\",{\"1\":{\"25\":1}}],[\"如果发现其父类还没有进行初始化\",{\"1\":{\"23\":1}}],[\"如果该类还没有加载到内存中\",{\"1\":{\"23\":1}}],[\"如果注解只有一个值\",{\"1\":{\"19\":1}}],[\"如果此时有\",{\"1\":{\"17\":1}}],[\"如果我们想重写\",{\"1\":{\"17\":1}}],[\"未检查的\",{\"1\":{\"17\":1}}],[\"抑制全部警告\",{\"1\":{\"17\":1}}],[\"用户界面工具包\",{\"1\":{\"110\":1}}],[\"用\",{\"1\":{\"25\":1}}],[\"用来代替大量的\",{\"1\":{\"47\":1}}],[\"用来设置编译输出的名称\",{\"1\":{\"41\":1}}],[\"用来装载核心类库\",{\"1\":{\"25\":1}}],[\"用来声明一个注解\",{\"1\":{\"19\":1}}],[\"用来抑制编译时的警告信息\",{\"1\":{\"17\":1}}],[\"用于客户端连接的端口\",{\"1\":{\"66\":1}}],[\"用于提供代理服务\",{\"1\":{\"66\":1}}],[\"用于包声明\",{\"1\":{\"44\":1}}],[\"用于关闭权限检查\",{\"1\":{\"27\":1}}],[\"用于描述注解的生命周期\",{\"1\":{\"18\":1}}],[\"用于表述注解的使用范围\",{\"1\":{\"18\":1}}],[\"用于构建\",{\"1\":{\"9\":1}}],[\"通用编程语言\",{\"1\":{\"108\":1}}],[\"通常还需要三个组件\",{\"1\":{\"87\":1}}],[\"通常不含有其他依赖\",{\"1\":{\"60\":1}}],[\"通常是因为危险或存在更好的选择\",{\"1\":{\"17\":1}}],[\"通过指定\",{\"1\":{\"70\":1}}],[\"通过反射直接操作属性\",{\"1\":{\"27\":1}}],[\"通过反射也可以调用一个普通方法\",{\"1\":{\"27\":1}}],[\"通过反射创建对象\",{\"1\":{\"27\":1}}],[\"通过反射获得注解可以极大地提高程序的灵活性\",{\"1\":{\"15\":1}}],[\"通过数组定义类的引用\",{\"1\":{\"24\":1}}],[\"通过对象获得\",{\"1\":{\"22\":1}}],[\"通过类获得\",{\"1\":{\"22\":1}}],[\"通过\",{\"1\":{\"21\":1,\"22\":3,\"27\":2}}],[\"通过注解\",{\"1\":{\"15\":1}}],[\"类中的任何布尔类型的变量\",{\"1\":{\"97\":1}}],[\"类中的类型但是又和原始类型齐名的类型\",{\"1\":{\"29\":1}}],[\"类似\",{\"1\":{\"53\":1}}],[\"类似于\",{\"1\":{\"44\":2,\"45\":4,\"47\":1,\"48\":2}}],[\"类可以包含\",{\"1\":{\"50\":1}}],[\"类和表结构对应\",{\"1\":{\"30\":1}}],[\"类必须有一个无参构造器\",{\"1\":{\"27\":1}}],[\"类名可遵循驼峰命名\",{\"1\":{\"112\":1}}],[\"类名可以使用复数形式\",{\"1\":{\"97\":1}}],[\"类名为\",{\"1\":{\"97\":1}}],[\"类名使用\",{\"1\":{\"97\":1}}],[\"类名\",{\"1\":{\"26\":1}}],[\"类装载器装载字节码文件\",{\"1\":{\"25\":1}}],[\"类缓存\",{\"1\":{\"25\":1}}],[\"类加载的作用\",{\"1\":{\"25\":1}}],[\"类加载器可以按要求查找类\",{\"1\":{\"25\":1}}],[\"类加载器的作用是把类装载进内存\",{\"1\":{\"25\":1}}],[\"类加载器的作用\",{\"1\":{\"25\":1}}],[\"类加载器\",{\"0\":{\"25\":1}}],[\"类构造器是构造类的信息的\",{\"1\":{\"23\":1}}],[\"类构造器\",{\"1\":{\"23\":1}}],[\"类的属性可以用关键字\",{\"1\":{\"50\":1}}],[\"类的构造器的访问权限需要足够\",{\"1\":{\"27\":1}}],[\"类的被动引用\",{\"1\":{\"24\":1}}],[\"类的主动引用时\",{\"1\":{\"24\":1}}],[\"类的无参构造初始化\",{\"1\":{\"23\":2}}],[\"类的静态代码块初始化\",{\"1\":{\"23\":2}}],[\"类的二进制代码合并到\",{\"1\":{\"23\":1}}],[\"类的\",{\"1\":{\"23\":3,\"27\":1}}],[\"类的加载过程\",{\"1\":{\"23\":1}}],[\"类的加载与\",{\"0\":{\"23\":1},\"1\":{\"23\":1}}],[\"类的实例有几种方法\",{\"1\":{\"22\":1}}],[\"类具有\",{\"1\":{\"22\":1}}],[\"类是\",{\"1\":{\"22\":1}}],[\"类并获取\",{\"0\":{\"22\":1}}],[\"类被每一个类继承\",{\"1\":{\"21\":1}}],[\"类内有一个方法\",{\"1\":{\"21\":1}}],[\"类型示例\",{\"1\":{\"117\":1}}],[\"类型安全\",{\"1\":{\"108\":1}}],[\"类型与中括号紧挨相连来定义数组\",{\"1\":{\"97\":1}}],[\"类型已经被默认支持\",{\"1\":{\"93\":1}}],[\"类型为\",{\"1\":{\"51\":3}}],[\"类型推断支持不写返回值类型\",{\"1\":{\"46\":1}}],[\"类型转换\",{\"0\":{\"116\":1},\"1\":{\"45\":1}}],[\"类型使用\",{\"1\":{\"45\":1}}],[\"类型的对象\",{\"1\":{\"21\":1,\"22\":1}}],[\"类型作说明\",{\"1\":{\"18\":1}}],[\"类型\",{\"0\":{\"91\":1,\"92\":1},\"1\":{\"18\":1,\"44\":1,\"45\":1,\"92\":2,\"93\":1,\"115\":1}}],[\"类\",{\"0\":{\"50\":1},\"1\":{\"17\":1,\"22\":2,\"24\":1,\"52\":1,\"115\":1}}],[\"类继承了\",{\"1\":{\"16\":1}}],[\"属性支持\",{\"1\":{\"51\":1}}],[\"属性及\",{\"1\":{\"45\":1}}],[\"属性和字段对应\",{\"1\":{\"30\":1}}],[\"属性获得\",{\"1\":{\"22\":1}}],[\"属性获取\",{\"1\":{\"22\":2}}],[\"属性\",{\"0\":{\"51\":1},\"1\":{\"17\":1,\"22\":1,\"26\":1,\"50\":1}}],[\"表达是与否的变量采用\",{\"1\":{\"97\":1}}],[\"表达式类似于类\",{\"1\":{\"47\":1}}],[\"表达式作为函数体\",{\"1\":{\"46\":1}}],[\"表示\",{\"1\":{\"112\":1}}],[\"表示其他情况\",{\"1\":{\"47\":1}}],[\"表示比较对象的值是否相等\",{\"1\":{\"45\":1}}],[\"表示比较对象地址是否相等\",{\"1\":{\"45\":1}}],[\"表示任何类型\",{\"1\":{\"44\":1}}],[\"表示一种元素类型是参数化类型或者类型变量的数组类型\",{\"1\":{\"29\":1}}],[\"表示一种参数化类型\",{\"1\":{\"29\":1}}],[\"表示一个方法重写父类的另一个方法\",{\"1\":{\"17\":1}}],[\"表示我们的注解在哪些地方有效\",{\"1\":{\"18\":1}}],[\"表示需要在什么级别保存该注释信息\",{\"1\":{\"18\":1}}],[\"表示不鼓励程序员使用这样的元素\",{\"1\":{\"17\":1}}],[\"表胜于言\",{\"1\":{\"13\":1}}],[\"此规则参考\",{\"1\":{\"97\":1}}],[\"此功能支持所有以\",{\"1\":{\"70\":1}}],[\"此处直接使用\",{\"1\":{\"65\":1}}],[\"此时\",{\"1\":{\"56\":1}}],[\"此时参数名可以省略\",{\"1\":{\"19\":1}}],[\"此过程由类加载器完成\",{\"1\":{\"23\":1}}],[\"此注释用于修饰方法\",{\"1\":{\"17\":1}}],[\"此注解只适用于修饰方法\",{\"1\":{\"17\":1}}],[\"此外\",{\"1\":{\"13\":1}}],[\"中获取\",{\"1\":{\"87\":1}}],[\"中使用\",{\"0\":{\"55\":1},\"1\":{\"82\":1,\"83\":1}}],[\"中所有类都继承该\",{\"1\":{\"52\":1}}],[\"中文文档\",{\"1\":{\"38\":1}}],[\"中的数据持久化到磁盘上\",{\"1\":{\"84\":1}}],[\"中的类可以有一个\",{\"1\":{\"50\":1}}],[\"中的\",{\"1\":{\"45\":1}}],[\"中的泛型仅仅是给编译器\",{\"1\":{\"29\":1}}],[\"中的一个\",{\"1\":{\"22\":1}}],[\"中只有一个\",{\"1\":{\"22\":1}}],[\"中\",{\"1\":{\"17\":3,\"18\":1,\"23\":1,\"38\":1,\"45\":1}}],[\"l\",{\"1\":{\"45\":1}}],[\"length\",{\"1\":{\"30\":5,\"45\":3}}],[\"later\",{\"1\":{\"73\":2}}],[\"latest\",{\"1\":{\"60\":1}}],[\"last\",{\"1\":{\"70\":1,\"95\":1}}],[\"lambda\",{\"1\":{\"45\":1,\"48\":2}}],[\"lazysingleton\",{\"1\":{\"33\":10}}],[\"lazysingletontest\",{\"1\":{\"33\":1}}],[\"launcher$extclassloader\",{\"1\":{\"25\":1}}],[\"launcher$appclassloader\",{\"1\":{\"25\":1}}],[\"lang\",{\"1\":{\"16\":1,\"17\":3,\"18\":7,\"19\":1,\"21\":5,\"23\":2,\"24\":1,\"25\":2,\"26\":1,\"29\":3,\"35\":2,\"36\":2,\"110\":1}}],[\"like\",{\"1\":{\"56\":1}}],[\"lit\",{\"1\":{\"48\":2}}],[\"linux\",{\"1\":{\"41\":1,\"73\":1}}],[\"link\",{\"1\":{\"23\":1}}],[\"lib\",{\"1\":{\"25\":1}}],[\"listen\",{\"1\":{\"70\":2,\"95\":1}}],[\"listof\",{\"1\":{\"48\":1}}],[\"listfiles\",{\"1\":{\"42\":1}}],[\"list<top\",{\"1\":{\"29\":1}}],[\"list<user>\",{\"1\":{\"29\":1}}],[\"list\",{\"1\":{\"9\":4,\"29\":2,\"42\":1,\"48\":1}}],[\"lowercamelcase\",{\"1\":{\"97\":1}}],[\"location\",{\"1\":{\"70\":4,\"95\":2}}],[\"localvalue\",{\"1\":{\"97\":1}}],[\"localhost\",{\"1\":{\"73\":1,\"74\":1}}],[\"localtime\",{\"1\":{\"65\":2,\"66\":2}}],[\"localport\",{\"1\":{\"65\":1,\"70\":1}}],[\"localip\",{\"1\":{\"65\":1,\"70\":1}}],[\"logging\",{\"1\":{\"65\":1,\"66\":1,\"110\":1}}],[\"log\",{\"1\":{\"56\":2}}],[\"long\",{\"1\":{\"28\":6,\"45\":2,\"115\":1}}],[\"loadclass\",{\"1\":{\"25\":2}}],[\"load\",{\"1\":{\"23\":1,\"93\":1}}],[\"loval\",{\"1\":{\"17\":1}}],[\"我们再看下面的\",{\"1\":{\"117\":1}}],[\"我们先说说\",{\"1\":{\"108\":1}}],[\"我们一般直接使用\",{\"1\":{\"69\":1}}],[\"我们下面对比几种方法的执行效率\",{\"1\":{\"28\":1}}],[\"我们也可以测试一个类是由哪个加载器加载的\",{\"1\":{\"25\":1}}],[\"我们知道\",{\"1\":{\"21\":1}}],[\"我们通过反射获取这个类\",{\"1\":{\"21\":1}}],[\"我们定义注解元素时\",{\"1\":{\"19\":1}}],[\"我们可以测试\",{\"1\":{\"111\":1}}],[\"我们可以看到\",{\"1\":{\"25\":1}}],[\"我们可以看一下\",{\"1\":{\"17\":1}}],[\"我们可以通过这个对象看到类的结构\",{\"1\":{\"21\":1}}],[\"我们可以通过反射机制编程实现对这些元数据的访问\",{\"1\":{\"16\":1}}],[\"我们还知道\",{\"1\":{\"16\":1}}],[\"f2\",{\"1\":{\"117\":2}}],[\"f1\",{\"1\":{\"117\":3}}],[\"fw\",{\"1\":{\"97\":1}}],[\"features\",{\"1\":{\"70\":1}}],[\"frps\",{\"1\":{\"63\":1,\"64\":2,\"66\":10}}],[\"frpc\",{\"1\":{\"63\":1,\"64\":2,\"65\":7}}],[\"frp\",{\"0\":{\"62\":1,\"63\":1,\"67\":1,\"68\":1},\"1\":{\"63\":4,\"64\":1,\"65\":7,\"66\":11,\"70\":6}}],[\"from=builder\",{\"1\":{\"74\":1}}],[\"from\",{\"1\":{\"9\":1,\"61\":1,\"74\":2}}],[\"f\",{\"1\":{\"45\":2,\"117\":2}}],[\"float\",{\"1\":{\"45\":3,\"115\":1,\"117\":3}}],[\"found\",{\"1\":{\"118\":1}}],[\"font\",{\"1\":{\"92\":6}}],[\"foo\",{\"1\":{\"48\":3,\"53\":2}}],[\"folder\",{\"1\":{\"42\":3}}],[\"folders\",{\"1\":{\"42\":3}}],[\"forcecode\",{\"1\":{\"97\":2}}],[\"forwarded\",{\"1\":{\"69\":1,\"70\":2}}],[\"format\",{\"1\":{\"56\":1}}],[\"foreach\",{\"1\":{\"42\":1,\"48\":2}}],[\"for\",{\"1\":{\"26\":3,\"28\":3,\"29\":3,\"30\":1,\"45\":1,\"46\":1,\"48\":10,\"69\":1,\"70\":2,\"73\":1}}],[\"forname\",{\"1\":{\"21\":2,\"22\":5,\"24\":1,\"25\":1,\"26\":2,\"27\":3,\"30\":1}}],[\"functionname\",{\"1\":{\"54\":1}}],[\"functionalinterface\",{\"1\":{\"16\":1}}],[\"fun\",{\"1\":{\"40\":3,\"45\":3,\"46\":4,\"47\":3,\"48\":8,\"53\":2,\"54\":1}}],[\"failed\",{\"1\":{\"93\":1}}],[\"fatedier\",{\"1\":{\"63\":1}}],[\"father\",{\"1\":{\"24\":2}}],[\"false\",{\"1\":{\"21\":1,\"25\":1,\"57\":1,\"117\":2}}],[\"filter\",{\"1\":{\"57\":2}}],[\"files\",{\"0\":{\"94\":1},\"1\":{\"70\":1,\"73\":1,\"95\":2}}],[\"file\",{\"1\":{\"42\":4,\"65\":1,\"66\":1}}],[\"firstname\",{\"1\":{\"50\":2}}],[\"fine\",{\"1\":{\"47\":1}}],[\"findclass\",{\"1\":{\"25\":1}}],[\"findbootstrapclassornull\",{\"1\":{\"25\":1}}],[\"findloadedclass\",{\"1\":{\"25\":1}}],[\"final\",{\"1\":{\"21\":1,\"24\":2}}],[\"fields\",{\"1\":{\"26\":3}}],[\"field\",{\"1\":{\"16\":1,\"17\":1,\"21\":1,\"22\":2,\"26\":5,\"27\":2,\"30\":4}}],[\"在命令行编译并运行\",{\"1\":{\"111\":1}}],[\"在一个节点上我们可以运行一个或多个\",{\"1\":{\"78\":1}}],[\"在该区间范围内\",{\"1\":{\"47\":1}}],[\"在区间内\",{\"1\":{\"47\":1}}],[\"在线运行工具\",{\"1\":{\"38\":1}}],[\"在\",{\"1\":{\"38\":1,\"41\":1,\"45\":1,\"70\":1,\"73\":1,\"93\":1,\"97\":1,\"108\":1}}],[\"在调用\",{\"1\":{\"27\":1}}],[\"在实际操作中\",{\"1\":{\"26\":1}}],[\"在堆内存的方法区中就产生了一个\",{\"1\":{\"21\":1}}],[\"在运行时不能改变其结构\",{\"1\":{\"21\":1}}],[\"在哪里使用\",{\"1\":{\"16\":1}}],[\"在延伸的信息中\",{\"1\":{\"13\":1}}],[\"===\",{\"1\":{\"45\":1}}],[\"==\",{\"1\":{\"21\":4,\"25\":1,\"33\":2,\"34\":1,\"35\":3,\"36\":1,\"45\":1,\"47\":6,\"48\":2,\"117\":4}}],[\"=\",{\"1\":{\"16\":1,\"19\":1,\"21\":10,\"22\":21,\"23\":6,\"24\":6,\"25\":7,\"26\":8,\"27\":10,\"28\":16,\"29\":6,\"30\":22,\"33\":3,\"34\":3,\"35\":7,\"36\":3,\"42\":1,\"44\":6,\"45\":6,\"46\":1,\"47\":9,\"48\":2,\"50\":4,\"51\":3,\"53\":1,\"56\":2,\"57\":14,\"65\":7,\"66\":6,\"70\":8,\"97\":1,\"112\":1,\"117\":8}}],[\"vm\",{\"1\":{\"110\":1}}],[\"virtual\",{\"1\":{\"110\":1}}],[\"visualvm\",{\"1\":{\"110\":1}}],[\"visual\",{\"1\":{\"73\":3}}],[\"vcvars64\",{\"1\":{\"73\":2}}],[\"vc\",{\"1\":{\"73\":1}}],[\"v2\",{\"1\":{\"70\":1}}],[\"versioning\",{\"1\":{\"110\":1}}],[\"version\",{\"1\":{\"65\":1,\"66\":1,\"73\":2}}],[\"v1\",{\"1\":{\"57\":1}}],[\"vt\",{\"1\":{\"46\":2}}],[\"v\",{\"1\":{\"46\":2}}],[\"vo\",{\"1\":{\"97\":1}}],[\"volume\",{\"0\":{\"84\":1},\"1\":{\"84\":1}}],[\"volumes\",{\"1\":{\"65\":1,\"66\":1}}],[\"volatile\",{\"1\":{\"33\":1}}],[\"void\",{\"1\":{\"16\":3,\"18\":1,\"19\":2,\"21\":4,\"22\":6,\"23\":1,\"24\":1,\"25\":2,\"26\":2,\"28\":4,\"29\":2,\"30\":4,\"33\":1,\"34\":1,\"35\":1,\"36\":2,\"111\":1,\"117\":2}}],[\"val\",{\"1\":{\"40\":1,\"42\":1,\"44\":5,\"45\":6,\"47\":4,\"48\":2,\"50\":2,\"51\":2}}],[\"value\",{\"1\":{\"17\":1,\"19\":3,\"30\":5,\"48\":4}}],[\"value=\",{\"1\":{\"16\":1,\"17\":1}}],[\"vararg\",{\"1\":{\"46\":1}}],[\"vars\",{\"1\":{\"46\":2}}],[\"var\",{\"1\":{\"44\":3,\"47\":3,\"50\":4,\"51\":3,\"53\":2}}],[\"varchar\",{\"1\":{\"30\":2}}],[\"variables\",{\"1\":{\"56\":1}}],[\"variable\",{\"1\":{\"17\":1}}],[\"开始\",{\"1\":{\"114\":1}}],[\"开始引入的新技术\",{\"1\":{\"16\":1}}],[\"开头\",{\"1\":{\"97\":1}}],[\"开发工具\",{\"1\":{\"108\":1}}],[\"开发\",{\"1\":{\"39\":1,\"108\":1}}],[\"开发环境\",{\"0\":{\"39\":1}}],[\"开发规约\",{\"1\":{\"13\":1}}],[\"开发者为中心视角\",{\"1\":{\"13\":1}}],[\"开发手册\",{\"0\":{\"11\":1},\"1\":{\"12\":1,\"13\":2}}],[\"57\",{\"1\":{\"65\":1,\"66\":1}}],[\"5f\",{\"1\":{\"45\":1}}],[\"5699ms\",{\"1\":{\"28\":1}}],[\"5\",{\"0\":{\"25\":1,\"42\":1,\"48\":1,\"54\":1,\"82\":1,\"101\":1,\"112\":1},\"1\":{\"16\":1,\"24\":1,\"44\":1,\"46\":1,\"47\":1,\"57\":1}}],[\"其他基准库\",{\"1\":{\"110\":1}}],[\"其\",{\"1\":{\"63\":1}}],[\"其中\",{\"1\":{\"27\":1}}],[\"其中的每一个方法实际上是声明了一个配置参数\",{\"1\":{\"19\":1}}],[\"其底层就是一个个注解和反射\",{\"1\":{\"15\":1}}],[\"其它维度的知识点也会影响到软件的最终交付质量\",{\"1\":{\"13\":1}}],[\"狂神说\",{\"1\":{\"14\":1}}],[\"希望用技术情怀帮助到更多的人\",{\"1\":{\"13\":1}}],[\"稿费所得收入均捐赠公益事情\",{\"1\":{\"13\":1}}],[\"版本\",{\"1\":{\"39\":1}}],[\"版本号\",{\"1\":{\"12\":1}}],[\"版\",{\"1\":{\"13\":1}}],[\"第\",{\"1\":{\"13\":1}}],[\"和容器\",{\"1\":{\"87\":1}}],[\"和容器运行时\",{\"1\":{\"87\":1}}],[\"和端口访问到\",{\"1\":{\"80\":1}}],[\"和多行的注释\",{\"1\":{\"44\":1}}],[\"和类\",{\"1\":{\"44\":1}}],[\"和浏览器的现有库\",{\"1\":{\"38\":1}}],[\"和静态方法\",{\"1\":{\"24\":1}}],[\"和\",{\"1\":{\"13\":1,\"23\":1,\"29\":1,\"40\":1,\"44\":2,\"45\":6,\"48\":2,\"51\":3,\"63\":1,\"64\":1,\"70\":1}}],[\"娓娓道来\",{\"1\":{\"13\":1}}],[\"与\",{\"1\":{\"45\":1}}],[\"与底层源码解析融会贯通\",{\"1\":{\"13\":1}}],[\"与云网关\",{\"0\":{\"6\":1}}],[\"本文\",{\"1\":{\"97\":1}}],[\"本文参考了\",{\"1\":{\"71\":1}}],[\"本文是\",{\"1\":{\"14\":1}}],[\"本地程序地址\",{\"1\":{\"65\":1}}],[\"本章将通过一个练习\",{\"1\":{\"30\":1}}],[\"本身也是一个类\",{\"1\":{\"22\":1}}],[\"本书紧扣学以致用\",{\"1\":{\"13\":1}}],[\"本系列全部摘录了\",{\"1\":{\"12\":1}}],[\"探源与内存分析\",{\"1\":{\"13\":1}}],[\"jni\",{\"1\":{\"110\":1}}],[\"jndi\",{\"1\":{\"110\":1}}],[\"jmx\",{\"1\":{\"110\":1}}],[\"jconsole\",{\"1\":{\"110\":1}}],[\"jbuilder\",{\"1\":{\"108\":1}}],[\"jboss\",{\"1\":{\"108\":1}}],[\"jetty\",{\"1\":{\"108\":1}}],[\"jetbrains\",{\"1\":{\"38\":1}}],[\"jekins\",{\"1\":{\"108\":1}}],[\"jpda\",{\"1\":{\"110\":1}}],[\"jpeg\",{\"1\":{\"92\":3}}],[\"jpg\",{\"1\":{\"92\":1}}],[\"js\",{\"1\":{\"92\":1}}],[\"json\",{\"1\":{\"65\":1,\"66\":1,\"92\":3}}],[\"jibber\",{\"1\":{\"73\":2,\"74\":4}}],[\"jiangsu\",{\"1\":{\"50\":1}}],[\"jdbc\",{\"1\":{\"57\":1,\"110\":1}}],[\"jdk\",{\"1\":{\"16\":1,\"39\":1,\"73\":3,\"110\":1,\"112\":1}}],[\"juicy\",{\"1\":{\"47\":1}}],[\"jre\",{\"1\":{\"22\":1,\"23\":1,\"25\":1,\"110\":1}}],[\"jvm\",{\"1\":{\"13\":1,\"22\":2,\"23\":3,\"25\":3,\"38\":2,\"42\":1,\"110\":3}}],[\"jaxp\",{\"1\":{\"110\":1}}],[\"jar\",{\"1\":{\"25\":3,\"41\":4,\"110\":2}}],[\"jammy\",{\"1\":{\"9\":4}}],[\"javap\",{\"1\":{\"110\":1}}],[\"javac\",{\"1\":{\"29\":1,\"110\":1,\"111\":1}}],[\"javase\",{\"1\":{\"25\":1}}],[\"javascript\",{\"1\":{\"21\":1,\"38\":1,\"44\":1,\"45\":2,\"92\":2,\"93\":1}}],[\"javabean\",{\"1\":{\"21\":1}}],[\"javadoc\",{\"1\":{\"18\":1,\"110\":1}}],[\"java\",{\"0\":{\"2\":1,\"11\":1,\"14\":1,\"31\":1,\"107\":1,\"113\":1,\"114\":1},\"1\":{\"12\":2,\"13\":5,\"14\":1,\"16\":1,\"17\":3,\"18\":8,\"19\":1,\"21\":13,\"23\":5,\"24\":1,\"25\":10,\"26\":1,\"29\":7,\"35\":2,\"36\":2,\"38\":3,\"39\":2,\"40\":1,\"42\":1,\"44\":2,\"45\":4,\"53\":1,\"72\":1,\"73\":1,\"108\":7,\"109\":1,\"110\":11,\"111\":4,\"112\":1,\"114\":2,\"115\":2}}],[\"深入浅出地将计算机基础\",{\"1\":{\"13\":1}}],[\"的数据分为两大类\",{\"1\":{\"115\":1}}],[\"的数字支持下划线分割\",{\"1\":{\"112\":1}}],[\"的任何字符组合\",{\"1\":{\"114\":1}}],[\"的特性和优势\",{\"1\":{\"109\":1}}],[\"的平台和中间件\",{\"1\":{\"108\":1}}],[\"的一些特征晦涩难懂\",{\"1\":{\"108\":1}}],[\"的一个核心组件\",{\"1\":{\"87\":2}}],[\"的框架结构\",{\"1\":{\"97\":1}}],[\"的字段\",{\"1\":{\"97\":1}}],[\"的字符集修改为\",{\"1\":{\"73\":1}}],[\"的映射关系\",{\"1\":{\"97\":1}}],[\"的命名方式\",{\"1\":{\"97\":1}}],[\"的调度更新信息\",{\"1\":{\"87\":1}}],[\"的状态\",{\"1\":{\"87\":1}}],[\"的滚动升级和回滚\",{\"1\":{\"85\":1}}],[\"的匿名函数\",{\"1\":{\"48\":1}}],[\"的运算符\",{\"1\":{\"45\":1}}],[\"的运行状态之中\",{\"1\":{\"23\":1}}],[\"的位运算符也和\",{\"1\":{\"45\":1}}],[\"的关键字\",{\"1\":{\"44\":1}}],[\"的设备上运行\",{\"1\":{\"38\":1}}],[\"的双亲委派机制\",{\"1\":{\"25\":1}}],[\"的过程\",{\"1\":{\"23\":1}}],[\"的理解\",{\"1\":{\"23\":1}}],[\"的理念\",{\"1\":{\"13\":1}}],[\"的对象和数组\",{\"1\":{\"23\":1}}],[\"的内存分析\",{\"1\":{\"23\":1}}],[\"的内容\",{\"1\":{\"12\":1}}],[\"的名称\",{\"1\":{\"22\":1}}],[\"的根源\",{\"1\":{\"22\":1}}],[\"的有关的信息\",{\"1\":{\"22\":1}}],[\"的\",{\"1\":{\"21\":1,\"22\":1,\"45\":1,\"47\":2,\"48\":2,\"80\":1,\"108\":1}}],[\"的动态性可以让编程的时候更加灵活\",{\"1\":{\"21\":1}}],[\"的原型\",{\"1\":{\"17\":1}}],[\"的格式可以读取环境变量\",{\"1\":{\"64\":1}}],[\"的格式\",{\"1\":{\"16\":1}}],[\"的作用\",{\"1\":{\"16\":1}}],[\"的学习笔记\",{\"1\":{\"14\":1}}],[\"秉持\",{\"1\":{\"13\":1}}],[\"码出高效\",{\"1\":{\"13\":2}}],[\"码出质量\",{\"1\":{\"13\":2}}],[\"万字的配套详解图书\",{\"1\":{\"13\":1}}],[\"万人次\",{\"1\":{\"13\":1}}],[\"下划线\",{\"1\":{\"114\":1}}],[\"下启用\",{\"1\":{\"73\":1}}],[\"下的构建脚本\",{\"1\":{\"73\":2}}],[\"下面的示例是将本地的\",{\"1\":{\"64\":1}}],[\"下面的包都会默认导入\",{\"1\":{\"44\":1}}],[\"下面利用注解和反射完成类和表结构的映射关系\",{\"1\":{\"30\":1}}],[\"下面给出示例代码\",{\"1\":{\"23\":1}}],[\"下面是配置示例\",{\"1\":{\"70\":1}}],[\"下面是基本类型\",{\"1\":{\"45\":1}}],[\"下面是我们被注解的类\",{\"1\":{\"30\":1}}],[\"下面是获得构造器的方法\",{\"1\":{\"26\":1}}],[\"下面是示例代码\",{\"1\":{\"24\":1}}],[\"下面是\",{\"1\":{\"23\":1}}],[\"下面我们分别通过这几种方法获得\",{\"1\":{\"22\":1}}],[\"下面我们在一个类中定义\",{\"1\":{\"18\":1}}],[\"下面我们定义一个注解\",{\"1\":{\"18\":1}}],[\"下面举例真实的案例\",{\"1\":{\"16\":1}}],[\"下面使用\",{\"1\":{\"9\":1}}],[\"下载量已达到\",{\"1\":{\"13\":1}}],[\"切实提升系统稳定性\",{\"1\":{\"13\":1}}],[\"杜绝踩重复的坑\",{\"1\":{\"13\":1}}],[\"降低沟通成本\",{\"1\":{\"13\":1}}],[\"提供的\",{\"1\":{\"64\":1}}],[\"提供反射的执行效率\",{\"1\":{\"27\":1}}],[\"提示\",{\"1\":{\"38\":1}}],[\"提升协作效率\",{\"1\":{\"13\":1}}],[\"提倡什么样的编码和实现方式\",{\"1\":{\"13\":1}}],[\"以\",{\"1\":{\"97\":1}}],[\"以下情形例外\",{\"1\":{\"97\":1}}],[\"以及一个或多个\",{\"1\":{\"50\":1}}],[\"以及真实的错误案例\",{\"1\":{\"13\":1}}],[\"以一种普遍认可的统一方式一起做事\",{\"1\":{\"13\":1}}],[\"适当的规范和标准绝不是消灭代码内容的创造性\",{\"1\":{\"13\":1}}],[\"对外网提供服务\",{\"1\":{\"63\":1}}],[\"对被扩展的类代码本身不会造成任何影响\",{\"1\":{\"54\":1}}],[\"对于没有超类型声明的类是默认超类\",{\"1\":{\"52\":1}}],[\"对于每个类而言\",{\"1\":{\"22\":1}}],[\"对应的字段名称是\",{\"1\":{\"97\":1}}],[\"对应\",{\"1\":{\"45\":1}}],[\"对应原方法的返回值\",{\"1\":{\"27\":1}}],[\"对性能有影响\",{\"1\":{\"21\":1}}],[\"对象声明\",{\"1\":{\"50\":1}}],[\"对象和记录对应\",{\"1\":{\"30\":1}}],[\"对象映射关系\",{\"1\":{\"30\":1}}],[\"对象都有\",{\"1\":{\"27\":1}}],[\"对象的一个数组\",{\"1\":{\"22\":1}}],[\"对象的一个实例\",{\"1\":{\"22\":1}}],[\"对象的接口\",{\"1\":{\"22\":1}}],[\"对象的父类\",{\"1\":{\"22\":1}}],[\"对象所表示的实体\",{\"1\":{\"22\":1}}],[\"对象有哪些方法\",{\"1\":{\"22\":1}}],[\"对象对应的是一个加载到\",{\"1\":{\"22\":1}}],[\"对象只能由系统建立对象\",{\"1\":{\"22\":1}}],[\"对象包含了特定某个结构\",{\"1\":{\"22\":1}}],[\"对象反射可以得到的信息\",{\"1\":{\"22\":1}}],[\"对象是一类特殊的对象\",{\"1\":{\"21\":1}}],[\"对象\",{\"1\":{\"21\":2,\"22\":15,\"23\":3,\"25\":2}}],[\"对软件来说\",{\"1\":{\"13\":1}}],[\"对规约做了适当扩展和解释\",{\"1\":{\"13\":1}}],[\"谁还敢上路行驶\",{\"1\":{\"13\":1}}],[\"没有指针\",{\"1\":{\"108\":1}}],[\"没有安全方面的问题\",{\"1\":{\"23\":1}}],[\"没有红绿灯\",{\"1\":{\"13\":1}}],[\"没有鉴权的漏洞代码容易被黑客攻击等\",{\"1\":{\"13\":1}}],[\"试想如果没有限速\",{\"1\":{\"13\":1}}],[\"制定交通法规表面上是要限制行车权\",{\"1\":{\"13\":1}}],[\"制定团队\",{\"1\":{\"12\":1}}],[\"现代软件架构的复杂性需要协同开发完成\",{\"1\":{\"13\":1}}],[\"现代软件行业的高速发展对开发者的综合素质要求越来越高\",{\"1\":{\"13\":1}}],[\"手册的愿景是码出高效\",{\"1\":{\"13\":1}}],[\"推荐使用\",{\"1\":{\"39\":1}}],[\"推荐\",{\"1\":{\"13\":1}}],[\"强制\",{\"1\":{\"13\":1,\"97\":11}}],[\"依据约束力强弱及故障敏感性\",{\"1\":{\"13\":1}}],[\"细分成若干二级子目录\",{\"1\":{\"13\":1}}],[\"划分为编程规约\",{\"1\":{\"13\":1}}],[\"工厂函数支持直接加上\",{\"1\":{\"45\":1}}],[\"工程结构\",{\"1\":{\"13\":1}}],[\"工程结构混乱导致后续项目维护艰难\",{\"1\":{\"13\":1}}],[\"工具和\",{\"1\":{\"110\":1}}],[\"工具执行\",{\"1\":{\"41\":1}}],[\"工具友好\",{\"1\":{\"38\":1}}],[\"工具\",{\"0\":{\"10\":1},\"1\":{\"41\":1,\"108\":1}}],[\"五花八门的错误码会人为地增加排查问题的难度\",{\"1\":{\"13\":1}}],[\"众多社区开发者踊跃参与打磨完善\",{\"1\":{\"13\":1}}],[\"经历了多次大规模一线实战的检验及不断完善\",{\"1\":{\"13\":1}}],[\"社区爱好者的集体智慧结晶和经验总结\",{\"1\":{\"13\":1}}],[\"社区开发者\",{\"1\":{\"12\":1}}],[\"是强类型语言\",{\"1\":{\"115\":1}}],[\"是否能正常运行\",{\"1\":{\"111\":1}}],[\"是对外暴露服务的一种方式\",{\"1\":{\"81\":1}}],[\"是一个或多个应用容器的组合\",{\"1\":{\"79\":1}}],[\"是一个由\",{\"1\":{\"63\":1}}],[\"是一种在\",{\"1\":{\"38\":1}}],[\"是各种类型变量的公共父接口\",{\"1\":{\"29\":1}}],[\"是最常用的类加载器\",{\"1\":{\"25\":1}}],[\"是\",{\"1\":{\"13\":1,\"16\":1,\"21\":1,\"25\":1,\"79\":1,\"87\":2}}],[\"新增了\",{\"1\":{\"29\":1}}],[\"新增\",{\"1\":{\"12\":1}}],[\"0b\",{\"1\":{\"45\":1}}],[\"0x\",{\"1\":{\"45\":1}}],[\"000\",{\"1\":{\"112\":2}}],[\"002\",{\"1\":{\"30\":1}}],[\"001\",{\"1\":{\"30\":1}}],[\"0\",{\"1\":{\"16\":1,\"19\":1,\"23\":1,\"28\":3,\"36\":1,\"42\":1,\"45\":3,\"47\":4,\"48\":3,\"64\":2,\"65\":4,\"66\":6,\"70\":2,\"72\":2,\"73\":3,\"114\":1,\"117\":2}}],[\"03\",{\"1\":{\"12\":1}}],[\"02\",{\"1\":{\"12\":1}}],[\"04\",{\"1\":{\"9\":2}}],[\"2d\",{\"1\":{\"110\":1}}],[\"2+13\",{\"1\":{\"73\":2}}],[\"21\",{\"1\":{\"72\":2,\"73\":3,\"74\":1}}],[\"25\",{\"1\":{\"61\":2}}],[\"23\",{\"1\":{\"44\":1}}],[\"2\",{\"0\":{\"17\":1,\"20\":1,\"21\":1,\"22\":2,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"34\":1,\"39\":1,\"43\":1,\"44\":1,\"45\":2,\"46\":1,\"47\":1,\"48\":1,\"51\":1,\"57\":1,\"61\":1,\"64\":1,\"65\":1,\"66\":2,\"70\":1,\"73\":1,\"79\":1,\"98\":1,\"109\":1,\"113\":1,\"114\":1,\"115\":2,\"116\":1},\"1\":{\"13\":1,\"24\":1,\"45\":6,\"46\":1,\"47\":6,\"48\":3,\"72\":2,\"108\":3,\"115\":2}}],[\"275\",{\"1\":{\"13\":1}}],[\"2008\",{\"1\":{\"108\":1}}],[\"2006\",{\"1\":{\"108\":1}}],[\"2018年9月在云栖厅发布\",{\"1\":{\"13\":1}}],[\"2017\",{\"1\":{\"13\":1,\"38\":1}}],[\"2022\",{\"1\":{\"12\":1,\"73\":3}}],[\"22\",{\"1\":{\"9\":1}}],[\"全球\",{\"1\":{\"12\":1}}],[\"7890\",{\"1\":{\"66\":4}}],[\"7\",{\"0\":{\"27\":1,\"84\":1,\"103\":1},\"1\":{\"12\":1,\"48\":1,\"57\":1,\"112\":1}}],[\"备注\",{\"1\":{\"12\":1}}],[\"黄山版\",{\"1\":{\"12\":2}}],[\"说明子类可以继承父类中的该注解\",{\"1\":{\"18\":1}}],[\"说明该注解将被包含在\",{\"1\":{\"18\":1}}],[\"说明需要提防的雷区\",{\"1\":{\"13\":1}}],[\"说明\",{\"0\":{\"12\":1},\"1\":{\"13\":1,\"45\":1,\"97\":2}}],[\"阿里\",{\"0\":{\"11\":1}}],[\"阿里云效也集成了代码规约扫描引擎\",{\"1\":{\"13\":1}}],[\"阿里云\",{\"0\":{\"7\":1}}],[\"plug\",{\"1\":{\"110\":1}}],[\"plain\",{\"1\":{\"92\":1}}],[\"pdf\",{\"1\":{\"92\":3}}],[\"png\",{\"1\":{\"92\":3}}],[\"pnative\",{\"1\":{\"73\":2,\"74\":1}}],[\"pojo\",{\"1\":{\"97\":1}}],[\"po\",{\"1\":{\"97\":1}}],[\"pod\",{\"0\":{\"79\":1},\"1\":{\"78\":1,\"79\":4,\"80\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":2,\"86\":2,\"87\":2}}],[\"ports\",{\"1\":{\"66\":1}}],[\"port\",{\"1\":{\"65\":2,\"66\":4,\"70\":1}}],[\"perl\",{\"1\":{\"60\":4}}],[\"person\",{\"1\":{\"22\":14,\"50\":2}}],[\"preferences\",{\"1\":{\"110\":1}}],[\"progress\",{\"1\":{\"74\":1}}],[\"program\",{\"1\":{\"73\":3}}],[\"protocol\",{\"1\":{\"70\":8}}],[\"proxyprotocolversion\",{\"1\":{\"70\":2}}],[\"proxy\",{\"1\":{\"70\":11,\"87\":2}}],[\"properties\",{\"1\":{\"57\":1}}],[\"print\",{\"1\":{\"36\":1,\"46\":1,\"47\":5,\"48\":6,\"110\":1}}],[\"printstacktrace\",{\"1\":{\"35\":1}}],[\"println\",{\"1\":{\"21\":1,\"22\":1,\"23\":4,\"24\":3,\"25\":5,\"26\":6,\"27\":2,\"28\":3,\"29\":6,\"30\":5,\"33\":2,\"34\":1,\"35\":5,\"36\":2,\"40\":2,\"42\":1,\"45\":5,\"47\":10,\"48\":6,\"53\":1,\"111\":1,\"117\":4}}],[\"primitive\",{\"1\":{\"22\":1,\"115\":1}}],[\"private\",{\"1\":{\"21\":3,\"27\":1,\"30\":3,\"33\":2,\"34\":2,\"35\":3}}],[\"privileged=true\",{\"1\":{\"9\":1}}],[\"pull\",{\"1\":{\"61\":1,\"64\":2}}],[\"pure=true\",{\"1\":{\"21\":1}}],[\"public\",{\"1\":{\"16\":6,\"17\":1,\"18\":3,\"19\":5,\"21\":14,\"22\":8,\"23\":3,\"24\":2,\"25\":4,\"26\":5,\"28\":5,\"29\":4,\"30\":12,\"33\":3,\"34\":3,\"35\":3,\"36\":2,\"46\":2,\"111\":2,\"117\":4}}],[\"python\",{\"1\":{\"21\":1,\"44\":1,\"45\":2,\"47\":1,\"48\":2}}],[\"python3\",{\"1\":{\"9\":1}}],[\"php\",{\"1\":{\"21\":1}}],[\"password\",{\"1\":{\"66\":1}}],[\"passwd\",{\"1\":{\"9\":2}}],[\"pass\",{\"1\":{\"66\":2,\"70\":1}}],[\"parent\",{\"1\":{\"25\":4}}],[\"params\",{\"1\":{\"54\":1}}],[\"paramtype\",{\"1\":{\"22\":1}}],[\"parameterizedtype\",{\"1\":{\"29\":6}}],[\"parametertypes\",{\"1\":{\"27\":1}}],[\"parameter\",{\"1\":{\"17\":1}}],[\"path=\",{\"1\":{\"73\":1}}],[\"path\",{\"1\":{\"25\":2,\"73\":1,\"95\":1}}],[\"package\",{\"1\":{\"16\":1,\"40\":1,\"44\":1}}],[\"p\",{\"1\":{\"9\":2,\"52\":3,\"57\":1,\"74\":1}}],[\"$object\",{\"1\":{\"97\":1}}],[\"$ossfs\",{\"1\":{\"9\":1}}],[\"$1\",{\"1\":{\"95\":1}}],[\"$host\",{\"1\":{\"70\":1}}],[\"$uri\",{\"1\":{\"70\":2,\"95\":4}}],[\"$proxy\",{\"1\":{\"70\":2}}],[\"$pwd\",{\"1\":{\"61\":1}}],[\"$path\",{\"1\":{\"42\":1}}],[\"$value\",{\"1\":{\"48\":1}}],[\"$index\",{\"1\":{\"48\":2}}],[\"$s\",{\"1\":{\"45\":1}}],[\"$name\",{\"1\":{\"40\":1}}],[\"$\",{\"1\":{\"9\":4,\"45\":5,\"48\":1,\"70\":1,\"95\":1,\"114\":2}}],[\"not\",{\"1\":{\"118\":1}}],[\"node\",{\"0\":{\"78\":1},\"1\":{\"78\":1,\"87\":5}}],[\"no\",{\"1\":{\"74\":1}}],[\"nosuchmethodexception\",{\"1\":{\"29\":1,\"36\":1}}],[\"nosuchmethoderror\",{\"1\":{\"16\":1}}],[\"nosuchfieldexception\",{\"1\":{\"26\":1}}],[\"netbeans\",{\"1\":{\"108\":1}}],[\"networking\",{\"1\":{\"110\":1}}],[\"networks\",{\"1\":{\"65\":1,\"66\":2}}],[\"network\",{\"1\":{\"65\":1,\"66\":1}}],[\"newinstance\",{\"1\":{\"22\":1,\"27\":5,\"35\":1,\"36\":1}}],[\"new\",{\"1\":{\"16\":2,\"21\":1,\"22\":1,\"23\":2,\"24\":3,\"28\":3,\"33\":3,\"34\":1,\"35\":3,\"40\":1,\"50\":1,\"117\":2}}],[\"nginx\",{\"0\":{\"59\":1,\"90\":1},\"1\":{\"60\":2,\"61\":4,\"70\":2,\"93\":3}}],[\"native\",{\"1\":{\"21\":1,\"73\":5,\"74\":2}}],[\"name$\",{\"1\":{\"97\":1}}],[\"name=\",{\"1\":{\"21\":1,\"22\":1,\"30\":1}}],[\"name\",{\"1\":{\"9\":1,\"16\":1,\"19\":1,\"21\":11,\"22\":11,\"25\":4,\"26\":3,\"27\":5,\"30\":14,\"40\":1,\"50\":1,\"53\":3,\"57\":1,\"64\":1,\"65\":2,\"66\":1,\"70\":1,\"95\":1,\"97\":3}}],[\"null\",{\"1\":{\"21\":1,\"25\":2,\"26\":1,\"27\":3,\"28\":4,\"29\":2,\"33\":2,\"35\":1}}],[\"n\",{\"1\":{\"9\":1,\"110\":1}}],[\"oop\",{\"0\":{\"100\":1}}],[\"of\",{\"1\":{\"93\":1}}],[\"off\",{\"1\":{\"61\":1}}],[\"otf\",{\"1\":{\"92\":3}}],[\"otherwise\",{\"1\":{\"47\":1}}],[\"octet\",{\"1\":{\"92\":1}}],[\"os\",{\"1\":{\"74\":1}}],[\"ossfs\",{\"0\":{\"8\":1},\"1\":{\"9\":11}}],[\"oss\",{\"0\":{\"6\":1,\"7\":1,\"10\":1},\"1\":{\"9\":16}}],[\"ol8\",{\"1\":{\"74\":1}}],[\"only\",{\"1\":{\"73\":1}}],[\"on\",{\"1\":{\"73\":2}}],[\"optimizing\",{\"1\":{\"73\":1}}],[\"options\",{\"1\":{\"65\":1,\"66\":1}}],[\"open\",{\"1\":{\"52\":2}}],[\"oraclelinux\",{\"1\":{\"74\":1}}],[\"oracle\",{\"1\":{\"74\":2}}],[\"orange\",{\"1\":{\"47\":1}}],[\"org\",{\"1\":{\"70\":1,\"93\":1}}],[\"or\",{\"1\":{\"45\":1,\"47\":1,\"73\":2}}],[\"orm\",{\"1\":{\"30\":3}}],[\"out\",{\"1\":{\"21\":1,\"22\":1,\"23\":4,\"24\":3,\"25\":5,\"26\":6,\"27\":2,\"28\":3,\"29\":6,\"30\":5,\"33\":2,\"34\":1,\"35\":5,\"36\":2,\"111\":1,\"117\":4}}],[\"obj\",{\"1\":{\"21\":5,\"27\":2}}],[\"objects\",{\"1\":{\"110\":1}}],[\"object$\",{\"1\":{\"97\":1}}],[\"object\",{\"1\":{\"21\":4,\"22\":2,\"27\":4,\"30\":1}}],[\"objective\",{\"1\":{\"21\":1}}],[\"override\",{\"1\":{\"16\":1,\"17\":3,\"21\":2,\"22\":2,\"30\":1,\"53\":1,\"110\":1}}],[\"o\",{\"1\":{\"9\":1,\"38\":1,\"87\":1,\"110\":2}}],[\"gif\",{\"1\":{\"92\":3}}],[\"git\",{\"1\":{\"73\":1}}],[\"github\",{\"1\":{\"12\":1,\"63\":1,\"73\":1}}],[\"graal\",{\"1\":{\"72\":1}}],[\"graalvm\",{\"0\":{\"71\":1,\"75\":1},\"1\":{\"71\":1,\"72\":2,\"73\":6,\"74\":1}}],[\"greet\",{\"1\":{\"40\":2}}],[\"greeter\",{\"1\":{\"40\":2}}],[\"g\",{\"1\":{\"61\":1}}],[\"gtidon\",{\"1\":{\"57\":1}}],[\"gofrp\",{\"1\":{\"70\":1}}],[\"go\",{\"1\":{\"47\":1,\"48\":1,\"63\":1}}],[\"google\",{\"1\":{\"38\":2}}],[\"gosspublic\",{\"1\":{\"9\":1}}],[\"genericreturntype\",{\"1\":{\"29\":3}}],[\"genericparametertype\",{\"1\":{\"29\":4}}],[\"genericparametertypes\",{\"1\":{\"29\":2}}],[\"genericarraytype\",{\"1\":{\"29\":2}}],[\"gethttpmessage\",{\"1\":{\"97\":1}}],[\"getter\",{\"1\":{\"51\":6,\"97\":1}}],[\"gettargetexception\",{\"1\":{\"35\":1}}],[\"get\",{\"1\":{\"41\":1,\"45\":2}}],[\"getage\",{\"1\":{\"30\":1}}],[\"getannotation\",{\"1\":{\"30\":2}}],[\"getannotations\",{\"1\":{\"30\":1}}],[\"getactualtypearguments\",{\"1\":{\"29\":2}}],[\"getgenericreturntype\",{\"1\":{\"29\":1}}],[\"getgenericparametertypes\",{\"1\":{\"29\":1}}],[\"getdeclaredmethod\",{\"1\":{\"27\":1,\"28\":2}}],[\"getdeclaredmethods\",{\"1\":{\"26\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"26\":1,\"27\":2,\"35\":1,\"36\":1}}],[\"getdeclaredconstructors\",{\"1\":{\"26\":1}}],[\"getdeclaredfield\",{\"1\":{\"26\":1,\"27\":1,\"30\":1}}],[\"getdeclaredfields\",{\"1\":{\"22\":1,\"26\":1}}],[\"getfields\",{\"1\":{\"26\":1}}],[\"getpingfenbyname\",{\"1\":{\"97\":1}}],[\"getproperty\",{\"1\":{\"25\":1}}],[\"getparent\",{\"1\":{\"25\":2}}],[\"getmethod\",{\"1\":{\"22\":1,\"26\":1,\"29\":2}}],[\"getconstructors\",{\"1\":{\"22\":1}}],[\"getclassloader\",{\"1\":{\"22\":1,\"25\":1}}],[\"getclass\",{\"1\":{\"21\":6,\"22\":3,\"28\":2}}],[\"getinstance\",{\"1\":{\"33\":3,\"34\":3,\"35\":3}}],[\"getinterfaces\",{\"1\":{\"22\":1}}],[\"getid\",{\"1\":{\"21\":1,\"30\":1}}],[\"getsimplename\",{\"1\":{\"26\":1}}],[\"getsystemclassloader\",{\"1\":{\"25\":1}}],[\"getsuperclass\",{\"1\":{\"22\":2}}],[\"getscore\",{\"1\":{\"21\":1}}],[\"getname\",{\"1\":{\"21\":1,\"22\":1,\"26\":1,\"27\":2,\"28\":8,\"30\":1}}],[\"gdebi\",{\"1\":{\"9\":2}}],[\"iiop\",{\"1\":{\"110\":1}}],[\"icon\",{\"1\":{\"92\":1}}],[\"ico\",{\"1\":{\"92\":2}}],[\"ip\",{\"0\":{\"68\":1},\"1\":{\"69\":1,\"70\":4,\"80\":1}}],[\"image\",{\"1\":{\"65\":1,\"66\":1,\"73\":3,\"74\":1,\"92\":7,\"110\":1}}],[\"import\",{\"1\":{\"18\":6,\"35\":2,\"36\":2,\"42\":1}}],[\"isdeleted\",{\"1\":{\"97\":2}}],[\"isdirectory\",{\"1\":{\"42\":1}}],[\"is\",{\"1\":{\"44\":2,\"45\":2,\"47\":1,\"48\":2,\"97\":3}}],[\"io\",{\"1\":{\"41\":1,\"42\":1,\"44\":1}}],[\"illegalaccessexception\",{\"1\":{\"36\":1}}],[\"i++\",{\"1\":{\"28\":3}}],[\"i\",{\"1\":{\"28\":6,\"38\":1,\"45\":4,\"48\":9,\"110\":3}}],[\"if\",{\"1\":{\"21\":2,\"29\":2,\"33\":2,\"35\":1,\"47\":7,\"48\":2}}],[\"input\",{\"1\":{\"110\":1}}],[\"inputuserid\",{\"1\":{\"97\":1}}],[\"ingress\",{\"0\":{\"81\":1},\"1\":{\"81\":1}}],[\"inferredtype\",{\"1\":{\"51\":1}}],[\"index\",{\"1\":{\"48\":3,\"70\":4,\"95\":5}}],[\"indices\",{\"1\":{\"48\":2}}],[\"in\",{\"1\":{\"45\":1,\"46\":1,\"47\":4,\"48\":9,\"110\":1}}],[\"inv\",{\"1\":{\"45\":1}}],[\"invocationtargetexception\",{\"1\":{\"35\":2,\"36\":2}}],[\"invoke\",{\"1\":{\"27\":3,\"28\":2}}],[\"include\",{\"1\":{\"41\":2,\"93\":1}}],[\"innerclassholder\",{\"1\":{\"35\":3}}],[\"innerclasssingleton\",{\"1\":{\"35\":11}}],[\"innerclasssingletontest\",{\"1\":{\"35\":1}}],[\"instrumentation\",{\"1\":{\"110\":1}}],[\"instence\",{\"1\":{\"34\":2,\"36\":1}}],[\"instence2\",{\"1\":{\"34\":2}}],[\"instence1\",{\"1\":{\"34\":2}}],[\"instantiationexception\",{\"1\":{\"36\":1}}],[\"instances\",{\"1\":{\"35\":1}}],[\"instance3\",{\"1\":{\"35\":3}}],[\"instance2\",{\"1\":{\"35\":3,\"36\":2}}],[\"instance1\",{\"1\":{\"35\":3,\"36\":2}}],[\"instance\",{\"1\":{\"33\":9,\"35\":3,\"36\":3,\"57\":13}}],[\"instanceof\",{\"1\":{\"29\":2,\"44\":1}}],[\"install\",{\"1\":{\"9\":1,\"41\":1,\"72\":1}}],[\"initialized\",{\"1\":{\"51\":1}}],[\"initializer>\",{\"1\":{\"51\":1}}],[\"initialize\",{\"1\":{\"23\":1}}],[\"intl\",{\"1\":{\"110\":1}}],[\"ints\",{\"1\":{\"48\":3}}],[\"interval\",{\"1\":{\"57\":1}}],[\"interface\",{\"1\":{\"16\":1,\"17\":1,\"18\":2,\"19\":5,\"22\":2,\"30\":2,\"53\":3}}],[\"intellij\",{\"1\":{\"39\":1,\"108\":1,\"111\":1}}],[\"integer\",{\"1\":{\"22\":2}}],[\"int\",{\"1\":{\"19\":2,\"21\":8,\"22\":1,\"23\":1,\"24\":3,\"26\":2,\"27\":2,\"28\":3,\"30\":13,\"44\":3,\"45\":3,\"46\":9,\"47\":1,\"48\":3,\"51\":5,\"52\":2,\"97\":2,\"110\":1,\"112\":1,\"115\":1}}],[\"inherited\",{\"1\":{\"18\":1}}],[\"item\",{\"1\":{\"48\":4}}],[\"items\",{\"1\":{\"47\":3,\"48\":4}}],[\"it\",{\"1\":{\"9\":1,\"48\":2,\"74\":1}}],[\"idl\",{\"1\":{\"110\":2}}],[\"idea\",{\"1\":{\"39\":1,\"108\":1,\"111\":1}}],[\"ide\",{\"1\":{\"13\":1,\"38\":1}}],[\"id=1\",{\"1\":{\"56\":1}}],[\"id=\",{\"1\":{\"21\":1,\"30\":1}}],[\"id=xxx\",{\"1\":{\"9\":1}}],[\"id=accesskeyid\",{\"1\":{\"9\":1}}],[\"id\",{\"1\":{\"9\":1,\"19\":1,\"21\":11,\"30\":12}}],[\"youku\",{\"1\":{\"97\":1}}],[\"your\",{\"1\":{\"95\":1}}],[\"yml\",{\"1\":{\"65\":1,\"66\":1}}],[\"y\",{\"1\":{\"9\":2,\"47\":1}}],[\"beans\",{\"1\":{\"110\":1}}],[\"benchmark\",{\"1\":{\"73\":1,\"74\":3}}],[\"blocklist\",{\"1\":{\"97\":1}}],[\"blacklist\",{\"1\":{\"97\":1}}],[\"black\",{\"1\":{\"57\":1}}],[\"break\",{\"1\":{\"48\":1}}],[\"byte\",{\"1\":{\"45\":4,\"115\":1}}],[\"bindport\",{\"1\":{\"66\":1}}],[\"binlog\",{\"1\":{\"56\":3}}],[\"bin\",{\"1\":{\"42\":1,\"56\":3,\"73\":1,\"92\":1}}],[\"bat\",{\"1\":{\"73\":2}}],[\"bak\",{\"1\":{\"57\":1}}],[\"bar\",{\"1\":{\"53\":1}}],[\"basics\",{\"1\":{\"93\":1}}],[\"base\",{\"1\":{\"52\":2,\"97\":1}}],[\"bash\",{\"1\":{\"41\":1}}],[\"banana\",{\"1\":{\"47\":1,\"48\":1}}],[\"backports\",{\"1\":{\"9\":1}}],[\"bo\",{\"1\":{\"97\":1}}],[\"body\",{\"1\":{\"54\":1,\"70\":1}}],[\"bob\",{\"1\":{\"27\":1}}],[\"bootstrap\",{\"1\":{\"25\":1}}],[\"boolean\",{\"1\":{\"21\":1,\"97\":1,\"115\":1}}],[\"b\",{\"1\":{\"19\":1,\"24\":2,\"44\":1,\"45\":3,\"46\":4,\"47\":8}}],[\"but\",{\"1\":{\"93\":1}}],[\"bullseye\",{\"1\":{\"60\":2}}],[\"builder\",{\"1\":{\"74\":1}}],[\"building\",{\"1\":{\"73\":1}}],[\"build\",{\"1\":{\"9\":5,\"73\":1,\"74\":4}}],[\"bucket=alexsun\",{\"1\":{\"9\":1}}],[\"bucket=test\",{\"1\":{\"9\":1}}],[\"bucket\",{\"1\":{\"9\":3}}],[\"s4\",{\"1\":{\"117\":2}}],[\"s3\",{\"1\":{\"117\":2}}],[\"s2\",{\"1\":{\"117\":2}}],[\"s1\",{\"1\":{\"117\":2}}],[\"sb\",{\"1\":{\"97\":1}}],[\"svg+xml\",{\"1\":{\"92\":1}}],[\"svg\",{\"1\":{\"92\":2}}],[\"spring\",{\"1\":{\"73\":1,\"97\":1,\"108\":1}}],[\"snowdreamtech\",{\"1\":{\"64\":3,\"65\":1,\"66\":1}}],[\"slim\",{\"1\":{\"60\":2,\"61\":2,\"74\":1}}],[\"slave\",{\"1\":{\"57\":1,\"97\":1}}],[\"swing\",{\"1\":{\"110\":1}}],[\"switch\",{\"1\":{\"47\":1}}],[\"swift\",{\"1\":{\"38\":1}}],[\"simple\",{\"1\":{\"51\":1}}],[\"site\",{\"1\":{\"50\":1}}],[\"size\",{\"1\":{\"45\":1,\"65\":1,\"66\":1,\"70\":1}}],[\"singleton\",{\"1\":{\"35\":1}}],[\"share\",{\"1\":{\"61\":1,\"70\":1}}],[\"shanghai\",{\"1\":{\"9\":1}}],[\"show\",{\"1\":{\"56\":1}}],[\"short\",{\"1\":{\"45\":2,\"115\":1}}],[\"shr\",{\"1\":{\"45\":1}}],[\"shl\",{\"1\":{\"45\":1}}],[\"sdk\",{\"1\":{\"41\":1,\"72\":1}}],[\"sdkman\",{\"1\":{\"41\":1}}],[\"s\",{\"1\":{\"41\":1,\"45\":2}}],[\"sync\",{\"1\":{\"39\":1}}],[\"synchronized\",{\"1\":{\"33\":1}}],[\"systemclassloader\",{\"1\":{\"25\":3}}],[\"system\",{\"1\":{\"21\":1,\"22\":1,\"23\":4,\"24\":3,\"25\":7,\"26\":6,\"27\":2,\"28\":9,\"29\":6,\"30\":5,\"33\":2,\"34\":1,\"35\":5,\"36\":2,\"111\":1,\"117\":4}}],[\"sum\",{\"1\":{\"46\":2}}],[\"sun\",{\"1\":{\"25\":2}}],[\"suppresswarnings\",{\"1\":{\"16\":1,\"17\":7}}],[\"supports\",{\"1\":{\"73\":1}}],[\"support\",{\"1\":{\"9\":1,\"110\":1}}],[\"sound\",{\"1\":{\"110\":1}}],[\"source\",{\"1\":{\"17\":1,\"18\":2}}],[\"sources\",{\"1\":{\"9\":4}}],[\"son\",{\"1\":{\"24\":10}}],[\"scan\",{\"1\":{\"57\":3}}],[\"scripting\",{\"1\":{\"110\":2}}],[\"script\",{\"1\":{\"42\":2,\"93\":2}}],[\"score=\",{\"1\":{\"21\":1}}],[\"score\",{\"1\":{\"21\":11,\"30\":3}}],[\"schools\",{\"1\":{\"19\":1}}],[\"stock\",{\"1\":{\"97\":1}}],[\"still\",{\"1\":{\"48\":1}}],[\"step\",{\"1\":{\"48\":2}}],[\"structs\",{\"1\":{\"108\":1}}],[\"stream\",{\"1\":{\"92\":1}}],[\"str\",{\"1\":{\"45\":3}}],[\"string\",{\"1\":{\"16\":3,\"17\":1,\"19\":4,\"21\":7,\"22\":9,\"23\":1,\"24\":1,\"25\":2,\"26\":3,\"27\":2,\"28\":1,\"29\":4,\"30\":11,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"40\":1,\"44\":1,\"50\":5,\"53\":2,\"97\":2,\"111\":1,\"117\":9}}],[\"studio\",{\"1\":{\"39\":1,\"73\":3}}],[\"student\",{\"1\":{\"21\":12,\"22\":4,\"30\":9}}],[\"statefulset\",{\"0\":{\"86\":1},\"1\":{\"86\":1}}],[\"static\",{\"1\":{\"16\":1,\"21\":1,\"22\":3,\"23\":5,\"24\":7,\"25\":2,\"26\":2,\"28\":4,\"29\":1,\"30\":1,\"33\":3,\"34\":3,\"35\":4,\"36\":1,\"111\":1,\"117\":2}}],[\"stable\",{\"1\":{\"60\":2}}],[\"start\",{\"1\":{\"33\":2,\"110\":1}}],[\"starttime\",{\"1\":{\"28\":6}}],[\"serialization\",{\"1\":{\"110\":1}}],[\"service\",{\"0\":{\"80\":1},\"1\":{\"80\":2,\"81\":1,\"110\":1}}],[\"services\",{\"1\":{\"65\":1,\"66\":1}}],[\"serverport\",{\"1\":{\"65\":1,\"70\":1}}],[\"serveraddr\",{\"1\":{\"65\":1,\"70\":1}}],[\"server\",{\"1\":{\"9\":1,\"56\":1,\"57\":4,\"65\":6,\"66\":4,\"70\":5,\"93\":1,\"95\":2,\"110\":1}}],[\"se\",{\"1\":{\"108\":1}}],[\"sequences\",{\"1\":{\"44\":1}}],[\"setter\",{\"1\":{\"51\":4}}],[\"setof\",{\"1\":{\"47\":1}}],[\"setage\",{\"1\":{\"30\":1}}],[\"setaccessible\",{\"1\":{\"27\":6,\"28\":1,\"35\":1,\"36\":1}}],[\"set\",{\"1\":{\"27\":1,\"45\":2,\"70\":4,\"73\":2}}],[\"setscore\",{\"1\":{\"21\":1}}],[\"setname\",{\"1\":{\"21\":1,\"27\":3,\"30\":1}}],[\"setid\",{\"1\":{\"21\":1,\"30\":1}}],[\"see\",{\"1\":{\"16\":1}}],[\"secondary\",{\"1\":{\"95\":2,\"97\":1}}],[\"secret=xxx\",{\"1\":{\"9\":1}}],[\"secret=accesskeysecret\",{\"1\":{\"9\":1}}],[\"secret\",{\"0\":{\"83\":1},\"1\":{\"9\":1,\"83\":1}}],[\"security\",{\"1\":{\"9\":1,\"110\":2}}],[\">>>\",{\"1\":{\"45\":1}}],[\">>\",{\"1\":{\"9\":3,\"45\":1}}],[\">\",{\"1\":{\"9\":2,\"18\":2,\"21\":2,\"25\":1,\"33\":2,\"42\":2,\"45\":3,\"47\":14,\"73\":3}}],[\"rias\",{\"1\":{\"110\":1}}],[\"router\",{\"1\":{\"70\":2}}],[\"ro\",{\"1\":{\"65\":3,\"66\":2}}],[\"row\",{\"1\":{\"56\":1}}],[\"root\",{\"1\":{\"25\":2,\"57\":1,\"70\":1,\"95\":1}}],[\"range\",{\"1\":{\"47\":1}}],[\"ranges\",{\"1\":{\"44\":1}}],[\"reference\",{\"1\":{\"115\":1}}],[\"ref\",{\"1\":{\"110\":1}}],[\"reflect\",{\"1\":{\"21\":3,\"24\":1,\"26\":1,\"35\":2,\"36\":2}}],[\"reflection\",{\"1\":{\"21\":2,\"22\":1,\"110\":1}}],[\"responded\",{\"1\":{\"93\":1}}],[\"restart\",{\"1\":{\"65\":1,\"66\":1}}],[\"restricted\",{\"1\":{\"9\":4}}],[\"regular\",{\"1\":{\"110\":1}}],[\"registry\",{\"1\":{\"74\":2}}],[\"regex\",{\"1\":{\"57\":2}}],[\"requires\",{\"1\":{\"73\":1}}],[\"rewrite\",{\"1\":{\"70\":1,\"95\":1}}],[\"realip\",{\"1\":{\"70\":1}}],[\"real\",{\"1\":{\"70\":2}}],[\"remoteport\",{\"1\":{\"65\":1,\"70\":1}}],[\"receivertype\",{\"1\":{\"54\":1}}],[\"relationship\",{\"1\":{\"30\":1}}],[\"retentionpolicy\",{\"1\":{\"17\":1,\"18\":2,\"19\":2,\"30\":2}}],[\"retention\",{\"1\":{\"17\":1,\"18\":4,\"19\":2,\"30\":2}}],[\"return\",{\"1\":{\"16\":1,\"21\":7,\"22\":1,\"29\":1,\"30\":4,\"33\":1,\"34\":1,\"35\":1,\"46\":1,\"48\":6}}],[\"rf\",{\"1\":{\"9\":1}}],[\"rmi\",{\"1\":{\"110\":3}}],[\"rm\",{\"1\":{\"9\":1,\"74\":1}}],[\"runoob\",{\"1\":{\"50\":1}}],[\"running\",{\"1\":{\"48\":1}}],[\"runnable\",{\"1\":{\"16\":2}}],[\"runtimeexception\",{\"1\":{\"35\":1}}],[\"runtime\",{\"1\":{\"18\":3,\"19\":2,\"30\":2,\"41\":2,\"87\":2,\"110\":1}}],[\"run\",{\"1\":{\"9\":3,\"16\":2,\"57\":1,\"74\":2}}],[\"mechanism\",{\"1\":{\"110\":2}}],[\"me\",{\"1\":{\"108\":1}}],[\"messageutils\",{\"1\":{\"97\":1}}],[\"meta\",{\"1\":{\"18\":1}}],[\"methods\",{\"1\":{\"26\":2,\"110\":1}}],[\"method\",{\"1\":{\"16\":1,\"17\":1,\"18\":2,\"19\":2,\"21\":1,\"22\":2,\"26\":4,\"27\":3,\"28\":2,\"29\":5}}],[\"money\",{\"1\":{\"112\":1}}],[\"monitoring\",{\"1\":{\"110\":1}}],[\"mozilla\",{\"1\":{\"93\":1}}],[\"module\",{\"1\":{\"93\":2}}],[\"mode\",{\"1\":{\"65\":1}}],[\"mdn\",{\"1\":{\"92\":1,\"93\":1}}],[\"mvnw\",{\"1\":{\"73\":2,\"74\":1}}],[\"much\",{\"1\":{\"35\":1}}],[\"multiverse\",{\"1\":{\"9\":4}}],[\"management\",{\"1\":{\"110\":1}}],[\"math\",{\"1\":{\"110\":1}}],[\"machine\",{\"1\":{\"110\":1}}],[\"maven\",{\"1\":{\"108\":1}}],[\"master\",{\"0\":{\"88\":1},\"1\":{\"57\":1,\"87\":1}}],[\"max\",{\"1\":{\"47\":6,\"65\":1,\"66\":1,\"70\":1,\"97\":2}}],[\"mapping\",{\"1\":{\"30\":1}}],[\"map<java\",{\"1\":{\"29\":1}}],[\"map<string\",{\"1\":{\"29\":2}}],[\"map\",{\"1\":{\"29\":2}}],[\"mainline\",{\"1\":{\"60\":1}}],[\"main\",{\"1\":{\"9\":4,\"21\":1,\"22\":2,\"23\":1,\"24\":2,\"25\":2,\"26\":2,\"28\":1,\"29\":1,\"30\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"40\":3,\"45\":3,\"46\":1,\"47\":3,\"48\":4,\"97\":1,\"111\":1,\"117\":2}}],[\"ms\",{\"1\":{\"28\":3}}],[\"my\",{\"1\":{\"56\":1}}],[\"myimpl\",{\"1\":{\"53\":1}}],[\"myinterface\",{\"1\":{\"53\":3}}],[\"myfield\",{\"1\":{\"30\":6}}],[\"mytable\",{\"1\":{\"30\":6}}],[\"myannotation\",{\"1\":{\"18\":3,\"19\":4}}],[\"mybatis\",{\"1\":{\"15\":1,\"108\":1}}],[\"mysqld\",{\"1\":{\"56\":1}}],[\"mysql\",{\"0\":{\"56\":1},\"1\":{\"13\":1,\"56\":3,\"57\":2,\"97\":1}}],[\"m\",{\"1\":{\"9\":1,\"23\":6,\"24\":4}}],[\"mkdir\",{\"1\":{\"9\":1}}],[\"mirantis\",{\"1\":{\"87\":1}}],[\"mirrors\",{\"1\":{\"9\":4}}],[\"microsoft\",{\"1\":{\"73\":1}}],[\"misc\",{\"1\":{\"25\":2}}],[\"mime\",{\"0\":{\"91\":1,\"92\":1},\"1\":{\"9\":1,\"92\":2,\"93\":9}}],[\"ttf\",{\"1\":{\"92\":3}}],[\"txt\",{\"1\":{\"92\":1}}],[\"ti\",{\"1\":{\"110\":1}}],[\"time\",{\"1\":{\"97\":2}}],[\"timezone\",{\"1\":{\"65\":2,\"66\":2}}],[\"tiff\",{\"1\":{\"92\":3}}],[\"tcpudpdeal\",{\"1\":{\"97\":2}}],[\"tcp\",{\"0\":{\"70\":1},\"1\":{\"63\":2,\"65\":1,\"69\":1,\"70\":2}}],[\"tsdb\",{\"1\":{\"57\":3}}],[\"tsinghua\",{\"1\":{\"9\":4}}],[\"troubleshoot\",{\"1\":{\"110\":1}}],[\"transfer\",{\"1\":{\"74\":1}}],[\"trim\",{\"1\":{\"45\":1}}],[\"trimmargin\",{\"1\":{\"45\":4}}],[\"try\",{\"0\":{\"94\":1},\"1\":{\"35\":1,\"70\":1,\"95\":2}}],[\"true\",{\"1\":{\"21\":1,\"27\":3,\"28\":1,\"35\":1,\"36\":1,\"57\":3,\"65\":1,\"66\":1,\"117\":2}}],[\"tapromotion\",{\"1\":{\"97\":2}}],[\"taobao\",{\"1\":{\"97\":1}}],[\"table\",{\"1\":{\"30\":2}}],[\"target\",{\"1\":{\"17\":1,\"18\":5,\"19\":2,\"30\":2,\"73\":2,\"74\":1}}],[\"text\",{\"1\":{\"44\":1,\"45\":2,\"92\":5}}],[\"teacher\",{\"1\":{\"22\":2}}],[\"test03\",{\"1\":{\"28\":2}}],[\"test02\",{\"1\":{\"28\":2,\"29\":3}}],[\"test01\",{\"1\":{\"28\":2,\"29\":3}}],[\"test类被加载\",{\"1\":{\"24\":1}}],[\"test\",{\"1\":{\"16\":3,\"18\":2,\"19\":4,\"21\":1,\"22\":2,\"23\":1,\"24\":1,\"25\":3,\"26\":2,\"28\":1,\"29\":3,\"30\":1,\"97\":1}}],[\"token\",{\"1\":{\"65\":3,\"66\":3,\"70\":2}}],[\"tochar\",{\"1\":{\"45\":1}}],[\"todouble\",{\"1\":{\"45\":1}}],[\"tofloat\",{\"1\":{\"45\":1}}],[\"tolong\",{\"1\":{\"45\":1}}],[\"toshort\",{\"1\":{\"45\":1}}],[\"tostring\",{\"1\":{\"16\":1,\"17\":2,\"21\":1,\"22\":1,\"30\":1,\"52\":1}}],[\"tobyte\",{\"1\":{\"45\":1}}],[\"toint\",{\"1\":{\"44\":1,\"45\":2}}],[\"to\",{\"1\":{\"42\":1,\"93\":1,\"95\":1}}],[\"too\",{\"1\":{\"35\":1,\"47\":1}}],[\"tomcat\",{\"1\":{\"108\":1}}],[\"toml\",{\"1\":{\"65\":3,\"66\":3}}],[\"tom\",{\"1\":{\"27\":1}}],[\"top\",{\"1\":{\"21\":2,\"22\":2,\"24\":1,\"25\":1,\"26\":2,\"27\":3,\"29\":4,\"30\":2}}],[\"the\",{\"1\":{\"48\":1,\"93\":1}}],[\"this\",{\"1\":{\"21\":7,\"22\":3,\"30\":6,\"36\":1}}],[\"throwable\",{\"1\":{\"35\":1}}],[\"throws\",{\"1\":{\"21\":1,\"22\":1,\"24\":1,\"25\":1,\"26\":2,\"29\":1,\"30\":1,\"36\":1}}],[\"throw\",{\"1\":{\"16\":1,\"35\":1}}],[\"thread\",{\"1\":{\"16\":2,\"33\":2}}],[\"types↩︎\",{\"1\":{\"93\":1}}],[\"types\",{\"1\":{\"93\":6}}],[\"typevariable\",{\"1\":{\"29\":2}}],[\"type\",{\"1\":{\"17\":1,\"18\":1,\"19\":2,\"22\":4,\"29\":7,\"30\":6,\"65\":1,\"70\":1,\"93\":1,\"115\":2}}],[\"t\",{\"1\":{\"9\":1,\"22\":1,\"35\":3,\"74\":1}}],[\"tuna\",{\"1\":{\"9\":4}}],[\"hibernate\",{\"1\":{\"108\":1}}],[\"header\",{\"1\":{\"70\":4}}],[\"hellokt\",{\"1\":{\"41\":1}}],[\"hello\",{\"0\":{\"40\":1},\"1\":{\"39\":1,\"40\":3,\"41\":3,\"111\":5,\"117\":6}}],[\"hotspot\",{\"1\":{\"110\":1}}],[\"host\",{\"1\":{\"65\":6,\"70\":2}}],[\"home=d\",{\"1\":{\"73\":1}}],[\"home\",{\"1\":{\"57\":1}}],[\"htm\",{\"1\":{\"70\":1,\"92\":1}}],[\"htmldto\",{\"1\":{\"97\":2}}],[\"html\",{\"1\":{\"61\":1,\"70\":3,\"92\":3,\"95\":5}}],[\"https\",{\"1\":{\"41\":1,\"50\":1,\"63\":2,\"70\":1,\"73\":1,\"93\":1}}],[\"http\",{\"0\":{\"69\":1},\"1\":{\"9\":5,\"63\":2,\"64\":2,\"69\":2,\"70\":2,\"73\":1,\"74\":1,\"93\":3}}],[\"hadoop\",{\"1\":{\"108\":1}}],[\"hashcode\",{\"1\":{\"36\":1,\"52\":1}}],[\"hangzhou\",{\"1\":{\"9\":1,\"97\":1}}],[\"hungrysingleton\",{\"1\":{\"34\":9}}],[\"hungrysingletontest\",{\"1\":{\"34\":1}}],[\"eclipse\",{\"1\":{\"108\":1}}],[\"echo\",{\"1\":{\"9\":5}}],[\"ee\",{\"1\":{\"108\":1}}],[\"ei\",{\"1\":{\"97\":1}}],[\"empty\",{\"1\":{\"50\":1}}],[\"element\",{\"1\":{\"48\":1}}],[\"elementtype\",{\"1\":{\"18\":5,\"19\":4,\"22\":1,\"30\":2}}],[\"else\",{\"1\":{\"47\":9}}],[\"error\",{\"1\":{\"73\":1}}],[\"err\",{\"1\":{\"35\":2}}],[\"expression\",{\"1\":{\"110\":1}}],[\"expired\",{\"1\":{\"97\":2}}],[\"expected\",{\"1\":{\"93\":1}}],[\"expose\",{\"1\":{\"61\":1,\"74\":1}}],[\"example\",{\"1\":{\"50\":1,\"52\":1,\"57\":2,\"95\":1}}],[\"exception\",{\"1\":{\"35\":1,\"97\":1}}],[\"external\",{\"1\":{\"65\":1,\"66\":1}}],[\"extension\",{\"1\":{\"25\":1,\"110\":1}}],[\"extends\",{\"1\":{\"22\":2,\"24\":1}}],[\"ext\",{\"1\":{\"25\":2}}],[\"e\",{\"1\":{\"35\":3,\"57\":14}}],[\"equals\",{\"1\":{\"21\":2,\"52\":1}}],[\"etc\",{\"1\":{\"9\":6,\"65\":5,\"66\":5,\"93\":2}}],[\"edu\",{\"1\":{\"9\":4}}],[\"en\",{\"1\":{\"93\":1}}],[\"engine\",{\"1\":{\"87\":1}}],[\"enable\",{\"1\":{\"57\":1}}],[\"endtime\",{\"1\":{\"28\":6}}],[\"endpoint=oss\",{\"1\":{\"9\":2}}],[\"enumerate\",{\"1\":{\"48\":1}}],[\"enumsingleton\",{\"1\":{\"36\":6}}],[\"enumsingletontest\",{\"1\":{\"36\":1}}],[\"enum\",{\"1\":{\"19\":1,\"22\":1,\"36\":1}}],[\"environment\",{\"1\":{\"65\":1,\"66\":1,\"110\":1}}],[\"envs\",{\"1\":{\"64\":1,\"65\":4,\"66\":5,\"70\":4}}],[\"env\",{\"1\":{\"9\":5}}],[\"kit\",{\"1\":{\"110\":1}}],[\"kiwi\",{\"1\":{\"47\":1,\"48\":1}}],[\"kunlun\",{\"1\":{\"97\":1}}],[\"kube\",{\"1\":{\"87\":1}}],[\"kubelet\",{\"1\":{\"87\":2}}],[\"kubernetes\",{\"0\":{\"76\":1,\"87\":1,\"89\":1},\"1\":{\"79\":1,\"87\":3}}],[\"kaikeba\",{\"1\":{\"97\":1}}],[\"k\",{\"1\":{\"87\":1}}],[\"kts\",{\"1\":{\"42\":2}}],[\"kt\",{\"1\":{\"41\":1,\"44\":1}}],[\"kotalin\",{\"0\":{\"38\":1}}],[\"kotlinc\",{\"1\":{\"41\":1,\"42\":2}}],[\"kotlin\",{\"0\":{\"4\":1,\"37\":1,\"40\":1,\"43\":1,\"49\":1},\"1\":{\"38\":8,\"39\":2,\"40\":1,\"41\":6,\"44\":13,\"45\":4,\"47\":2,\"48\":2,\"50\":2,\"52\":1,\"53\":1,\"54\":1}}],[\"key\",{\"1\":{\"9\":6}}],[\"css\",{\"1\":{\"92\":3}}],[\"cri\",{\"1\":{\"87\":1}}],[\"create\",{\"1\":{\"66\":1}}],[\"cd\",{\"1\":{\"73\":1}}],[\"city\",{\"1\":{\"50\":1}}],[\"choose\",{\"1\":{\"47\":2}}],[\"char\",{\"1\":{\"45\":3,\"115\":1}}],[\"chmod\",{\"1\":{\"9\":1}}],[\"cache\",{\"1\":{\"97\":1}}],[\"call\",{\"1\":{\"73\":1}}],[\"canal\",{\"0\":{\"55\":1,\"57\":1,\"119\":1},\"1\":{\"57\":20}}],[\"can\",{\"1\":{\"35\":1}}],[\"catch\",{\"1\":{\"35\":2}}],[\"currently\",{\"1\":{\"73\":1}}],[\"currenttimemillis\",{\"1\":{\"28\":6}}],[\"curl\",{\"1\":{\"9\":2,\"41\":1,\"73\":1,\"74\":1}}],[\"c9\",{\"1\":{\"22\":1}}],[\"c8\",{\"1\":{\"22\":1}}],[\"c7\",{\"1\":{\"22\":1}}],[\"c6\",{\"1\":{\"22\":1}}],[\"c5\",{\"1\":{\"22\":2}}],[\"c4\",{\"1\":{\"22\":2}}],[\"c3\",{\"1\":{\"22\":2}}],[\"c2\",{\"1\":{\"22\":2}}],[\"c1\",{\"1\":{\"21\":2,\"22\":3,\"26\":10,\"27\":9,\"28\":2,\"30\":4}}],[\"c++\",{\"1\":{\"21\":1,\"25\":1,\"73\":1,\"108\":2}}],[\"c\",{\"1\":{\"21\":4,\"25\":4,\"27\":1,\"28\":2,\"44\":4,\"45\":2,\"47\":1,\"73\":2,\"108\":4}}],[\"clone\",{\"1\":{\"73\":1}}],[\"client\",{\"1\":{\"70\":1,\"110\":1}}],[\"cls\",{\"1\":{\"22\":3}}],[\"classpath\",{\"1\":{\"25\":1,\"41\":2}}],[\"classloader\",{\"1\":{\"22\":2,\"23\":1,\"25\":11}}],[\"class<\",{\"1\":{\"21\":2,\"25\":1}}],[\"classnotfoundexception\",{\"1\":{\"21\":1,\"22\":2,\"24\":1,\"25\":1,\"26\":2,\"30\":1}}],[\"class\",{\"1\":{\"16\":3,\"18\":3,\"19\":3,\"21\":11,\"22\":74,\"23\":8,\"24\":4,\"25\":10,\"26\":9,\"27\":12,\"28\":3,\"29\":11,\"30\":7,\"33\":3,\"34\":2,\"35\":4,\"36\":2,\"40\":1,\"41\":1,\"50\":5,\"52\":3,\"53\":1,\"111\":1,\"117\":2}}],[\"clean\",{\"1\":{\"9\":1}}],[\"cmd\",{\"1\":{\"9\":1,\"61\":1,\"74\":1}}],[\"count\",{\"1\":{\"97\":2}}],[\"copy\",{\"1\":{\"61\":1,\"74\":2}}],[\"collections\",{\"1\":{\"44\":1,\"110\":1}}],[\"collection<string>\",{\"1\":{\"29\":1}}],[\"columnname\",{\"1\":{\"30\":5}}],[\"concurrency\",{\"1\":{\"110\":1}}],[\"configmap\",{\"0\":{\"82\":1},\"1\":{\"82\":1}}],[\"conf\",{\"1\":{\"57\":1}}],[\"connectioncharset\",{\"1\":{\"57\":1}}],[\"containerd\",{\"1\":{\"87\":1}}],[\"container\",{\"1\":{\"65\":1,\"66\":1,\"74\":2,\"87\":2}}],[\"continue\",{\"1\":{\"48\":1}}],[\"contract\",{\"1\":{\"21\":1}}],[\"constructor<enumsingleton>\",{\"1\":{\"36\":1}}],[\"constructor<innerclasssingleton>\",{\"1\":{\"35\":1}}],[\"constructors\",{\"1\":{\"26\":2}}],[\"constructor\",{\"1\":{\"17\":1,\"21\":1,\"22\":2,\"26\":6,\"27\":5,\"35\":1,\"36\":1,\"50\":2}}],[\"core\",{\"1\":{\"9\":1}}],[\"community\",{\"1\":{\"73\":1}}],[\"common\",{\"1\":{\"70\":1,\"93\":2}}],[\"compiler\",{\"1\":{\"73\":1}}],[\"compile\",{\"1\":{\"73\":2,\"74\":1}}],[\"compose\",{\"1\":{\"65\":4,\"66\":2}}],[\"comparisons\",{\"1\":{\"44\":1}}],[\"comparable\",{\"1\":{\"22\":1}}],[\"com\",{\"1\":{\"9\":3,\"50\":1,\"70\":1,\"73\":1,\"74\":2,\"95\":1,\"97\":1}}],[\"cnf\",{\"1\":{\"56\":1}}],[\"cn\",{\"1\":{\"9\":6,\"70\":1}}],[\"drop\",{\"1\":{\"110\":1}}],[\"drag\",{\"1\":{\"110\":1}}],[\"driver\",{\"1\":{\"65\":1,\"66\":1}}],[\"dto\",{\"1\":{\"97\":1}}],[\"dazhepromotion\",{\"1\":{\"97\":1}}],[\"dashboardpwd\",{\"1\":{\"66\":1}}],[\"dashboardport\",{\"1\":{\"66\":1}}],[\"dashboarduser\",{\"1\":{\"66\":1}}],[\"dashboardaddr\",{\"1\":{\"66\":1}}],[\"daemon\",{\"1\":{\"61\":1}}],[\"dist\",{\"1\":{\"61\":1}}],[\"dirs\",{\"1\":{\"25\":1}}],[\"down\",{\"1\":{\"65\":1}}],[\"downto\",{\"1\":{\"48\":1}}],[\"do\",{\"1\":{\"48\":1,\"97\":1}}],[\"double\",{\"1\":{\"45\":2,\"115\":1,\"117\":1}}],[\"docs\",{\"1\":{\"61\":1,\"70\":1,\"93\":1}}],[\"documented\",{\"1\":{\"18\":1}}],[\"docker\",{\"0\":{\"55\":1,\"58\":1,\"59\":1,\"64\":1,\"74\":1},\"1\":{\"9\":3,\"57\":1,\"61\":1,\"64\":2,\"65\":4,\"66\":3,\"74\":2,\"87\":1}}],[\"dockerfile\",{\"1\":{\"9\":1,\"61\":1,\"74\":1}}],[\"dbpassword\",{\"1\":{\"57\":1}}],[\"dbusername\",{\"1\":{\"57\":2}}],[\"db\",{\"1\":{\"30\":7}}],[\"d\",{\"1\":{\"25\":2,\"41\":2,\"57\":1,\"65\":1,\"66\":1,\"73\":1,\"117\":2}}],[\"description\",{\"1\":{\"112\":1}}],[\"destinations\",{\"1\":{\"57\":1}}],[\"destroy\",{\"1\":{\"16\":1}}],[\"development\",{\"1\":{\"110\":1}}],[\"developer\",{\"1\":{\"93\":1}}],[\"deleted\",{\"1\":{\"97\":1}}],[\"deploy\",{\"1\":{\"110\":1}}],[\"deployment\",{\"0\":{\"85\":1},\"1\":{\"85\":1}}],[\"deprecation\",{\"1\":{\"17\":1}}],[\"deprecated\",{\"1\":{\"16\":1,\"17\":2}}],[\"demos\",{\"1\":{\"73\":2}}],[\"demo\",{\"1\":{\"70\":1}}],[\"decorator\",{\"1\":{\"54\":1}}],[\"declaredconstructor\",{\"1\":{\"35\":3,\"36\":3}}],[\"derived\",{\"1\":{\"52\":1}}],[\"default\",{\"1\":{\"19\":4,\"44\":1}}],[\"debian\",{\"1\":{\"60\":2,\"93\":1}}],[\"deb\",{\"1\":{\"9\":8}}],[\"awt\",{\"1\":{\"110\":1}}],[\"aap\",{\"1\":{\"97\":1}}],[\"as\",{\"1\":{\"74\":1}}],[\"author\",{\"1\":{\"112\":1}}],[\"auto\",{\"1\":{\"57\":3}}],[\"auxiliary\",{\"1\":{\"73\":1}}],[\"addr\",{\"1\":{\"65\":2,\"70\":3}}],[\"address\",{\"1\":{\"57\":1}}],[\"admin\",{\"1\":{\"57\":1,\"66\":6}}],[\"at\",{\"1\":{\"48\":2}}],[\"ans\",{\"1\":{\"110\":1}}],[\"ant\",{\"1\":{\"108\":1}}],[\"and\",{\"1\":{\"45\":1}}],[\"android\",{\"1\":{\"38\":3,\"39\":1,\"108\":1}}],[\"any\",{\"1\":{\"44\":1,\"52\":3}}],[\"annotations\",{\"1\":{\"30\":2}}],[\"annotationname\",{\"1\":{\"19\":1}}],[\"annotation\",{\"1\":{\"16\":5,\"18\":9,\"19\":2,\"22\":1,\"30\":8,\"44\":1}}],[\"actualtypeargument\",{\"1\":{\"29\":4}}],[\"actualtypearguments\",{\"1\":{\"29\":4}}],[\"accessibility\",{\"1\":{\"110\":1}}],[\"access\",{\"1\":{\"9\":6}}],[\"a类的静态代码块初始化\",{\"1\":{\"23\":1}}],[\"application\",{\"1\":{\"92\":4}}],[\"applet\",{\"1\":{\"108\":1,\"110\":1}}],[\"apple\",{\"1\":{\"47\":3,\"48\":1,\"50\":2}}],[\"app\",{\"1\":{\"65\":3,\"70\":2,\"74\":2}}],[\"apis\",{\"1\":{\"110\":1}}],[\"apiserver\",{\"1\":{\"87\":1}}],[\"api\",{\"1\":{\"21\":2,\"70\":1,\"110\":1}}],[\"apt\",{\"1\":{\"9\":8,\"110\":1}}],[\"ages2\",{\"1\":{\"44\":1}}],[\"age=\",{\"1\":{\"30\":1}}],[\"age\",{\"1\":{\"19\":2,\"30\":9,\"44\":2}}],[\"always\",{\"1\":{\"65\":1,\"66\":1}}],[\"alpine3\",{\"1\":{\"61\":2}}],[\"alpine\",{\"1\":{\"60\":7,\"93\":1}}],[\"alexsun\",{\"1\":{\"21\":2,\"22\":2,\"24\":1,\"25\":1,\"26\":2,\"27\":3,\"29\":5,\"30\":2}}],[\"alex\",{\"1\":{\"19\":1,\"27\":1,\"30\":1,\"45\":2,\"50\":1,\"53\":1}}],[\"allowlist\",{\"1\":{\"97\":1}}],[\"allbydefault\",{\"1\":{\"51\":1}}],[\"all\",{\"1\":{\"17\":1}}],[\"aliyun\",{\"1\":{\"97\":1}}],[\"aliyuncs\",{\"1\":{\"9\":2}}],[\"alibaba\",{\"1\":{\"97\":2}}],[\"ali\",{\"1\":{\"97\":1}}],[\"alicdn\",{\"1\":{\"9\":1}}],[\"abstract\",{\"1\":{\"16\":1,\"97\":1}}],[\"architecture\",{\"1\":{\"73\":1}}],[\"arraydemo\",{\"1\":{\"97\":1}}],[\"arraylistof\",{\"1\":{\"48\":1}}],[\"arrayof\",{\"1\":{\"45\":2}}],[\"array<string>\",{\"1\":{\"40\":2,\"45\":3,\"46\":1,\"47\":3,\"48\":4}}],[\"array\",{\"1\":{\"24\":1,\"45\":4,\"48\":4}}],[\"arr\",{\"1\":{\"16\":1}}],[\"args\",{\"1\":{\"21\":1,\"22\":2,\"23\":1,\"24\":1,\"25\":2,\"26\":2,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"40\":2,\"42\":1,\"45\":3,\"46\":1,\"47\":3,\"48\":4,\"97\":1,\"111\":1,\"117\":2}}],[\"arg\",{\"1\":{\"9\":4}}],[\"a\",{\"1\":{\"16\":1,\"19\":1,\"23\":10,\"44\":1,\"45\":3,\"46\":4,\"47\":8,\"48\":1,\"93\":2,\"114\":4}}],[\"amd64\",{\"1\":{\"9\":1,\"73\":1}}],[\"uid\",{\"1\":{\"97\":1}}],[\"udp\",{\"1\":{\"63\":1,\"70\":1}}],[\"utf\",{\"1\":{\"57\":1,\"73\":2}}],[\"utilities\",{\"1\":{\"110\":1}}],[\"util\",{\"1\":{\"29\":2,\"97\":1,\"110\":1}}],[\"us\",{\"1\":{\"93\":1}}],[\"usr\",{\"1\":{\"61\":1,\"70\":1}}],[\"ushr\",{\"1\":{\"45\":1}}],[\"userdo\",{\"1\":{\"97\":2}}],[\"username\",{\"1\":{\"66\":1}}],[\"user>\",{\"1\":{\"29\":4}}],[\"user2\",{\"1\":{\"27\":1}}],[\"user\",{\"1\":{\"26\":2,\"27\":18,\"28\":14,\"29\":3,\"66\":2}}],[\"unsupported\",{\"1\":{\"73\":1}}],[\"until\",{\"1\":{\"48\":1}}],[\"unit\",{\"1\":{\"46\":1}}],[\"universe\",{\"1\":{\"9\":4}}],[\"unchecked\",{\"1\":{\"16\":1,\"17\":2}}],[\"url\",{\"1\":{\"9\":1,\"50\":1,\"57\":1}}],[\"url=https\",{\"1\":{\"9\":1}}],[\"uppercamelcase\",{\"1\":{\"97\":1}}],[\"up\",{\"1\":{\"65\":1,\"66\":1}}],[\"upgrade\",{\"1\":{\"9\":1}}],[\"update\",{\"1\":{\"9\":1}}],[\"updates\",{\"1\":{\"9\":1}}],[\"ubuntu22\",{\"1\":{\"9\":1}}],[\"ubuntu\",{\"1\":{\"9\":5,\"93\":1}}],[\"镜像是由\",{\"1\":{\"64\":1}}],[\"镜像\",{\"1\":{\"9\":1}}],[\"概述\",{\"0\":{\"9\":1}}],[\"1f\",{\"1\":{\"117\":1}}],[\"17\",{\"1\":{\"73\":1}}],[\"1m\",{\"1\":{\"65\":1,\"66\":1}}],[\"1241234124134123f\",{\"1\":{\"117\":1}}],[\"128m\",{\"1\":{\"70\":1}}],[\"127\",{\"1\":{\"64\":1,\"65\":1,\"70\":1}}],[\"123456\",{\"1\":{\"57\":1}}],[\"12345\",{\"1\":{\"46\":1}}],[\"123\",{\"1\":{\"45\":1}}],[\"16\",{\"1\":{\"45\":1}}],[\"13\",{\"1\":{\"30\":1,\"48\":1}}],[\"1982\",{\"1\":{\"108\":1}}],[\"1995\",{\"1\":{\"108\":2}}],[\"1972\",{\"1\":{\"108\":1}}],[\"1959ms\",{\"1\":{\"28\":1}}],[\"19\",{\"1\":{\"27\":1,\"30\":1,\"73\":1}}],[\"18b4aac2\",{\"1\":{\"25\":1}}],[\"18\",{\"1\":{\"19\":1,\"61\":2}}],[\"1000000000\",{\"1\":{\"28\":3}}],[\"100\",{\"1\":{\"23\":4,\"24\":1}}],[\"10\",{\"0\":{\"30\":1,\"106\":1},\"1\":{\"16\":1,\"30\":2,\"47\":1,\"48\":3,\"112\":1,\"117\":1}}],[\"11111\",{\"1\":{\"57\":2}}],[\"11\",{\"1\":{\"12\":1,\"60\":2}}],[\"1\",{\"0\":{\"9\":1,\"15\":1,\"16\":2,\"17\":1,\"18\":1,\"19\":1,\"21\":1,\"33\":1,\"37\":1,\"38\":2,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"44\":1,\"50\":1,\"56\":1,\"60\":1,\"63\":1,\"65\":1,\"69\":1,\"72\":1,\"76\":1,\"78\":1,\"88\":1,\"92\":1,\"96\":1,\"97\":2,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":2,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"114\":1},\"1\":{\"9\":2,\"12\":2,\"19\":1,\"24\":1,\"27\":1,\"44\":4,\"45\":4,\"46\":1,\"47\":9,\"48\":6,\"51\":2,\"57\":1,\"61\":2,\"64\":1,\"65\":1,\"70\":2,\"73\":3,\"92\":1,\"97\":1,\"111\":1,\"115\":2,\"117\":2}}],[\"挂载\",{\"0\":{\"8\":1}}],[\"后端工具合集\",{\"0\":{\"5\":1}}],[\"后端笔记\",{\"0\":{\"0\":1}}],[\"云服务\",{\"0\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
