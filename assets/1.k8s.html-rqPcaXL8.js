import{_ as l,r as o,o as r,c as d,b as e,a as n,w as t,d as s,e as i}from"./app-uNb852KP.js";const p={},c=e("h1",{id:"1-kubernetes-入门",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#1-kubernetes-入门"},[e("span",null,"1. Kubernetes 入门")])],-1),h={class:"table-of-contents"},u=i('<h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念"><span>基础概念</span></a></h2><h3 id="1-node" tabindex="-1"><a class="header-anchor" href="#1-node"><span>1. Node</span></a></h3><p>一个节点（Node）就是一个物理机或者虚拟机，在一个节点上我们可以运行一个或多个 Pod。</p><h3 id="2-pod" tabindex="-1"><a class="header-anchor" href="#2-pod"><span>2. Pod</span></a></h3><p>Pod 是 Kubernetes 调度的最小单位。一个 Pod 是一个或多个应用容器的组合，这意味着一个 Pod 能运行多个容器。</p><p>最佳实践是，一个 Pod 只运行一个容器，这样可以实现应用程序的解耦和扩展。</p><h3 id="3-service" tabindex="-1"><a class="header-anchor" href="#3-service"><span>3. Service</span></a></h3><p>Service 可以将 Pod 组合成一个服务，这个服务可以通过 Service 的 IP 和端口访问到。</p><h3 id="4-ingress" tabindex="-1"><a class="header-anchor" href="#4-ingress"><span>4. Ingress</span></a></h3><p>Ingress 是对外暴露服务的一种方式，它可以将外部的请求转发到集群内部的 Service 上。</p><h3 id="5-configmap" tabindex="-1"><a class="header-anchor" href="#5-configmap"><span>5. ConfigMap</span></a></h3><p>ConfigMap 可以将配置信息以键值对的形式保存起来，然后在 Pod 中使用。</p><h3 id="6-secret" tabindex="-1"><a class="header-anchor" href="#6-secret"><span>6. Secret</span></a></h3><p>Secret 可以将敏感信息以键值对的形式保存起来，然后在 Pod 中使用。</p><h3 id="7-volume" tabindex="-1"><a class="header-anchor" href="#7-volume"><span>7. Volume</span></a></h3><p>Volume 可以将 Pod 中的数据持久化到磁盘上。</p><h3 id="8-deployment" tabindex="-1"><a class="header-anchor" href="#8-deployment"><span>8. Deployment</span></a></h3><p>Deployment 可以将 Pod 进行编排，它可以实现 Pod 的滚动升级和回滚。</p><h3 id="9-statefulset" tabindex="-1"><a class="header-anchor" href="#9-statefulset"><span>9. StatefulSet</span></a></h3><p>StatefulSet 可以将 Pod 进行编排，它可以实现部署有状态的 Pod。</p><h2 id="kubernetes-架构" tabindex="-1"><a class="header-anchor" href="#kubernetes-架构"><span>Kubernetes 架构</span></a></h2><p>Kubernetes 有一个 Master 节点和多个 Node 节点组成。</p><p>为了使 Node 能够正常对外提供服务，Node 通常还需要三个组件：kubelet、kube-proxy 和容器运行时（container runtime）。</p><p>常见的容器运行时如下：</p><ul><li>Docker Engine</li><li>containerd</li><li>CRI-O</li><li>Mirantis Container Runtime</li></ul><p>kubelet 是 Kubernetes 的一个核心组件，它运行在每个 Node 上，负责管理 Pod 和容器。它也会定期汇报 Node 的状态，并从 apiserver 中获取 Pod 的调度更新信息。</p><p>k-proxy 是 Kubernetes 的一个核心组件，负责提供负载均衡和代理服务。</p><h3 id="1-master-节点" tabindex="-1"><a class="header-anchor" href="#1-master-节点"><span>1. Master 节点</span></a></h3>',28);function f(_,b){const a=o("router-link");return r(),d("div",null,[c,e("nav",h,[e("ul",null,[e("li",null,[n(a,{to:"#基础概念"},{default:t(()=>[s("基础概念")]),_:1}),e("ul",null,[e("li",null,[n(a,{to:"#1-node"},{default:t(()=>[s("1. Node")]),_:1})]),e("li",null,[n(a,{to:"#2-pod"},{default:t(()=>[s("2. Pod")]),_:1})]),e("li",null,[n(a,{to:"#3-service"},{default:t(()=>[s("3. Service")]),_:1})]),e("li",null,[n(a,{to:"#4-ingress"},{default:t(()=>[s("4. Ingress")]),_:1})]),e("li",null,[n(a,{to:"#5-configmap"},{default:t(()=>[s("5. ConfigMap")]),_:1})]),e("li",null,[n(a,{to:"#6-secret"},{default:t(()=>[s("6. Secret")]),_:1})]),e("li",null,[n(a,{to:"#7-volume"},{default:t(()=>[s("7. Volume")]),_:1})]),e("li",null,[n(a,{to:"#8-deployment"},{default:t(()=>[s("8. Deployment")]),_:1})]),e("li",null,[n(a,{to:"#9-statefulset"},{default:t(()=>[s("9. StatefulSet")]),_:1})])])]),e("li",null,[n(a,{to:"#kubernetes-架构"},{default:t(()=>[s("Kubernetes 架构")]),_:1}),e("ul",null,[e("li",null,[n(a,{to:"#1-master-节点"},{default:t(()=>[s("1. Master 节点")]),_:1})])])])])]),u])}const x=l(p,[["render",f],["__file","1.k8s.html.vue"]]);export{x as default};
