import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as t,c as s,b as e,a as c,w as a,d as i,e as l}from"./app-C0-zUjo9.js";const r={},p=e("h1",{id:"1-编程规约",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#1-编程规约"},[e("span",null,"1. 编程规约")])],-1),u={class:"table-of-contents"},g=i('<h2 id="11-命名风格" tabindex="-1"><a class="header-anchor" href="#11-命名风格"><span>1.1 命名风格</span></a></h2><ol><li><span style="color:var(--c-danger);">【强制】</span> 所有编程相关的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。 <ul><li><span style="color:var(--c-danger);">反例：</span> <code>_name</code> / <code>__name</code> / <code>$Object</code> / <code>name_</code> / <code>name$</code> / <code>Object$</code></li></ul></li><li><span style="color:var(--c-danger);">【强制】</span> 所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 <ul><li><span style="color:var(--c-warning);">说明：</span> 正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。</li><li><span style="color:var(--c-tip);">正例：</span> <code>ali</code> / <code>alibaba</code> / <code>taobao</code> / <code>kaikeba</code> / <code>aliyun</code> / <code>youku</code> / <code>hangzhou</code> 等国际通用的名称，可视同英文。</li><li><span style="color:var(--c-danger);">反例：</span> <code>DaZhePromotion</code>【打折】/ <code>getPingfenByName()</code>【评分】 / <code>String fw</code>【福娃】/ <code>int 变量名 = 3</code></li></ul></li><li><span style="color:var(--c-danger);">【强制】</span> 代码和注释中都要避免使用任何人类语言中的种族歧视性或侮辱性词语。 <ul><li><span style="color:var(--c-tip);">正例：</span> <code>blockList</code> / <code>allowList</code> / <code>secondary</code></li><li><span style="color:var(--c-danger);">反例：</span> <code>blackList</code> / <code>whiteList</code> / <code>slave</code> / <code>SB</code> / <code>WTF</code></li></ul></li><li><span style="color:var(--c-danger);">【强制】</span> 类名使用 UpperCamelCase 风格，以下情形例外：<code>DO</code> / <code>PO</code> / <code>DTO</code> / <code>BO</code> / <code>VO</code> / <code>UID</code> 等。 <ul><li><span style="color:var(--c-tip);">正例：</span> <code>ForceCode</code> / <code>UserDO</code> / <code>HtmlDTO</code> / <code>XmlService</code> / <code>TcpUdpDeal</code> / <code>TaPromotion</code></li><li><span style="color:var(--c-danger);">反例：</span> <code>forcecode</code> / <code>UserDo</code> / <code>HTMLDto</code> / <code>XMLService</code> / <code>TCPUDPDeal</code> / <code>TAPromotion</code></li></ul></li><li><span style="color:var(--c-danger);">【强制】</span> 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格。 <ul><li><span style="color:var(--c-tip);">正例：</span> <code>localValue</code> / <code>getHttpMessage()</code> / <code>inputUserId</code></li></ul></li><li><span style="color:var(--c-danger);">【强制】</span> 常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。 <ul><li><span style="color:var(--c-tip);">正例：</span> <code>MAX_STOCK_COUNT</code> / <code>CACHE_EXPIRED_TIME</code></li><li><span style="color:var(--c-danger);">反例：</span> <code>MAX_COUNT</code> / <code>EXPIRED_TIME</code></li></ul></li><li><span style="color:var(--c-danger);">【强制】</span> 抽象类命名使用 <code>Abstract</code> 或 <code>Base</code> 开头；异常类命名使用 <code>Exception</code> 结尾，测试类命名以它要测试的类的名称开始，以 <code>Test</code> 结尾。</li><li><span style="color:var(--c-danger);">【强制】</span> 类型与中括号紧挨相连来定义数组。 <ul><li><span style="color:var(--c-tip);">正例：</span> 定义整形数组 <code>int[] arrayDemo</code>。</li><li><span style="color:var(--c-danger);">反例：</span> 在 <code>main</code> 参数中，使用 <code>String args[]</code> 来定义。</li></ul></li><li><span style="color:var(--c-danger);">【强制】</span> POJO 类中的任何布尔类型的变量，都不要加 <code>is</code> 前缀，否则部分框架解析会引起序列化错误。 <ul><li><span style="color:var(--c-warning);">说明：</span> 本文 MySQL 规约中的建表约定第 1 条，表达是与否的变量采用 <code>is_xxx</code> 的命名方式，所以需要在 <code>&lt;resultMap&gt;</code> 设置从 <code>is_xxx</code> 到 <code>xxx</code> 的映射关系。</li><li><span style="color:var(--c-danger);">反例：</span> 定义为布尔类型 <code>Boolean isDeleted</code> 的字段，它的 <code>getter</code> 方法也是 <code>isDeleted()</code>，部分框架在反向解析时，“误以为” 对应的字段名称是 <code>deleted</code>，导致字段获取不到，得到意料之外的结果或抛出异常。</li></ul></li><li><span style="color:var(--c-danger);">【强制】</span> 包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。 <ul><li><span style="color:var(--c-tip);">正例：</span> 应用工具类包名为 <code>com.alibaba.ei.kunlun.aap.util</code>；类名为 <code>MessageUtils</code>（此规则参考 Spring 的框架结构）。</li></ul></li><li><span style="color:var(--c-danger);">【强制】</span> 避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可理解性降低。</li></ol><h2 id="12-常量定义" tabindex="-1"><a class="header-anchor" href="#12-常量定义"><span>1.2 常量定义</span></a></h2><h2 id="13-代码格式" tabindex="-1"><a class="header-anchor" href="#13-代码格式"><span>1.3 代码格式</span></a></h2><h2 id="14-oop-规约" tabindex="-1"><a class="header-anchor" href="#14-oop-规约"><span>1.4 OOP 规约</span></a></h2><h2 id="15-日期时间" tabindex="-1"><a class="header-anchor" href="#15-日期时间"><span>1.5 日期时间</span></a></h2><h2 id="16-集合处理" tabindex="-1"><a class="header-anchor" href="#16-集合处理"><span>1.6 集合处理</span></a></h2><h2 id="17-并发处理" tabindex="-1"><a class="header-anchor" href="#17-并发处理"><span>1.7 并发处理</span></a></h2><h2 id="18-控制语句" tabindex="-1"><a class="header-anchor" href="#18-控制语句"><span>1.8 控制语句</span></a></h2><h2 id="19-注释规约" tabindex="-1"><a class="header-anchor" href="#19-注释规约"><span>1.9 注释规约</span></a></h2><h2 id="110-前后端规约" tabindex="-1"><a class="header-anchor" href="#110-前后端规约"><span>1.10 前后端规约</span></a></h2>',11);function h(v,y){const o=n("router-link");return t(),s("div",null,[p,e("nav",u,[e("ul",null,[e("li",null,[c(o,{to:"#11-命名风格"},{default:a(()=>[l("1.1 命名风格")]),_:1})]),e("li",null,[c(o,{to:"#12-常量定义"},{default:a(()=>[l("1.2 常量定义")]),_:1})]),e("li",null,[c(o,{to:"#13-代码格式"},{default:a(()=>[l("1.3 代码格式")]),_:1})]),e("li",null,[c(o,{to:"#14-oop-规约"},{default:a(()=>[l("1.4 OOP 规约")]),_:1})]),e("li",null,[c(o,{to:"#15-日期时间"},{default:a(()=>[l("1.5 日期时间")]),_:1})]),e("li",null,[c(o,{to:"#16-集合处理"},{default:a(()=>[l("1.6 集合处理")]),_:1})]),e("li",null,[c(o,{to:"#17-并发处理"},{default:a(()=>[l("1.7 并发处理")]),_:1})]),e("li",null,[c(o,{to:"#18-控制语句"},{default:a(()=>[l("1.8 控制语句")]),_:1})]),e("li",null,[c(o,{to:"#19-注释规约"},{default:a(()=>[l("1.9 注释规约")]),_:1})]),e("li",null,[c(o,{to:"#110-前后端规约"},{default:a(()=>[l("1.10 前后端规约")]),_:1})])])]),g])}const b=d(r,[["render",h],["__file","index.html.vue"]]),x=JSON.parse('{"path":"/java-lang/alibaba-java-coding-guidelines/chapter01/","title":"1. 编程规约","lang":"zh-CN","frontmatter":{"description":"1. 编程规约 1.1 命名风格 【强制】 所有编程相关的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。 反例： _name / __name / $Object / name_ / name$ / Object$ 【强制】 所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明： 正确的英文拼写和语法可以...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-backend-notes/vuepress-backend-notes/java-lang/alibaba-java-coding-guidelines/chapter01/"}],["meta",{"property":"og:site_name","content":"后端笔记"}],["meta",{"property":"og:title","content":"1. 编程规约"}],["meta",{"property":"og:description","content":"1. 编程规约 1.1 命名风格 【强制】 所有编程相关的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。 反例： _name / __name / $Object / name_ / name$ / Object$ 【强制】 所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明： 正确的英文拼写和语法可以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T13:09:45.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-06T13:09:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. 编程规约\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-06T13:09:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1.1 命名风格","slug":"11-命名风格","link":"#11-命名风格","children":[]},{"level":2,"title":"1.2 常量定义","slug":"12-常量定义","link":"#12-常量定义","children":[]},{"level":2,"title":"1.3 代码格式","slug":"13-代码格式","link":"#13-代码格式","children":[]},{"level":2,"title":"1.4 OOP 规约","slug":"14-oop-规约","link":"#14-oop-规约","children":[]},{"level":2,"title":"1.5 日期时间","slug":"15-日期时间","link":"#15-日期时间","children":[]},{"level":2,"title":"1.6 集合处理","slug":"16-集合处理","link":"#16-集合处理","children":[]},{"level":2,"title":"1.7 并发处理","slug":"17-并发处理","link":"#17-并发处理","children":[]},{"level":2,"title":"1.8 控制语句","slug":"18-控制语句","link":"#18-控制语句","children":[]},{"level":2,"title":"1.9 注释规约","slug":"19-注释规约","link":"#19-注释规约","children":[]},{"level":2,"title":"1.10 前后端规约","slug":"110-前后端规约","link":"#110-前后端规约","children":[]}],"git":{"createdTime":1680351427000,"updatedTime":1715000985000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":2.58,"words":775},"filePathRelative":"java-lang/alibaba-java-coding-guidelines/chapter01/index.md","localizedDate":"2023年4月1日","autoDesc":true,"excerpt":"\\n\\n<h2>1.1 命名风格</h2>\\n<ol>\\n<li><span style=\\"color: var(--c-danger)\\">【强制】</span> 所有编程相关的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。\\n<ul>\\n<li><span style=\\"color: var(--c-danger)\\">反例：</span> <code>_name</code> / <code>__name</code> / <code>$Object</code> / <code>name_</code> / <code>name$</code> / <code>Object$</code></li>\\n</ul>\\n</li>\\n<li><span style=\\"color: var(--c-danger)\\">【强制】</span> 所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。\\n<ul>\\n<li><span style=\\"color: var(--c-warning)\\">说明：</span> 正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。</li>\\n<li><span style=\\"color: var(--c-tip)\\">正例：</span> <code>ali</code> / <code>alibaba</code> / <code>taobao</code> / <code>kaikeba</code> / <code>aliyun</code> / <code>youku</code> / <code>hangzhou</code> 等国际通用的名称，可视同英文。</li>\\n<li><span style=\\"color: var(--c-danger)\\">反例：</span> <code>DaZhePromotion</code>【打折】/ <code>getPingfenByName()</code>【评分】 / <code>String fw</code>【福娃】/ <code>int 变量名 = 3</code></li>\\n</ul>\\n</li>\\n<li><span style=\\"color: var(--c-danger)\\">【强制】</span> 代码和注释中都要避免使用任何人类语言中的种族歧视性或侮辱性词语。\\n<ul>\\n<li><span style=\\"color: var(--c-tip)\\">正例：</span> <code>blockList</code> / <code>allowList</code> / <code>secondary</code></li>\\n<li><span style=\\"color: var(--c-danger)\\">反例：</span> <code>blackList</code> / <code>whiteList</code> / <code>slave</code> / <code>SB</code> / <code>WTF</code></li>\\n</ul>\\n</li>\\n<li><span style=\\"color: var(--c-danger)\\">【强制】</span> 类名使用 UpperCamelCase 风格，以下情形例外：<code>DO</code> / <code>PO</code> / <code>DTO</code> / <code>BO</code> / <code>VO</code> / <code>UID</code> 等。\\n<ul>\\n<li><span style=\\"color: var(--c-tip)\\">正例：</span> <code>ForceCode</code> / <code>UserDO</code> / <code>HtmlDTO</code> / <code>XmlService</code> / <code>TcpUdpDeal</code> / <code>TaPromotion</code></li>\\n<li><span style=\\"color: var(--c-danger)\\">反例：</span> <code>forcecode</code> / <code>UserDo</code> / <code>HTMLDto</code> / <code>XMLService</code> / <code>TCPUDPDeal</code> / <code>TAPromotion</code></li>\\n</ul>\\n</li>\\n<li><span style=\\"color: var(--c-danger)\\">【强制】</span> 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格。\\n<ul>\\n<li><span style=\\"color: var(--c-tip)\\">正例：</span> <code>localValue</code> / <code>getHttpMessage()</code> / <code>inputUserId</code></li>\\n</ul>\\n</li>\\n<li><span style=\\"color: var(--c-danger)\\">【强制】</span> 常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。\\n<ul>\\n<li><span style=\\"color: var(--c-tip)\\">正例：</span> <code>MAX_STOCK_COUNT</code> / <code>CACHE_EXPIRED_TIME</code></li>\\n<li><span style=\\"color: var(--c-danger)\\">反例：</span> <code>MAX_COUNT</code> / <code>EXPIRED_TIME</code></li>\\n</ul>\\n</li>\\n<li><span style=\\"color: var(--c-danger)\\">【强制】</span> 抽象类命名使用 <code>Abstract</code> 或 <code>Base</code> 开头；异常类命名使用 <code>Exception</code> 结尾，测试类命名以它要测试的类的名称开始，以 <code>Test</code> 结尾。</li>\\n<li><span style=\\"color: var(--c-danger)\\">【强制】</span> 类型与中括号紧挨相连来定义数组。\\n<ul>\\n<li><span style=\\"color: var(--c-tip)\\">正例：</span> 定义整形数组 <code>int[] arrayDemo</code>。</li>\\n<li><span style=\\"color: var(--c-danger)\\">反例：</span> 在 <code>main</code> 参数中，使用 <code>String args[]</code> 来定义。</li>\\n</ul>\\n</li>\\n<li><span style=\\"color: var(--c-danger)\\">【强制】</span> POJO 类中的任何布尔类型的变量，都不要加 <code>is</code> 前缀，否则部分框架解析会引起序列化错误。\\n<ul>\\n<li><span style=\\"color: var(--c-warning)\\">说明：</span> 本文 MySQL 规约中的建表约定第 1 条，表达是与否的变量采用 <code>is_xxx</code> 的命名方式，所以需要在 <code>&lt;resultMap&gt;</code> 设置从 <code>is_xxx</code> 到 <code>xxx</code> 的映射关系。</li>\\n<li><span style=\\"color: var(--c-danger)\\">反例：</span> 定义为布尔类型 <code>Boolean isDeleted</code> 的字段，它的 <code>getter</code> 方法也是 <code>isDeleted()</code>，部分框架在反向解析时，“误以为” 对应的字段名称是 <code>deleted</code>，导致字段获取不到，得到意料之外的结果或抛出异常。</li>\\n</ul>\\n</li>\\n<li><span style=\\"color: var(--c-danger)\\">【强制】</span> 包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。\\n<ul>\\n<li><span style=\\"color: var(--c-tip)\\">正例：</span> 应用工具类包名为 <code>com.alibaba.ei.kunlun.aap.util</code>；类名为 <code>MessageUtils</code>（此规则参考 Spring 的框架结构）。</li>\\n</ul>\\n</li>\\n<li><span style=\\"color: var(--c-danger)\\">【强制】</span> 避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可理解性降低。</li>\\n</ol>"}');export{b as comp,x as data};
