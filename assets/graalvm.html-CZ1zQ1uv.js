import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as d,b as a,e,a as n,w as r,d as l}from"./app-B1gzhM40.js";const p={},u=a("h1",{id:"graalvm-入门",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#graalvm-入门"},[a("span",null,"GraalVM 入门")])],-1),m={href:"https://www.graalvm.org/latest/reference-manual/native-image/guides/containerise-native-executable-and-run-in-docker-container/",target:"_blank",rel:"noopener noreferrer"},g={class:"table-of-contents"},v=a("h2",{id:"1-安装",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#1-安装"},[a("span",null,"1. 安装")])],-1),h={href:"https://www.graalvm.org/downloads/",target:"_blank",rel:"noopener noreferrer"},b=l(`<p>或者使用命令安装：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sdk <span class="token function">install</span> <span class="token function">java</span> <span class="token number">21.0</span>.2-graal
</code></pre></div><h2 id="2-运行示例" tabindex="-1"><a class="header-anchor" href="#2-运行示例"><span>2. 运行示例</span></a></h2><p>克隆示例项目：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/graalvm/graalvm-demos
<span class="token builtin class-name">cd</span> graalvm-demos/spring-native-image
</code></pre></div><p>Windows 下的构建脚本：</p><div class="language-bat" data-ext="bat" data-title="bat"><pre class="language-bat"><code>call &quot;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat&quot;

set JAVA_HOME=D:\\Program\\graalvm-jdk-21.0.2+13.1
set PATH=%PATH%;D:\\Program\\graalvm-jdk-21.0.2+13.1\\bin
./mvnw native:compile -Pnative
</code></pre></div>`,7),k={class:"hint-container details"},_=a("summary",null,"Windows 构建错误",-1),f=a("code",null,"Error: On Windows, GraalVM Native Image for JDK 21 requires Visual Studio 2022 version 17.1.0 or later (C/C++ Optimizing Compiler Version 19.31 or later).",-1),w={href:"https://visualstudio.microsoft.com/",target:"_blank",rel:"noopener noreferrer"},V=a("li",null,[e("仿照上面的命令，执行 "),a("code",null,"vcvars64.bat"),e("，然后再执行构建命令")],-1),x=l("<li><code>Native-image building on Windows currently only supports target architecture: AMD64 (?? unsupported)</code><ol><li>将 Windows 的字符集修改为 <code>UTF-8</code>，然后重启系统（在 <strong>时间和语言</strong> -&gt; <strong>语言和区域</strong> -&gt; <strong>管理语言设置</strong> -&gt; <strong>更改系统区域设置</strong> 下启用 UTF-8 即可）</li></ol></li>",1),y=l(`<p>Linux 下的构建脚本：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./mvnw native:compile <span class="token parameter variable">-Pnative</span>
</code></pre></div><p>构建成功后执行：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./target/benchmark-jibber
</code></pre></div><p>测试：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> http://localhost:8080/jibber
</code></pre></div><h2 id="3-使用-docker-部署" tabindex="-1"><a class="header-anchor" href="#3-使用-docker-部署"><span>3. 使用 Docker 部署</span></a></h2><p>使用多阶段构建，将下面的内容保存为 <code>Dockerfile</code>：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> container-registry.oracle.com/graalvm/native-image:21-ol8 <span class="token keyword">AS</span> builder</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /build</span>

<span class="token instruction"><span class="token keyword">COPY</span> . /build</span>

<span class="token instruction"><span class="token keyword">RUN</span> ./mvnw --no-transfer-progress native:compile -Pnative</span>

<span class="token instruction"><span class="token keyword">FROM</span> container-registry.oracle.com/os/oraclelinux:8-slim</span>

<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>

<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /build/target/benchmark-jibber app</span>

<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;/app&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> benchmark-jibber <span class="token builtin class-name">.</span>
</code></pre></div><p>运行容器：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 benchmark-jibber
</code></pre></div><p>再次执行测试：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> http://localhost:8080/jibber
</code></pre></div>`,15);function M(G,C){const s=o("ExternalLinkIcon"),t=o("router-link");return c(),d("div",null,[u,a("p",null,[e("本文参考了 "),a("a",m,[e("GraalVM 官方文档"),n(s)]),e("。")]),a("nav",g,[a("ul",null,[a("li",null,[n(t,{to:"#1-安装"},{default:r(()=>[e("1. 安装")]),_:1})]),a("li",null,[n(t,{to:"#2-运行示例"},{default:r(()=>[e("2. 运行示例")]),_:1})]),a("li",null,[n(t,{to:"#3-使用-docker-部署"},{default:r(()=>[e("3. 使用 Docker 部署")]),_:1})])])]),v,a("p",null,[e("首选我们需要下载并安装 "),a("a",h,[e("GraalVM"),n(s)]),e("，这里选择 GraalVM 21.0.2。")]),b,a("details",k,[_,a("ol",null,[a("li",null,[f,a("ol",null,[a("li",null,[e("需要安装 "),a("a",w,[e("Visual Studio 2022"),n(s)])]),V])]),x])]),y])}const N=i(p,[["render",M],["__file","graalvm.html.vue"]]),O=JSON.parse('{"path":"/tools/graalvm/graalvm.html","title":"GraalVM 入门","lang":"zh-CN","frontmatter":{"description":"GraalVM 入门 本文参考了 GraalVM 官方文档。 1. 安装 首选我们需要下载并安装 GraalVM，这里选择 GraalVM 21.0.2。 或者使用命令安装： 2. 运行示例 克隆示例项目： Windows 下的构建脚本： Windows 构建错误 Error: On Windows, GraalVM Native Image for ...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/tools/graalvm/graalvm.html"}],["meta",{"property":"og:site_name","content":"后端笔记"}],["meta",{"property":"og:title","content":"GraalVM 入门"}],["meta",{"property":"og:description","content":"GraalVM 入门 本文参考了 GraalVM 官方文档。 1. 安装 首选我们需要下载并安装 GraalVM，这里选择 GraalVM 21.0.2。 或者使用命令安装： 2. 运行示例 克隆示例项目： Windows 下的构建脚本： Windows 构建错误 Error: On Windows, GraalVM Native Image for ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T13:09:45.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-06T13:09:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GraalVM 入门\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-06T13:09:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 安装","slug":"1-安装","link":"#1-安装","children":[]},{"level":2,"title":"2. 运行示例","slug":"2-运行示例","link":"#2-运行示例","children":[]},{"level":2,"title":"3. 使用 Docker 部署","slug":"3-使用-docker-部署","link":"#3-使用-docker-部署","children":[]}],"git":{"createdTime":1706507402000,"updatedTime":1715000985000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":1.26,"words":377},"filePathRelative":"tools/graalvm/graalvm.md","localizedDate":"2024年1月29日","autoDesc":true,"excerpt":"\\n<p>本文参考了 <a href=\\"https://www.graalvm.org/latest/reference-manual/native-image/guides/containerise-native-executable-and-run-in-docker-container/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">GraalVM 官方文档</a>。</p>\\n\\n<h2>1. 安装</h2>\\n<p>首选我们需要下载并安装 <a href=\\"https://www.graalvm.org/downloads/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">GraalVM</a>，这里选择 GraalVM 21.0.2。</p>"}');export{N as comp,O as data};
