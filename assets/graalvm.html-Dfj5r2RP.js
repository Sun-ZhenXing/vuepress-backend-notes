import{_ as t,r,o as c,c as i,b as s,d as a,a as n,w as o,e as p}from"./app-uNb852KP.js";const d={},D=s("h1",{id:"graalvm-入门",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#graalvm-入门"},[s("span",null,"GraalVM 入门")])],-1),u={href:"https://www.graalvm.org/latest/reference-manual/native-image/guides/containerise-native-executable-and-run-in-docker-container/",target:"_blank",rel:"noopener noreferrer"},y={class:"table-of-contents"},v=s("h2",{id:"1-安装",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#1-安装"},[s("span",null,"1. 安装")])],-1),h={href:"https://www.graalvm.org/downloads/",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>或者使用命令安装：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">sdk</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">java</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">21.0</span><span style="color:#CE9178;">.2-graal</span></span>
<span class="line"></span></code></pre></div><h2 id="2-运行示例" tabindex="-1"><a class="header-anchor" href="#2-运行示例"><span>2. 运行示例</span></a></h2><p>克隆示例项目：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">git</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">clone</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">https://github.com/graalvm/graalvm-demos</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">graalvm-demos/spring-native-image</span></span>
<span class="line"></span></code></pre></div><p>Windows 下的构建脚本：</p><div class="language-bat" data-ext="bat" data-title="bat"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">call</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">JAVA_HOME</span><span style="color:#D4D4D4;">=D:\\Program\\graalvm-jdk-21.0.2+13.1</span></span>
<span class="line"><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">PATH</span><span style="color:#D4D4D4;">=</span><span style="color:#9CDCFE;">%PATH%</span><span style="color:#D4D4D4;">;D:\\Program\\graalvm-jdk-21.0.2+13.1\\bin</span></span>
<span class="line"><span style="color:#D4D4D4;">./mvnw native:compile -Pnative</span></span>
<span class="line"></span></code></pre></div>`,7),g={class:"hint-container details"},m=s("summary",null,"Windows 构建错误",-1),C=s("code",null,"Error: On Windows, GraalVM Native Image for JDK 21 requires Visual Studio 2022 version 17.1.0 or later (C/C++ Optimizing Compiler Version 19.31 or later).",-1),E={href:"https://visualstudio.microsoft.com/",target:"_blank",rel:"noopener noreferrer"},k=s("li",null,[a("仿照上面的命令，执行 "),s("code",null,"vcvars64.bat"),a("，然后再执行构建命令")],-1),_=p("<li><code>Native-image building on Windows currently only supports target architecture: AMD64 (?? unsupported)</code><ol><li>将 Windows 的字符集修改为 <code>UTF-8</code>，然后重启系统（在 <strong>时间和语言</strong> -&gt; <strong>语言和区域</strong> -&gt; <strong>管理语言设置</strong> -&gt; <strong>更改系统区域设置</strong> 下启用 UTF-8 即可）</li></ol></li>",1),x=p(`<p>Linux 下的构建脚本：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">./mvnw</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">native:compile</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-Pnative</span></span>
<span class="line"></span></code></pre></div><p>构建成功后执行：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">./target/benchmark-jibber</span></span>
<span class="line"></span></code></pre></div><p>测试：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">curl</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">http://localhost:8080/jibber</span></span>
<span class="line"></span></code></pre></div><h2 id="3-使用-docker-部署" tabindex="-1"><a class="header-anchor" href="#3-使用-docker-部署"><span>3. 使用 Docker 部署</span></a></h2><p>使用多阶段构建，将下面的内容保存为 <code>Dockerfile</code>：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">FROM</span><span style="color:#D4D4D4;"> container-registry.oracle.com/graalvm/native-image:21-ol8 </span><span style="color:#569CD6;">AS</span><span style="color:#D4D4D4;"> builder</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">WORKDIR</span><span style="color:#D4D4D4;"> /build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">COPY</span><span style="color:#D4D4D4;"> . /build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">RUN</span><span style="color:#D4D4D4;"> ./mvnw --no-transfer-progress native:compile -Pnative</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">FROM</span><span style="color:#D4D4D4;"> container-registry.oracle.com/os/oraclelinux:8-slim</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">EXPOSE</span><span style="color:#D4D4D4;"> 8080</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">COPY</span><span style="color:#D4D4D4;"> --from=builder /build/target/benchmark-jibber app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">CMD</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&quot;/app&quot;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">build</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-t</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">benchmark-jibber</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">.</span></span>
<span class="line"></span></code></pre></div><p>运行容器：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">run</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-it</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--rm</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-p</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">8080</span><span style="color:#CE9178;">:8080</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">benchmark-jibber</span></span>
<span class="line"></span></code></pre></div><p>再次执行测试：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">curl</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">http://localhost:8080/jibber</span></span>
<span class="line"></span></code></pre></div>`,15);function f(A,w){const l=r("ExternalLinkIcon"),e=r("router-link");return c(),i("div",null,[D,s("p",null,[a("本文参考了 "),s("a",u,[a("GraalVM 官方文档"),n(l)]),a("。")]),s("nav",y,[s("ul",null,[s("li",null,[n(e,{to:"#1-安装"},{default:o(()=>[a("1. 安装")]),_:1})]),s("li",null,[n(e,{to:"#2-运行示例"},{default:o(()=>[a("2. 运行示例")]),_:1})]),s("li",null,[n(e,{to:"#3-使用-docker-部署"},{default:o(()=>[a("3. 使用 Docker 部署")]),_:1})])])]),v,s("p",null,[a("首选我们需要下载并安装 "),s("a",h,[a("GraalVM"),n(l)]),a("，这里选择 GraalVM 21.0.2。")]),b,s("details",g,[m,s("ol",null,[s("li",null,[C,s("ol",null,[s("li",null,[a("需要安装 "),s("a",E,[a("Visual Studio 2022"),n(l)])]),k])]),_])]),x])}const M=t(d,[["render",f],["__file","graalvm.html.vue"]]);export{M as default};
