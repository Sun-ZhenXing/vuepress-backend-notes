import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c,b as a,a as s,w as e,d as r,e as t}from"./app-B1gzhM40.js";const i={},d=a("h1",{id:"docker-中使用-canal",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#docker-中使用-canal"},[a("span",null,"Docker 中使用 Canal")])],-1),u={class:"table-of-contents"},m=r(`<h2 id="1-mysql-配置" tabindex="-1"><a class="header-anchor" href="#1-mysql-配置"><span>1. MySQL 配置</span></a></h2><p>检查是否开启了 binlog：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;log_bin&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>添加如下配置到 <code>my.cnf</code> 文件中：</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code>[mysqld]
<span class="token key attr-name">server_id</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">log_bin</span> <span class="token punctuation">=</span> <span class="token value attr-value">mysql-bin</span>
<span class="token key attr-name">binlog_format</span> <span class="token punctuation">=</span> <span class="token value attr-value">ROW</span>
</code></pre></div><p>重启 MySQL，此时 MySQL 已经开启了 binlog。</p><h2 id="2-canal-配置" tabindex="-1"><a class="header-anchor" href="#2-canal-配置"><span>2. Canal 配置</span></a></h2><p>启动 Canal Server：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">11111</span>:11111 <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> canal-server <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.auto.scan <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.destinations <span class="token operator">=</span> example <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.instance.master.address <span class="token operator">=</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.instance.dbUsername <span class="token operator">=</span> root <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.instance.dbPassword <span class="token operator">=</span> <span class="token number">123456</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.instance.connectionCharset <span class="token operator">=</span> UTF-8 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.instance.tsdb.enable <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.instance.gtidon <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.instance.auto.scan <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.instance.auto.scan.interval <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.instance.filter.regex <span class="token operator">=</span> .*<span class="token punctuation">\\</span><span class="token punctuation">\\</span><span class="token punctuation">..</span>* <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.instance.filter.black.regex <span class="token operator">=</span> <span class="token punctuation">(</span>mysql<span class="token punctuation">\\</span><span class="token punctuation">\\</span>.slave_.*<span class="token operator">|</span>.*<span class="token punctuation">\\</span><span class="token punctuation">\\</span>_bak<span class="token punctuation">)</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.instance.tsdb.url <span class="token operator">=</span> jdbc:mysql:// <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> canal.instance.tsdb.dbUsername <span class="token operator">=</span> canal
    canal/canal-server:v1.1.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容器内的 <code>/home/admin/canal-server/conf/example/instance.properties</code> 文件即为示例文件。</p>`,10);function k(v,b){const n=o("router-link");return p(),c("div",null,[d,a("nav",u,[a("ul",null,[a("li",null,[s(n,{to:"#1-mysql-配置"},{default:e(()=>[t("1. MySQL 配置")]),_:1})]),a("li",null,[s(n,{to:"#2-canal-配置"},{default:e(()=>[t("2. Canal 配置")]),_:1})])])]),m])}const y=l(i,[["render",k],["__file","docker-canal.html.vue"]]),_=JSON.parse(`{"path":"/tools/canal/docker-canal.html","title":"Docker 中使用 Canal","lang":"zh-CN","frontmatter":{"description":"Docker 中使用 Canal 1. MySQL 配置 检查是否开启了 binlog： 添加如下配置到 my.cnf 文件中： 重启 MySQL，此时 MySQL 已经开启了 binlog。 2. Canal 配置 启动 Canal Server： 容器内的 /home/admin/canal-server/conf/example/instance...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/tools/canal/docker-canal.html"}],["meta",{"property":"og:site_name","content":"后端笔记"}],["meta",{"property":"og:title","content":"Docker 中使用 Canal"}],["meta",{"property":"og:description","content":"Docker 中使用 Canal 1. MySQL 配置 检查是否开启了 binlog： 添加如下配置到 my.cnf 文件中： 重启 MySQL，此时 MySQL 已经开启了 binlog。 2. Canal 配置 启动 Canal Server： 容器内的 /home/admin/canal-server/conf/example/instance..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T13:09:45.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-06T13:09:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 中使用 Canal\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-06T13:09:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. MySQL 配置","slug":"1-mysql-配置","link":"#1-mysql-配置","children":[]},{"level":2,"title":"2. Canal 配置","slug":"2-canal-配置","link":"#2-canal-配置","children":[]}],"git":{"createdTime":1715000985000,"updatedTime":1715000985000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":0.46,"words":138},"filePathRelative":"tools/canal/docker-canal.md","localizedDate":"2024年5月6日","autoDesc":true,"excerpt":"\\n\\n<h2>1. MySQL 配置</h2>\\n<p>检查是否开启了 binlog：</p>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">SHOW</span> VARIABLES <span class=\\"token operator\\">LIKE</span> <span class=\\"token string\\">'log_bin'</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>"}`);export{y as comp,_ as data};
